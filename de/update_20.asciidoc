include::global_attr.adoc[]
= Update auf Version {v20}
:revdate: draft
:title: Update auf Version 2.0.0
:description: Was es beim Update von {CMK} Version 1.6.0 auf die 2.0.0 zu beachten gibt, erfahren Sie in diesem Artikel.

{related-start}
link:update.html[Updates und Upgrades]
link:install_packages.html[Grundsätzliches zur Installation von {CMK}]
{related-end}


[#intro]
== Einleitung

In diesem Artikel finden Sie die wichtigsten Themen, die für das Update Ihrer {CMK}-Version {v16} auf {v20} relevant sind.

Wir empfehlen Ihnen, vor dem Update den kompletten Artikel durchzulesen, damit Sie genau wissen, was auf Sie zukommt: vor, während und nach dem Update.


[#prep]
== Vorbereitungen
//TK: Text hier verstößt gegen unsere Regeln. Ich könnte den Teil in die Einleitung hochziehen, müsste dann aber alle Kapitel vorstellen, was ich überflüssig finde.
//SK: Die Regel habe ich bisher auch noch nicht verstanden und hat gerne mal zu seltsamen zusätzlichen Überschriften oder sogar größeren Umstellungen der Kapitel geführt. Warum soll ich denn nicht einleitend darauf hinweisen, worum es in einem Kapitel geht? Wer konkret nach Punkt 2.3 sucht kann doch gerne da hin springen. Hält ihn doch niemand von ab. Allen anderen erklären wir in zwei Sätzen was folgt.

In diesem Kapitel erhalten Sie die Übersicht der Themen, um die Sie sich kümmern sollten, bevor Sie das Update durchführen. Nicht jedes der Themen wird wahrscheinlich für Sie relevant sein: Bei einem solchen können Sie intern einen Haken setzen und sich gleich das nächste Thema vornehmen.


[#dokuwiki]
=== DokuWiki
//Werk #11495: Remove dokuwiki from standard Checkmk packages
//SK: Einen eigenen Artikel wird es hierzu nicht geben. Der Umzug der Daten aus dem inkludierten DokuWiki in eine eigene Installation, ist ausschließlich im Rahmen des Updates auf Checkmk 2.0 relevant. Sollte es Rückfragen von Kunden bzgl. des Verbleibs der Daten geben, würde ein eigener Artikel dazu m.E auch nicht weiterhelfen.
//TK:Wie heißt das Teil 

Das DokuWiki ist nicht länger Bestandteil der {CMK}-Software.

*Betrifft Sie das?* Das betrifft Sie, wenn Sie das Wiki bisher beispielsweise
zur Bereitstellung von Informationen in Form von Notizen (_notes_) oder über das
Seitenleisten-Snapin [.guihint]#WIKI# in {CMK} genutzt haben.

*Was müssen Sie tun?*

Ein wichtiger Hinweis vorweg: Die im Checkmk inkludierten DokuWiki gespeichterten Daten, werden beim Update auf {CMK} {v20} nicht gelöscht. Nur die Software selbst wird aus den entsprechenden Verzeichnissen entfernt. Sie könnten Ihre Daten aus DokuWiki demnach auch noch jederzeit nach dem Update die Version {v20} umziehen.

//Wenn Sie bisher das mitgelieferte DokuWiki verwendet haben und die Informationen auch weiterhin verwenden wollen so haben Sie zwei Möglichkeiten dies zu tun:
Wenn Sie bisher das mitgelieferte DokuWiki verwendet haben und die Informationen auch weiterhin verwenden wollen, so empfehen wir DokuWiki seperat zu installieren. Eine entsprechende Anleitung dazu finden Sie auf den Seiten des Projekts link:https://www.dokuwiki.org/Install[dokuwiki.org].

////
==== DokuWiki in die local-Struktur von Checkmk umziehen

Um DokuWiki nach einem Update auf die {v20} auch weiterhin "innerhalb" von {CMK} betreiben zu können, empfehlen wir die folgende Vorgehensweise:

Ablauf Wiki nach local/share kopieren:

. OMD[mysite]:~$ cp -Lr ~/share/dokuwiki/ ~/local/share/
. ~/etc/dokuwiki/apache.conf editieren. Sollte im Anschluss nur noch das hier 
enthalten:

Alias /test2/wiki "/omd/sites/test2/local/share/dokuwiki/htdocs"

<Directory /omd/sites/test2/local/share/dokuwiki/htdocs>
      Order deny,allow
      allow from all
</Directory>

. nach omd update ist leider der symbolische Link zur Apache-Config weg. Also neu machen:

OMD[mysite]:~$ ln -s ../../dokuwiki/apache.conf ~/etc/apache/conf.d/dokuwiki.conf

. Snapin wieder einfügen
cp share/doc/check_mk/treasures/wiki_sidebar_snapin.py local/share/check_mk/web/plugins/sidebar/

. omd restart apache
////

//==== DokuWiki auf einen anderen Server umziehen

Da alle Artikel und weiteren Texte und Strukturen in DokuWiki nur aus Textdateien und Verzeichnissen bestehen, ist der Umzug auf einen anderen Server tatsächlich ausgesprochen einfach. Kopieren Sie hierzu einfach den Inhalt des Ordners `~/var/dokuwiki/data` aus Ihrer {CMK}-Instanz in das gleichnamige Verzeichnis Ihrer neuen DokuWiki-Installation.


[#linux_versions]
=== Linux-Distributionsversionen
//Werks #10315+#10317 SLES 12 SP1+SP2, Werk #10312 Ubuntu 18.10, Werk #11957 Ubuntu 19.10.
//TK: Die anderen Versionen hab ich aus der Download-Seite extrahiert.

In der {CMK} Version {v20} werden einige veraltete Linux-Distributionsversionen nicht mehr unterstützt.

*Betrifft Sie das?* Das betrifft Sie, wenn auf Ihrem {CMK}-Server eine der folgenden, in der {v16} noch unterstützten, Versionen installiert ist:

* Red Hat Enterprise Linux (RHEL) und CentOS Version 6.x
* SUSE Linux Enterprise Server (SLES) Version 12 SP1 oder SP2
* Debian Version 8.0
* Ubuntu Version 14.04, 18.10, 19.04 oder 19.10

*Was müssen Sie tun?* Führen Sie vor dem Update von {CMK} zuerst ein Update der Linux-Distribution durch. Achten Sie darauf, dass die Ziel-Version der Linux-Distribution von {CMK} {v16} *und* {v20} unterstützt wird.

Welche Linux-Distributionsversionen {CMK} unterstützt, erfahren Sie im link:install_packages.html#supported_distributions[Artikel zur Installation] und auf der link:https://checkmk.com/download[Download-Seite] nachdem Sie die {CMK}-Version und Ihre Linux-Distribution ausgewählt haben.

//SK: Sollen wir hier noch noch mal irgendwo eine Tabelle mit den ganzen Versionen anbieten? Das ganze war im alten Download-Archiv etwas einfacher auf einen Blick zu erkennen.
//TK: Ich hab jetzt noch einen Zusatzlink auf unseren Installationsübersichtsartikel hinzugefügt.

Sollte es nun notwendig sein, vor dem Update von {CMK}, ein Upgrade von Linux vorzunehmen so empfehlen wir die folgende Vorgehensweise:
//TK: Ich würde das analog zu CMK ein Linux-Update und nicht Linux-Upgrade nennen
//TK: Der folgende Teil würde dann durch einen Link auf den neuen Artikel ersetzt werden, richtig?

. Stoppen Sie zunächst Ihre {CMK}-Instanz:

[{shell}]
----
{c-root} omd stop mysite
----

[start=2]
. Hängen Sie das tmp-Verzeichnis der Instanz aus:

[{shell}]
----
{c-root} umount /opt/omd/sites/mysite/tmp
----

[start=3]
. Verschieben Sie das gesamte omd-Verzeichnis, damit hieran im nächsten Schritt keine ungewollten Änderungen auftreten können. Bei einem Release-Upgrade werden im Regelfall alle Pakete entfernt, deren Abhängigkeiten nicht mehr erfüllt werden können. Zu diesen Paketen würde auch {CMK} gehören. Um hier einen Datenverlust zu verhindern ist dieser Schritt notwendig und kann ein per `mv` durchgeführt werden.

[{shell}]
----
{c-root} mv /opt/omd /opt/omd.bak
----

[start=4]
. Führen Sie das Upgrade von Linux entsprechend der Anleitung des jeweiligen Distributors durch.

. Nach dem erfolgreichen Upgrade Ihrer Linux-Distribution, müssen Sie nun das in Sicherheit gebrachte omd-Verzeichnis wieder an Ort und Stelle verschieben:

[{shell}]
----
{c-root} mv /opt/omd.bak /opt/omd
----

[start=6]
. Installieren Sie nun ein das zur neuen Version der verwendeten Distribution passendendes Paket von {CMK}.
*Wichtig:* Die Versionsnummer von {CMK} muss exakt der vorher verwendeten entsprechen. Wenn Sie also vor dem Upgrade der Distribution {CMK} 1.6.0p22 verwendet haben, so installieren Sie nun die 1.6.0p22, die zu Ihrer neuen Linux-Version passt.

Im Falle von Ubuntu würde an dieser Stelle der folgende Befehl genügen:

[{shell}]
----
{c-root} gdebi check-mk-enterprise-1.6.0p22_0.focal_amd64.deb
----

Halten Sie sich bei der Neu-Installation von {CMK} an die jeweilige link:https://docs.checkmk.com/latest/en/install_packages.html#_installation_instructions[detailierte Installationsanleitung] für Ihre jeweilige Distribution.

//SK: Eine detailierte Anleitung zu diesem Thema folgt. Der Entwurf heißt draft_release_upgrade. Ticket KNW-517

[#local_files]
=== Lokale Dateien

Mit lokalen Dateien können Sie die von {CMK} bereitgestellte Funktionalität anpassen und erweitern. Diese Dateien befinden sich im lokalen Teil der Instanzverzeichnisstruktur, d.h. in `~/local`. Lokale Dateien können bei einem Update Probleme bereiten, da sie eventuell nicht mehr zur neuen {CMK}-Version passen.

*Betrifft Sie das?* Da es für {CMK} bei einem Update nicht möglich ist, die lokalen Anpassungen und jede von einem Drittanbieter hergestellte Erweiterung abzufangen und zu behandeln, sollten Sie Ihre {CMK}-Instanz vor einem Update daraufhin überprüfen, ob und welche lokale Dateien bei Ihnen verwendet werden.

*Was müssen Sie tun?* Verschaffen Sie sich einen Überblick über die lokalen Dateien Ihrer {CMK}-Instanz, indem Sie als Instanzbenutzer das folgende Kommando ausführen (bei dem die Option `-L` dafür sorgt, dass auch symbolischen Links gefolgt wird):

[{shell}]
----
{c-omd} find -L ~/local -type f
----

In einer frischen Installation von Checkmk wird Ihnen derzeit nur eine Datei namens `README.TXT` aufgelistet.
Alles, was darüber hinaus angezeigt wird, sollte ganz oben auf Ihrer Liste zur Fehlerdiagnose stehen, falls es beim Update Probleme gibt.
Besondere Aufmerksamkeit verdienen Skripte und Checkplugins, die in Python 2 geschrieben sind und Checkplugins, die der alten Check-API folgen. Auf beide Themen gehen wir genauer ein in den beiden folgenden Kapiteln.


[#python3]
=== Code-Basis Python 3
//Werk #11080: Port Checkmk to Python 3
//KNW-462-Ticket: "Dependencies im Python 3-Kontext: "ich kann dein Modul nicht mehr installieren". Man muss dann mit PIP die Dependencies zunächst in Python 3 installieren"
//KNW-462-Ticket: "Typische Probleme bei der Check-API Migration + wie gehe ich mit inkompatiblem GUI Extensions um"

Der größte Teil von {CMK} ist in der Programmiersprache Python geschrieben -- über 10 Jahren lang in Python 2. Mit der Version {v20} haben wir nun den großen Schritt gemacht und {CMK} auf Python 3 portiert. Dieser Schritt war aufwendig, aber notwendig, um {CMK} effizient und sicher weiter entwickeln zu können.

Bis einschließlich zur Version {v16} wird {CMK} mit Python 2.7 und allen notwendigen Drittanbieter-Modulen (_third-party modules_) ausgeliefert. *Statt* mit Python 2.7 wird {CMK} {v20} mit Python 3.8 und ebenfalls allen notwendigen Drittanbieter-Modulen ausgeliefert.

*Betrifft Sie das?* Dieser Python Versionswechsel ist für Sie relevant, wenn Sie in Python 2 geschriebene link:update_20#local_files[lokale Dateien] (Skripte oder Plugins) verwenden.

*Was müssen Sie tun?* Ändern Sie in Skripten den link:https://de.wikipedia.org/wiki/Shebang[„Shebang“] und passen Sie den Code von Python 2 auf 3 an:

In einem Skript, das direkt aus einem Cronjob oder dem Core aufgerufen wird, z.B. ein Benachrichtigungsskript, haben Sie in der Vergangenheit oft den folgenden Shebang verwendet:

[{file}]
----
#!/usr/bin/env python
----

Damit haben Sie das in der Version {v16} ausgelieferte Python 2.7 verwendet. Da dieses nicht mehr existiert, wird ohne eine Änderung dieser Zeile die Pythonversion des Betriebssystems verwendet. Welche das ist, hängt von Ihrem Betriebssystem ab und kann von Ihnen mit dem folgenden Kommando abgefragt werden.

[{shell}]
----
{c-omd} python --version
Python 2.7.18
----

Wir empfehlen, den Shebang so zu ändern:
[{file}]
----
#!/usr/bin/env python3
----

Damit können Sie wieder das Python verwenden, das mit {CMK} {v20} geliefert wird.

Danach müssen Sie möglicherweise in Ihren Skripten einige Anpassungen vornehmen, um Ihren Code von Python 2 auf 3 umzustellen. Was dafür zu tun ist, erfahren Sie im nächsten Kapitel zur neuen Check-API.

[#check-api]
=== Die neue Check-API

{CMK} {v20} führt eine neue Check-API ein, die die Checkplugins neu strukturiert, um ihre Handhabung zu vereinheitlichen und zu vereinfachen.

Da es aber eine große Zahl von Checks gibt, die nach der alten, bis zur Version {v16} gültige Check-API programmiert wurden, wird die alte Check-API für eine Übergangszeit weiterhin unterstützt.

*Betrifft Sie das?* Die neue API betrifft Sie, wenn Sie die mit {CMK} ausgelieferten um ihre eigenen, selbstgeschriebenen Checks erweitert haben und/oder wenn Sie Plugins aus anderen Quellen nutzen und diese z.B. von der link:https://exchange.checkmk.com/[{CMK} Exchange] heruntergeladen haben. Die betroffenen Dateien finden Sie in den link:update_20#local_files[lokalen Dateien] Ihrer Instanz.

*Was müssen Sie tun?* Wir versuchen Ihnen, den Umstieg auf die neue Check-API so leicht und komfortabel wie möglich zu machen:

Nach dem Update auf die Version {v20} versucht {CMK} alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue Check-API zu migrieren. Diese „Automigration“ passiert zur Laufzeit; die Plugindateien werden nicht verändert. Wie Sie sich nach dem Update die Ergebnisse anzeigen lassen können, erfahren Sie im Kapitel link:update_20#automigration[Automigration auf die neue Check-API überprüfen].

Die Chancen stehen zwar gut, dass die Automigration Ihrer Checkplugins reibungslos funktioniert, dennoch erfordert die  Umstellung auf Python 3 möglicherweise einige Anpassungen. Durch die Einführung der neuen Check-API und durch die Änderung der Code-Basis auf Python 3 gibt es gleich zwei gute Gründe ihre selbstgeschriebenen Checkplugins zu überarbeiten. Wir informieren Sie ausführlich über die notwendigen Schritte im Blogpost zur Migration von Checkplugins (Link wird nach der Veröffentlichung hinzugefügt).

Zu guter Letzt punktet die neue Check-API mit verbesserter Dokumentation: Es gibt einen einführenden Artikel zur link:devel_check_plugins.html[Programmierung eigener Checkplugins] mit der neuen Check-API und Sie können in {CMK} {v20} die stets aktuelle Plugin-API-Referenzdokumentation über die {CMK}-Oberfläche aufrufen -- im neuen [.guihint]#Help#-Menü der Navigationsleiste. 


[#incompatible]
=== Inkompatible Änderungen
//Das sollte das letzte Kapitel in Vorbereitungen sein.

Wie in jeder {CMK} Version, so gibt es auch in der aktuellen Version {v20} Änderungen der Software, die Rückwirkungen auf ihre {CMK}-Installation haben _können_. Eine sogenannte _inkompatible Änderung_ kann erfordern, dass Sie manuell Anpassungen durchführen müssen, damit bestehende Funktionen weiterhin wie gewohnt ablaufen und/oder neue Funktionen genutzt werden können.

*Betrifft Sie das?* In aller Regel wird es inkompatible Änderungen geben, die auch Ihre {CMK}-Installation betreffen. Eine generelle Aussage ist aber leider unmöglich.
In diesem Artikel haben wir diejenigen Themen zusammengetragen, die für alle oder die meisten {CMK}-Installationen relevant sind. Es kann aber sein, dass es weitere, für Sie relevante Änderungen gibt, zum Beispiel bei Checks, die Sie in Ihrer Installation verwenden.

*Was müssen Sie tun?* Nachdem Sie das link:update_20#update[Update] durchgeführt haben, werden Ihnen in der {CMK}-Oberfläche Anzahl und Inhalt der inkompatiblen Änderungen angezeigt, und Sie werden aufgefordert, diese zu prüfen und zur Kenntnis zu nehmen. Also werden Sie auf jeden Fall mit diesem Thema konfrontiert werden -- allerdings erst, nachdem Sie das Update durchgeführt haben.

Es ist daher eine gute Idee, sich bereits *vor* dem Update einen Überblick über die inkompatiblen Änderungen zu verschaffen: Öffnen Sie die Liste der link:https://checkmk.com/de/werks/[Werks]. (Die Software-Entwicklung von {CMK} ist in sogenannten Werks organisiert.) Filtern Sie die Werkliste nach {CMK} 2.0 *und* nach Kompatibilität, d.h. markieren Sie die Checkbox [.guihint]#Only show incompatible#. In der Beschreibung eines Werks finden Sie Hinweise, was gegebenenfalls zu tun ist, um die Änderung kompatibel zu machen.

Die frustierende Nachricht: Die Werkliste einer Version ist sehr, sehr lang -- selbst wenn Sie nur die inkompatiblen Änderungen enthält. Die tröstliche Nachricht: An der Anzahl der Änderungen können Sie sehen, wie groß unsere Anstrengungen sind, {CMK} für Sie zu verbessern.


[#update]
== Update

Am eigentlichen Update der Software hat sich in der {CMK} {v20} nichts Grundlegendes geändert, d.h. Sie installieren die neue Version, führen das Update der {CMK}-Instanz durch, kümmern sich um Konflikte (falls es denn welche geben sollte) und überprüfen und bestätigen die inkompatiblen Änderungen.

Führen Sie die Update-Prozedur so aus, wie sie im link:update.html#detailed[Artikel zu Updates und Upgrades] beschrieben ist.

//TK: Update nötig vom ganzen Kapitel update#detailed
//TK: Artikel update: Da gibt es das Kapitel 2. Vorbemerkung. Soll das da bleiben oder schaufeln wir das in diesen Artikel?
//TK: Artikel update: Da sollten die beiden folgenden Punkte aus dem KNW-462-Ticket behandelt werden (oder?): "Update: Woran erkenne ich, dass es funktioniert hat" und "OMD Update: bei folgenden Fehlern, machen sie folgende Maßnahmen"
//TK: Artikel update: Neuen Kurzhinweis auf Backup einbauen?


[#follow-up]
== Nachbereitungen
//TK: Da wird noch mehr kommen, wenn wir wissen, was alles nachher noch zu tun ist.
//KNW-462-Ticket: "Neue Features, die manuellen Eingriff benötigen"
//TK: Gibt es solche neuen Features?


[#gui]
=== Die neue Benutzeroberfläche
*Die* nicht zu übersehende Neuerung in der {CMK} Version {v20} ist die komplett neu gestaltete Benutzeroberfläche (_GUI_), wie sie sich Ihnen nach der Anmeldung präsentiert:

image::gui.png[]

Die folgende Übersicht ist für  den eiligen Versionsumsteiger gedacht und zeigt, wo sich die wichtigsten der wohlbekannten GUI-Elemente aus der Version {v16} in der Version {v20} befinden:

[cols=3]
|===
|Vorher |Jetzt |Anmerkung 
|- |Navigationsleiste |Die neue Navigationsleiste ist stets auf der linken Seite und bietet neue Menüs, am wichtigsten: [.guihint]#Setup# und [.guihint]#Monitor#
|Seitenleiste |Seitenleiste |Die Seitenleiste befindet sich standardmäßig auf der rechten Seite und  zeigt wichtige Zustandsinformationen für den Operator. Die Seitenleiste kann wie gewohnt um Snapins erweitert werden.
|Seitenleiste > {CMK}-Logozeile mit Informationen über {CMK} Edition, Version, Zahl inkompatibler Änderungen und Link zu den Release notes |[.guihint]#Help#-Menü |Im [.guihint]#Help#-Menü der Navigationsleiste wird die {CMK} Edition und Version angezeigt. Die Zahl nicht kompatibler Änderungen nach einem Update wird gegebenenfalls im Symbol des [.guihint]#Help#-Menüs eingeblendet. Zum Aufruf der Release notes gibt es [.guihint]#Help#-Menüeinträge.
|[.guihint]#WATO - Configuration# |[.guihint]#Setup#-Menü |Das [.guihint]#Setup#-Menü in der Navigationsleiste ersetzt das Snapin [.guihint]#WATO - Configuration# in der Seitenleiste. Für die Seitenleiste gibt es die beiden Snapins [.guihint]#Setup# und [.guihint]#Quick Setup#.
|[.guihint]#WATO > Host & Service Parameters# |[.guihint]#Setup#-Menü |Die Kategorien der Regelsätze finden sich, komplett überarbeitet, im [.guihint]#Setup#-Menü unter [.guihint]#Hosts#, [.guihint]#Services# und [.guihint]#Agents#.
|[.guihint]#WATO > Monitoring Agents# |[.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX# |Zugang zur Agentenbäckerei in den {CEE}
|- |Suchfeld im [.guihint]#Setup#-Menü |Neu ist die Suche in der Konfigurationsumgebung (u.a. nach Regelsätzen und globalen Einstellungen).
|[.guihint]#Views# |[.guihint]#Monitor#-Menü |Das [.guihint]#Monitor#-Menü in der Navigationsleiste ersetzt das Snapin [.guihint]#Views# in der Seitenleiste, das aber weiterhin verfügbar ist.
|[.guihint]#Quicksearch# |Suchfeld im [.guihint]#Monitor#-Menü |Das Snapin [.guihint]#Quicksearch# für die Seitenleiste ist weiterhin verfügbar.
|Hauptseite > Kopfzeile mit Benutzernamen, Zeit und Buchsymbol zur Einblendung der Hilfetexte |Hauptseite > Kopfzeile mit Anzahl der noch nicht aktivierten Änderungen |Der aktuelle Benutzername mit zugewiesener Rolle wird im [.guihint]#User#-Menü der Navigationsleiste angezeigt. Die Hilfetexte können auf jeder Hauptseite im [.guihint]#Help#-Menü unter [.guihint]#Context sensitive help# ein- und wieder ausgeblendet werden.
|Hauptseite mit Aktionsknöpfen (_buttons_) |Hauptseite mit Breadcrumb, Menüleiste und Aktionsleiste |Die „Breadcrumb“-Navigation zeigt den Pfad zur aktuellen Seite, darunter folgt die kontext-spezifische Menüleiste und wiederum darunter eine Aktionsleiste mit Knöpfen für die wichtigsten Menüeinträge.
|===

Im link:intro_welcome.html[Leitfaden für Einsteiger] finden Sie eine ausführliche Einführung in die wichtigsten Elemente der link:intro_gui.html[neuen GUI].


[#fetcher_checker]
=== Fetcher und Checker
//TK: Ich hab den allgemeinen Teil nach oben verschoben

In {CMK} {v20} hat sich das Prinzip der sogenannten Helper-Prozesse sehr stark verändert. Bis {CMK} {v16} waren diese Helper dafür zuständig Checks durchzuführen. Die Helper-Prozesse blieben dauerhaft und sorgten so für eine deutliche Verbesserung der Performance, weil auf die zeitintensive Erzeugung neuer Prozesse verzichtet werden konnte.

In {CMK} {v20} werden diese Helper im Grunde nur noch spezialisierter und zielgerichteter ihre Aufgaben verrichten. Statt wie bisher sowohl für das Abholen und anschließende Auswerten der Informationen zuständig zu sein, wird der eine Teil der Helper in Zukunft nur für das Abholen der Informationen zuständig sein. Diese Helper nennen wir zukünftig _Fetcher_. Der andere Teil hingegen kümmert sich dann darum, die vom _Fetcher_ übergebenen Informationen auszuwerten. Diese Prozesse nennen wir _Checker_.
//TK: Ich würde im obigen Absatz im Präsens schreiben, weil die 2.0 ist ja jetzt aktuell und der Update ist durch.

*Betrifft Sie das?* Kurz: ja. Jeder Administrator von {CMK} {v20} sollte sich mit diesem Punkt in den [.guihint]#Global Settings# auseinandersetzen.

//SK: Wollen wir an dieser Stelle noch beschreiben warum wir das so machen, oder steht das vielleicht im Blog? Interessant wäre das eigentlich schon, aber uneigentlich sind die beiden Absätze hierüber schon fast zu lang.
//TK: Hintergrundinformationen find ich immer nützlich. Ich finde, dass das Thema auch so sehr verständlich beschriebn hast.

*Was müssen Sie tun?* Sie müssen in [.guihint]#Setup > General > Hosts > Global Settings# die Werte für [.guihint]#Maximum concurrent Checkmk fetchers# und [.guihint]#Maximum concurrent Checkmk checkers# anpassen.

Für die _Checker_ lässt sich klar sagen, dass der Wert auf keinen Fall größer sein sollte, als ihr Server parallel Prozesse abarbeiten kann. Im Regelfall entspricht diese Zahl der Anzahl an Rechenkernen Ihres {CMK}-Servers. Dies wäre aber das absolute Maximum, dessen Überschreitung keinen Sinn ergibt.

Im Falle der _Fetcher_ hingegen in der verfügbare Arbeitsspeicher des Servers der limitierende Faktor. Um hier eine gute Einstelleung zu finden, empfehlen wir die Aktivierung des Seitenleistenelements
[.guihint]#Core statistics#. Darin werden Ihnen die prozentualen Auslastungen der Fetcher und Checker angezeigt. Sollten die Fetcher hier regelmäßig nah bei 100 % liegen, müssen Sie deren Anzahl erhöhen, um ein performantes System zu erhalten.
//TK: Seitenleisten-Snapin heisst jetzt Core statistics: Ich habs geändert.

//SK: Ich würde hier gerne auf den entsprechenden Abschnitt im Artikel cmc_differences verlinken, aber der beschreibt natürlich noch die Situation in der 1.6. Das würde ich gerne bald ändern, damit ich hier nicht zu sehr ins Detail gehen muss.

[#automigration]
=== Automigration auf die neue Check-API überprüfen
// Werk #10601: Auto migration of check plugins to new section definitions

Sie können überprüfen, ob alle lokalen Plugins aus den Verzeichnissen `~/local/share/check_mk/checks` und `~/local/share/check_mk/inventory` automatisch auf die neue Check-API migriert werden können.

*Betrifft Sie das?* Diese Überprüfung ist sinnvoll, wenn in Ihren lokalen Dateien Checks existieren, die nach der alten, bis zur Version {v16} gültige Check-API programmiert wurden

*Was müssen Sie tun?* Führen Sie als Instanzbenutzer das folgende Kommando aus:

[{shell}]
----
{c-omd} cmk -R
Failed to auto-migrate legacy plugin to check plugin: mssql_counters
Please refer to Werk 10601 for more information.
----

Die Meldung oben zeigt, dass ein Plugin nicht automatisch migriert werden konnte. Alle gelisteten Plugins müssen von Ihnen manuell migriert werden. Es gibt einige Gründe, bei denen eine Automigration nicht durchgeführt werden kann und die Sie im genannten link:https://checkmk.com/werk/10601[Werk #10601] nachlesen können. Wie Sie die manuelle Migration durchführen, erfahren Sie im Blogpost zur Migration von Checkplugins (Link wird nach der Veröffentlichung hinzugefügt).


[#outlook]
== Ausblick


[#distributed_monitoring_sync]
=== Verteiltes Monitoring mit unterschiedlichen {CMK}-Versionen
//Werk #11072: Distributed environments: Improve config synchronization

Die Synchronization der Konfigurationsdateien zwischen den Instanzen im link:distributed_monitoring[verteilten Monitoring] hat sich in der Version {v20} geändert.

In der Version {v16} werden *alle* Konfigurationsdateien zwischen der Zentralinstanz (_central site_) und den fernen Instanzen (_remote sites_) synchronisiert; in der {v20} inkrementell nur noch die, die sich geändert haben.

Um den Update aller im verteilten Monitoring beteiligter Instanzen auf die {v20} zu ermöglichen, funktioniert die Synchronization für eine Übergangszeit auch in einer gemischten Umgebung, d.h., zwischen einer Zentralinstanz mit Version {v16} und fernen Instanzen mit Version {v20} oder zwischen einer {v20} Zentralinstanz und fernen {v16} Instanzen. In gemischten Umgebungen wird weiterhin, wie in der Version {v16}, komplett synchronisiert.

Dieser Kompatibiliätsmodus wird in der nächsten {CMK}-Version (zur Zeit geplant als 2.1.0) entfernt. Wir empfehlen, alle im verteilten Monitoring beteiligen Instanzen zügig auf die Version {v20} upzudaten.


[#web-api]
=== Abkündigung der Web-API

Die Web-API (auch HTTP-API genannt) wird ab der übernächsten {CMK}-Version (zur Zeit geplant als 2.2.0) nicht mehr unterstützt. Die Web-API wir durch die neue, in der {v20} eingeführte link:rest_api.html[REST-API] abgelöst.

////
//[#details]
== Details
//Das ist das Kapitel für Anweisungen, die den Rahmen der obigen Kapitel für den schnellen Über-/Durchblick sprengen.
////
