// -*- coding: utf-8 -*-
include::../global_attr.adoc[]


[#extensions]
== Den Agenten erweitern

////
2.0 Text
[#mrpe]
== Einbinden von klassischen Check-Plugins

=== Plugins über MRPE ausführen

Wenn Sie Ihr Monitoring von einer Nagios-basierten Lösung auf {CMK}
migriert haben, ist es nicht ganz ausgeschlossen, dass Sie ältere Check-Plugins haben,
zu denen es (noch) kein Pendant in {CMK} gibt. In
den meisten Fällen sind das selbstgeschriebene Plugins in Perl oder Shell.

Der {CMK}-Agent bietet einen einfachen Mechanismus, solche Plugins weiter
zu verwenden: _MK's Remote Plugin Executor_ oder kurz _MRPE_.
Der Name ist bewusst eine Analogie zum _NRPE_ von Nagios, der dort
die gleiche Aufgabe übernimmt.

Der MRPE ist im Agenten fest eingebaut und wird mit einer einfachen
Textdatei konfiguriert, welche Sie unter `/etc/check_mk/mrpe.cfg`
selbst anlegen. Dort geben Sie pro Zeile einen Pluginaufruf an -- zusammen
mit dem Namen, den {CMK} für den Service verwenden soll, den es dafür
automatisch erzeugt. Hier ist ein Beispiel:

./etc/check_mk/mrpe.cfg
[{file}]
----
Foo_Application /usr/local/bin/check_foo -w 60 -c 80
Bar_Extender /usr/local/bin/check_bar -s -X -w 4:5
----

Wenn Sie jetzt den Agenten lokal laufen lassen, finden Sie
pro Plugin eine neue Sektion mit dem Titel `+<<<mrpe>>>+`,
welche Name, Exitcode und Ausgabe des Plugins enthält. Das können Sie mit folgendem
praktischen `grep`-Befehl überprüfen:

[{shell-raw}]
----
{c-root} check_mk_agent | grep -A1 '^...mrpe'
<<<mrpe>>>
(check_foo) Foo_Application 0 OK - Foo server up and running
<<<mrpe>>>
(check_bar) Bar_Extender 1 WARN - Bar extender overload 6.012|bar_load=6.012
----

Die `0` bzw. `1` in der Ausgabe stehen für die Exitcodes der
Plugins und folgen dem klassischen Schema: `0` = {OK}, `1` =
{WARN}, `2` = {CRIT} und `3` = {UNKNOWN}.

Den Rest macht jetzt {CMK} automatisch. Sobald Sie die Serviceerkennung
für den Host aufrufen, werden die beiden neuen Services als
xref:wato_services#available[verfügbar] angezeigt. Das sieht dann so aus:

image::agent_linux_mrpe_checks.png[]

Übrigens: Aufgrund der Syntax der Datei darf
der Name keine Leerzeichen enthalten. Sie können aber mithilfe der gleichen
Syntax wie in URLs ein Space durch `%20` ersetzen (ASCII-Code 32 für Space
ist Hexadezimal 20):

./etc/check_mk/mrpe.cfg
[{file}]
----
Foo%20Application /usr/local/bin/check_foo -w 60 -c 80
Bar%20Extender /usr/local/bin/check_bar -s -X -w 4:5
----


=== Asynchrone Ausführung

Bitte beachten Sie, dass alle Plugins, die Sie in `mrpe.cfg` aufführen,
der Reihe nach synchron ausgeführt werden. Die Plugins sollten daher keine
allzu große Ausführungszeit haben. Wenn ein Plugin hängt, verzögert sich die
Ausführung aller weiteren. Das kann dazu führen, dass das komplette Abfragen
des Agenten durch {CMK} in einen Timeout laufen und der Host nicht mehr
zuverlässig überwacht werden kann.

Wenn Sie wirklich länger laufende Plugins benötigen, sollten Sie diese auf
asynchrone Ausführung umstellen und das Problem damit vermeiden. Dabei legen
Sie eine Zeit in Sekunden fest, die ein berechnetes Ergebnis Gültigkeit
haben soll, z.B. `300` für fünf Minuten. Setzen Sie dazu in
`mrpe.cfg` nach dem Servicenamen den Ausdruck `(interval=300)`:

./etc/check_mk/mrpe.cfg
[{file}]
----
Foo_Application (interval=300) /usr/local/bin/check_foo -w 60 -c 80
Bar_Extender /usr/local/bin/check_bar -s -X -w 4:5
----

Das hat mehrere Auswirkungen:

* Das Plugin wird in einem Hintergrundprozess ausgeführt und bremst nicht mehr die Ausführung des Agenten.
* Weil der Agent die Ausführung nicht abwartet, wird das Ergebnis erst beim _nächsten_ Aufruf des Agenten geliefert.
* Frühestens nach 300 Sekunden wird das Plugin neu ausgeführt. Bis dahin wird das alte Ergebnis wiederverwendet.

Damit können Sie also Tests, die etwas mehr Rechenzeit benötigen, auch in
größeren Intervallen ausführen, ohne dass Sie dazu am {CMK}-Server etwas
konfigurieren müssen.


=== MRPE mit der Agentenbäckerei

{cee-only}
Nutzer der {EE} können MRPE auch mit der xref:wato_monitoringagents#bakery[Agentenbäckerei] konfigurieren.
Zuständig dafür ist der Regelsatz [.guihint]#Setup > Agents > Windows, Linux Solaris, AIX > Agent Rules > Generic Options > Execute MRPE checks#.
Dort können Sie die gleichen Dinge wie oben beschrieben konfigurieren.
Die Datei `mrpe.cfg` wird dann von der Bäckerei automatisch generiert.

image::agent_linux_mrpe_rule.png[]


==== Backen der Plugins

Auch die Checkplugins selbst können Sie mit dem Paket ausliefern lassen. Damit
ist der Agent dann komplett und braucht keine manuelle Installation von
weiteren Dateien. Das Ganze geht so:

. Erzeugen Sie auf dem {CMK}-Server das Verzeichnis `local/share/check_mk/agents/custom`.
. Erzeugen Sie dort ein Unterverzeichnis -- z.B. `my_mrpe_plugins`.
. Erzeugen Sie wiederum darin das Unterverzeichnis `bin`.
. Kopieren Sie Ihre Plugins in den bin-Ordner.
. Legen Sie eine Regel in [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Generic Options > Deploy custom files with agent# an.
. Wählen Sie `my_mrpe_plugins` aus, speichern Sie und backen Sie!

Die Check-Plugins werden jetzt in das Standard-`bin`-Verzeichnis Ihres Agenten installiert.
Per Default ist das `/usr/bin`. Bei der Konfiguration der MRPE-Checks verwenden Sie dann also `/usr/bin/check_foo` anstelle von `/usr/local/bin/check_foo`.
////


////
2.0 Text
[#plugins]
== Agent um Plugins erweitern

=== Was sind Plugins?

Der Standardagent `/usr/bin/check_mk_agent` enthält eine ganze
Reihe von Sektionen, welche Überwachungsdaten für diverse Checks
liefern und dann von der Serviceerkennung automatisch gefunden werden.
Dazu gehören alle wichtigen Überwachungen des Betriebssystems.

Darüber hinaus gibt es die Möglichkeit, den Agenten um Agentenplugins zu
erweitern. Das sind kleine Skripten oder Programme, die vom Agenten aufgerufen
werden und diesen um weitere Sektionen mit zusätzlichen Monitoring-Daten
erweitern. Das {CMK}-Projekt liefert eine ganze Reihe solcher Plugins
mit aus, welche -- wenn sie korrekt installiert und konfiguriert sind --
in der Serviceerkennung automatisch neue Checks liefern.

Warum sind diese Plugins nicht einfach in den Standardagenten fest
integriert? Für jedes der Plugins gibt es einen der folgenden Gründe:

* Das Plugin ist in einer anderen Programmiersprache als Shell geschrieben und kann daher nicht inline realisiert werden (Beispiel: `mk_logwatch`).
* Das Plugin braucht sowieso eine Konfiguration, ohne die es nicht funktionieren würde (Beispiel: `mk_oracle`).
* Das Plugin ist so speziell, dass es von den meisten Anwendern nicht benötigt wird (Beispiel: `plesk_domains`).

[#manualplugins]
=== Manuelle Installation von Plugins

Die vom Projekt mitgelieferten Plugins für Linux und UNIX finden Sie alle
auf dem {CMK}-Server unter `share/check_mk/agents/plugins`.
Auch über die Downloadseite der Agenten im Setup-Menü (wie am Anfang des
Artikels beschrieben) sind diese im Kasten [.guihint]#Plugins#
verfügbar:

image::agent_linux_files_agent_plugins.png[]

Zu allen von uns mitgelieferten Agentenplugins existieren die passenden Checkplugins,
welche deren Daten auswerten und Services erzeugen können. Diese sind bereits
mitinstalliert, so dass neu gefundene Dienste sofort erkannt werden und konfiguriert werden können.

Bevor Sie ein Plugin im Agenten installieren, werfen Sie bitte einen Blick
in die entsprechende Datei. Oft finden Sie dort wichtige Hinweise zur
korrekten Verwendung des Plugins.

Die eigentliche Installation ist dann einfach: Kopieren Sie die Datei
nach `/usr/lib/check_mk_agent/plugins`. Achten Sie dabei darauf,
dass diese _ausführbar_ ist. Falls nicht, verwenden Sie ein `chmod
755`. Der Agent wird das Plugin sonst nicht ausführen. Insbesondere,
wenn Sie die Dateien nicht per `scp` übertragen sondern per HTTP von
der Downloadseite holen, geht die Ausführungsberechtigung verloren!

Sobald das Plugin ausführbar und im richtigen Verzeichnis ist, wird
es vom Agenten aufgerufen und es entsteht eine neue Sektion in der
Agentenausgabe. Diese trägt üblicherweise den gleichen Namen wie
das Plugin. Komplexe Plugins (z.B. `mk_oracle`) erzeugen
sogar eine ganze Reihe von Sektionen.


[#pluginconfig]
=== Konfiguration der Plugins

Manche Plugins brauchen eine Konfigurationsdatei in `/etc/check_mk/`,
damit sie funktionieren können. Bei anderen ist eine Konfiguration optional
und ermöglicht besondere Features oder Anpassungen. Wieder andere funktionieren
einfach so. Sie haben verschiedene Quellen, um an Informationen zu kommen:

* Die Dokumentation der Check-Plugins in Ihrer {CMK}-Instanz, welche Sie über [.guihint]#Setup > Services > Catalog of check plugins# erreichen
* Kommentare im Plugin selbst (oft sehr hilfreich!)
* Einen passenden Artikel in diesem Handbuch (z.B. über das Überwachen von xref:monitoring_oracle#[Oracle])


[#async_plugins]
=== Asynchrone Ausführung

Ebenso wie bei MRPE können Sie auch Plugins asynchron ausführen lassen. Das
ist sehr nützlich, wenn die Plugins eine lange Laufzeit haben und die
gewonnenen Statusdaten ohnehin nicht jede Minute neu erzeugt werden
brauchen.

Die asynchrone Ausführung wird nicht über eine Datei konfiguriert. Stattdessen
erzeugen Sie unter `plugins` ein Unterverzeichnis, dessen Name eine Zahl
ist: eine Anzahl von Sekunden. Plugins in diesem Verzeichnis werden nicht nur
asynchron ausgeführt, sondern gleichzeitig geben Sie mit der Sekundenzahl
eine Mindestwartezeit vor, bevor das Plugin erneut ausgeführt werden soll.
Wird der Agent vor Ablauf der Zeit erneut abgefragt, verwendet er gecachte
Daten von der letzten Ausführung des Plugins. Damit können Sie quasi ein größeres
Intervall für das Plugin konfigurieren, als die typische eine Minute.

Folgendes Beispiel zeigt, wie das Plugin `my_foo_plugin` von synchroner
Ausführung auf eine asynchrone Ausführung mit einem Intervall von 5 Minuten
umgestellt wird:

[{shell}]
----
{c-root} cd /usr/lib/check_mk_agent/plugins
{c-root} mkdir 300
{c-root} mv my_foo_plugin 300
----


Bitte beachten Sie, dass einige Plugins bereits von sich aus eine asynchrone Ausführung umsetzen.
Dazu gehört `mk_oracle`.
Installieren Sie solche Plugins direkt nach `/usr/lib/check_mk_agent/plugins`!

[#install_plugins_using_bakery]
=== Plugins über die Agentenbäckerei installieren

{cee-only}
In den {CEE} können die mitgelieferten Plugins über die xref:wato_monitoringagents#bakery[Agentenbäckerei] konfiguriert werden.
Diese sorgt sowohl für die Installation des Plugins selbst als auch für die korrekte Erstellung der Konfigurationsdatei, falls eine notwendig sein sollte.

Jedes Plugin wird über eine Agentenregel konfiguriert.
Sie finden die passenden Regelsätze über [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Agent plugins#:

image::agent_linux_rules_agent_plugins.png[]


=== Plugins von Hand ausführen

Da Agentenplugins ausführbare Programme sind, können Sie diese zu Test-
und Diagnosezwecken auch von Hand ausführen. Es gibt allerdings Plugins, welche bestimmte
vom Agenten gesetzten Umgebungsvariablen brauchen, um z.B. ihre Konfigurationsdatei
zu finden. Setzen Sie diese vor der Ausführung von Hand:

[{shell-raw}]
----
{c-root} export MK_LIBDIR=/usr/lib/check_mk_agent
{c-root} export MK_CONFDIR=/etc/check_mk
{c-root} export MK_VARDIR=/var/lib/check_mk_agent
{c-root} /usr/lib/check_mk_agent/plugins/mk_foobar
<<<foobar>>>
FOO BAR BLA BLUBB 17 47 11
----

Einige Plugins kennen auch spezielle Aufrufoptionen zum Debuggen. Werfen
Sie einfach einen Blick ins Plugin!
////