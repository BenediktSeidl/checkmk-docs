// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#plugins]
== Agent um Plugins erweitern

=== Was sind Agentenplugins?

Das Agentenskript `check_mk_agent.exe` enthält eine ganze Reihe von Sektionen, welche Überwachungsdaten für diverse Check-Plugins liefern, die dann von der Service-Erkennung automatisch gefunden werden.
Dazu gehören alle wichtigen Überwachungen des Betriebssystems.

Darüber hinaus gibt es die Möglichkeit, den Agenten um _Agentenplugins_ zu erweitern.
Das sind kleine Skripte oder Programme, die vom Agenten aufgerufen werden und diesen um weitere Sektionen mit zusätzlichen Monitoring-Daten erweitern.
Das {CMK} Projekt liefert eine ganze Reihe solcher Plugins mit aus, welche -- wenn sie korrekt installiert und konfiguriert sind -- in der Service-Erkennung automatisch neue Services liefern.

Warum sind diese Plugins nicht einfach in den Agenten fest integriert?
Für jedes der Plugins gibt es einen der folgenden Gründe:

* Das Plugin kann seine Daten nur über interne Schnittstellen holen, die der Agent nicht bereitstellt (Beispiel: PowerShell).
* Das Plugin benötigt sowieso eine Konfiguration, ohne die es nicht funktionieren würde (Beispiel: `mk_oracle.ps1`).
* Das Plugin ist so speziell, dass es von den meisten Anwendern nicht benötigt wird (Beispiel: `citrix_licenses.vbs`).


[#manual_installation_of_plugins]
=== Manuelle Installation

Die mitgelieferten Plugins für Windows finden Sie alle auf dem überwachten Host im Installationsverzeichnis des Agenten unter `C:\Program Files (x86)\checkmk\service\plugins`.
Sie werden dort abgelegt, damit sie auch direkt zur Verfügung stehen.

Alternativ liegen die Plugins für Windows auch auf dem {CMK} Server unter `share/check_mk/agents/windows/plugins`.
Auch über die Download-Seite des Agenten im Setup-Menü (wie im Kapitel xref:download_gui[Installation] beschrieben) sind diese im Kasten [.guihint]#Plugins# verfügbar:

.Der Anfang der Liste verfügbarer Agentenplugins
image::agent_windows_files_plugins.png[alt="Download-Seite mit den Agentenplugins."]

Zu allen von uns mitgelieferten Agentenplugins existieren die passenden Check-Plugins, welche deren Daten auswerten und Services erzeugen können.
Diese sind bereits mitinstalliert, so dass neu gefundene Services sofort erkannt werden und konfiguriert werden können.

*Hinweis:* Bevor Sie ein Plugin auf dem Host installieren, werfen Sie einen Blick in die entsprechende Datei.
Oft finden Sie dort wichtige Hinweise zur korrekten Verwendung des Plugins.

Die eigentliche Installation ist dann einfach:
Kopieren Sie die Datei nach `C:\ProgramData\checkmk\agent\plugins`.

Sobald das Plugin im richtigen Verzeichnis liegt, wird es vom Agenten automatisch aufgerufen und es entsteht eine neue Sektion in der Agentenausgabe.
Diese trägt üblicherweise den gleichen Namen wie das Plugin.
Komplexe Plugins (z.B. `mk_oracle.ps1`) erzeugen sogar eine ganze Reihe an neuen Sektionen.


[#pluginconfig]
=== Konfiguration

Manche Plugins benötigen eine Konfigurationsdatei in `C:\ProgramData\checkmk\agent\config`, damit sie funktionieren können.
Bei anderen ist eine Konfiguration optional (z.B. `mssql.vbs`) und ermöglicht besondere Features oder Anpassungen.
Wieder andere funktionieren einfach so.
Sie haben verschiedene Quellen, um an Informationen zu kommen:

* Die Dokumentation der zugehörigen Check-Plugins in Ihrer {CMK} Instanz, welche Sie über [.guihint]#Setup > Services > Catalog of check plugins# erreichen.
* Kommentare in der Plugindatei (oft sehr hilfreich!)
* Einen passenden Artikel in diesem Handbuch (z.B. über das Überwachen von xref:monitoring_oracle#[Oracle])

Bei speziellen (Skript)-Sprachen kann es notwendig sein, diese erst in der Konfiguration des Agenten _freizuschalten_.
So werden beispielsweise Python-Skripte nicht ausgeführt, wenn sie nicht explizit freigegeben wurden.
Sie können dazu in der Konfigurationsdatei `check_mk.user.yml` in der Sektion `global` die Dateiendungen erweitern, wie im folgenden Ausschnitt zu sehen:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
    execute: exe bat vbs cmd ps1 py
----

*Wichtig*: Der Einsatz solcher Plugins setzt voraus, dass die Dateien auch in einer regulären Kommandozeile ohne spezielle Pfade aufgerufen werden können.
Im Fall von Python muss dieses entsprechend korrekt installiert und der Pfad zu dem Interpreter in den Umgebungsvariablen vorhanden sein.
Anleitungen, wie Sie Python korrekt einrichten, finden Sie direkt auf den Seiten der link:https://www.python.org/doc/[Python Software Foundation.^]


[#customizeexecution]
=== Ausführung eines speziellen Plugins anpassen

Jedes Plugin kann in unterschiedlichen Modi ausgeführt werden.
Dabei stehen die folgenden Optionen zur Eingabe in der Konfigurationsdatei zur Verfügung.
Der jeweils fett gedruckte Wert ist der Standardwert:

[cols="12,15,~"]
|===
|Option |Wert |Beschreibung 

|`pattern` |`'@user\*.ps1'` |Setzt die Reichweite der nachfolgenden Optionen. Hier kann auch mit Wildcards gearbeitet werden. Dann beziehen sich die nachfolgenden Optionen auf alle Plugins, auf die der Ausdruck zutrifft. Führend wird bestimmt, ob das Plugin direkt aus dem Installationsverzeichnis unter `C:\Program Files (x86)\` oder aus dem Datenverzeichnis unter `C:\ProgramData` ausgeführt werden soll. 
// TK: Was bedeutet hier "Führend wird bestimmt,..."? Was heisst @user? 
|`run` |`*yes*/no` |Bestimmt, ob die Ausführung eines Plugins unterdrückt werden soll.
|`async` |`*yes*/no` |Führt ein Plugin asynchron aus und legt die Daten in einer Datei ab. Bei synchroner Ausführung wird die Ausgabe direkt dem Agenten übergeben.
|`timeout` |`*60*` |Setzt die maximale Ausführungszeit. Danach wird das Plugin beendet auch wenn keine Ausgabe gekommen ist. Der Standardwert orientiert sich an dem Standard für das Abfrageintervall des Agenten.
|`cache_age` |`*60*` |Legt in Sekunden fest, wie lange eine Ausgabe gültig ist. 
// TK: folgende Zeile auskommentiert. Die 3 Fragezeichen stehen seit der 1.6. drin.
// Wenn `async` aktiviert ist, wird automatisch ein Cache von ??? Sekunden angelegt.
|`retry_count` |`*1*` |Die Anzahl, wie oft ein Plugin fehlschlagen darf, bevor eine Ausgabe aus dem Cache verworfen wird.
|`description` |`'Text'` |Hier können Sie einen freien Text eintragen, der den Logs angefügt werden soll.
|===

Eine Konfiguration für das Veeam-Plugin sieht dann zum Beispiel so aus (der Auszug ist gekürzt und enthält nur den relevanten Teil für das Beispiel):

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
plugins:
    enabled: yes
    execution:
        - pattern: $CUSTOM_PLUGINS_PATH$\veeam_backup_status.ps1
          async: yes
          timeout: 120
          cache_age: 300
          retry_count: 2
----

Nach der obigen beispielhaften Konfiguration wird das Plugin im Datenverzeichnis `C:\ProgramData\checkmk\agent\plugins` ausgeführt, und zwar asynchron alle fünf Minuten (300 Sekunden) und darf dabei maximal zwei Minuten (120 Sekunden) laufen.
Falls das Plugin in diesen Timeout läuft, wird ein zweites Mal versucht ein Ergebnis zu bekommen.


=== Installation über die Agentenbäckerei

{cee-only}
In den {CEE} können die mitgelieferten Plugins über die xref:glossar#agent_bakery[Agentenbäckerei] konfiguriert werden.
Diese sorgt sowohl für die Installation des Plugins selbst als auch für die korrekte Erstellung der Konfigurationsdatei, falls eine notwendig sein sollte.

Jedes Plugin wird über eine Agentenregel konfiguriert.
Sie finden die passenden Regelsätze in [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Agent Plugins#:

.Liste mit Regeln für die Agentenplugins in den {EE}
image::agent_linux_rules_agent_plugins.png[alt="Seite mit den Regeln zur Konfiguration der Agentenplugins in den {EE}."]


=== Manuelle Ausführung

Da Agentenplugins ausführbare Programme sind, können Sie diese zu Test-und Diagnosezwecken auch von Hand ausführen.
Es gibt allerdings Plugins, welche bestimmte vom Agenten gesetzte Umgebungsvariablen brauchen, um z.B. ihre Konfigurationsdatei zu finden.
Setzen Sie diese gegebenenfalls von Hand, wenn sie in dem Skript oder Programm benötigt werden.
