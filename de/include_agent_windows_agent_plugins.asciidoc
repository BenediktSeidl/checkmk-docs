// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#plugins]
[#agent_plugins]
== Agent um Plugins erweitern


////
=== Was sind Agentenplugins?

Der Standardagent enthält eine ganze Reihe von Sektionen, welche
Überwachungsdaten für diverse Check-Plugins liefern und dann von der
Service-Erkennung automatisch gefunden und als Services ausgegeben werden. Dazu
gehören vor allem die wichtigen Überwachungen des Betriebssystems.

Darüber hinaus gibt es die Möglichkeit den Agenten um Agentenplugins zu
erweitern. Das sind kleine Skripte oder Programme, die vom Agenten aufgerufen
werden und diesen um weitere Sektionen mit zusätzlichen Monitoring-Daten
erweitern. Das {CMK}-Projekt liefert hier bereits eine ganze Reihe solcher
Plugins mit aus, welche -- wenn sie korrekt installiert und konfiguriert sind --
in der Service-Erkennung ebenfalls automatisch in neue Services münden.

Warum sind diese Plugins nicht einfach in den Standardagenten fest integriert? Für jedes der Plugins gibt es einen der folgenden Gründe:

* Das Plugin kann seine Daten nur über interne Schnittstellen holen, die der Standardagent nicht bereitstellt (Beispiel: PowerShell).
* Das Plugin benötigt ohnehin eine Konfiguration, ohne die es nicht funktionieren würde (Beispiel: `mk_oracle.ps1`).
* Das Plugin ist so speziell, dass es von den meisten Anwendern nicht benötigt wird  (Beispiel: `citrix_licenses.vbs`).


[#manual_installation_of_plugins]
=== Manuelle Installation

{CMK} liefert wie bereits erwähnt eine ganze Reihe an Plugins für Windows
mit. Sie finden diese auf dem überwachten Host in dem Installationsverzeichnis
des Agenten. Dort werden alle verfügbaren Plugins immer direkt mit
dem Agenten abgelegt, damit Sie auch direkt zur Verfügung stehen:
`C:\Program Files (x86)\checkmk\service\plugins`. Alternativ
finden Sie die Plugins auch auf dem {CMK}-Server selbst unter
`local/share/check_mk/agents/windows/plugins`.
Auch über [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Related > Windows files# sind diese im Kasten [.guihint]#Plugins# verfügbar.
Hier ein Auszug:

.Die Dateien selbst enthalten häufig nützliche Detailinformationen
image::agent_windows_files_plugins.png[alt="Liste mit Plugin-Dateien."]

Zu allen von uns mitgelieferten Agentenplugins gibt es auch passende
Check-Plugins, welche die erhobenen Daten auswerten und Services erzeugen
können. Sie müssen also nichts zusätzlich auf dem {CMK}-Server installieren.

*Wichtig*: Werfen sie einen Blick in ein Agentenplugin, bevor Sie es
auf einem Host installieren. Oft finden Sie dort wichtige Hinweise zu der
korrekten Verwendung.

Die eigentliche Installation ist dann einfach. Kopieren Sie das gewünschte
Plugin entweder vom {CMK}-Server oder aus dem Installationsverzeichnis
nach `C:\ProgramData\checkmk\agent\plugins`. Wenn das Plugin in diesem
Verzeichnis liegt, wird es vom Agenten automatisch aufgerufen und es entsteht
eine neue Sektion in der Agentenausgabe. Diese trägt üblicherweise den
gleichen Namen wie das Plugin. Komplexe Plugins (z.B. `mk_oracle.ps1`)
erzeugen sogar eine ganze Reihe an neuen Sektionen.


=== Konfiguration

Manche Plugins benötigen eine Konfigurationsdatei in
`C:\ProgramData\checkmk\agent\config`, damit sie funktionieren
können. Bei anderen ist eine Konfiguration optional (z.B. `mssql.vbs`)
und ermöglicht besondere Features oder Anpassungen. Wieder andere
funktionieren ohne weitere Schritte. Sie haben verschiedene Quellen, um an
Informationen zu kommen:

* Die Dokumentation der zugehörigen Check-Plugins, zu finden unter [.guihint]#Setup > Services > Catalog of check plugins#
* Kommentare im Plugin selbst (oft sehr hilfreich!)
* Einen passenden Artikel in diesem Handbuch (z.B. über das Überwachen von xref:monitoring_oracle#[Oracle])

Auch bei speziellen (Skript)-Sprachen kann es notwendig sein, diese erst in
der Konfiguration des Agenten _freizuschalten_. So werden beispielsweise
Python-Skripte nicht ausgeführt, wenn sie nicht explizit freigegeben
wurden. Sie können hier schlicht in der `check_mk.user.yml` in der
Sektion `global` die Dateiendungen erweitern, wie in dem folgenden
Ausschnitt zu sehen:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
global:
    execute: exe bat vbs cmd ps1 py
----

*Wichtig*: Der Einsatz solcher Plugins setzt natürlich voraus, dass
die Dateien auch in einer regulären Kommandozeile ohne spezielle Pfade
aufgerufen werden können. Im Fall von Python muss dieses entsprechend korrekt
installiert und der Pfad zu dem Interpreter in den Umgebungsvariablen vorhanden
sein. Anleitungen, wie Sie Python korrekt einrichten, finden Sie direkt auf
den Seiten der
link:https://www.python.org/doc/[Python Software Foundation.]


[#customizeexecution]
=== Ausführung eines speziellen Plugins anpassen

Jedes Plugin kann in unterschiedlichen Modi ausgeführt werden. Dabei stehen
die folgenden Optionen zur Verfügung. Der jeweils fett gedruckte Wert ist
der Standardwert:

[cols="12,15,~"]
|===
|Option |Wert |Beschreibung 

|`pattern` |`'@user\*.ps1'` |Setzt die Reichweite der nachfolgenden Optionen. Hier kann auch mit Wildcards gearbeitet werden. Dann beziehen sich die nachfolgenden Optionen auf alle Plugins, auf die der Ausdruck zutrifft. Führend wird bestimmt, ob das Plugin direkt aus dem Installations-, oder aus dem Datenverzeichnis ausgeführt werden soll.
|`run` |`*yes*/no` |Bestimmt, ob die Ausführung eines Plugins unterdrückt werden soll.
|`async` |`*yes*/no` |Führt ein Plugin asynchron aus und legt die Daten in einer Datei ab. Bei synchroner Ausführung wird die Ausgabe direkt an den Agenten übergeben.
|`timeout` |`*60*` |Setzt die maximale Ausführungszeit. Danach wird das Plugin beendet, auch wenn keine Ausgabe gekommen ist. Der Standardwert orientiert sich an dem Standard für das Abfrageintervall des Agenten.
|`cache_age` |`*60*` |Legt in Sekunden fest, wie lange eine Ausgabe gültig ist. Wenn `async` aktiviert ist, wird automatisch ein Cache von ??? Sekunden angelegt.
|`retry_count` |`*1*` |Die Anzahl, wie oft ein Plugin fehlschlagen darf, bevor eine Ausgabe aus dem Cache verworfen wird.
|`description` |`'Text'` |Hier können Sie einen freien Text eintragen, der den Logs angefügt werden soll.
|===


Eine Konfiguration für das Veeam-Plugin sieht dann zum Beispiel so aus (der
Auszug ist gekürzt und enthält nur den relevanten Teil für das Beispiel):

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
plugins:
    enabled: yes
    execution:
        - pattern: $CUSTOM_PLUGINS_PATH$\veeam_backup_status.ps1
          async: yes
          timeout: 120
          cache_age: 300
          retry_count: 2
----

Das Plugin wird nach der Definition oben Asynchron alle fünf Minuten (300
Sekunden) ausgeführt und darf dabei maximal zwei Minuten (120 Sekunden)
laufen. Falls das Plugin in diesen Timeout läuft, wird ein zweites Mal
versucht ein Ergebnis zu bekommen.


=== Installation über die Agentenbäckerei

{cee-only}
Die von {CMK} mitgelieferten Plugins können über die
xref:wato_monitoringagents#bakery[Agentenbäckerei] konfiguriert werden. Diese sorgt
sowohl für die Installation des Plugins selbst, als auch für die korrekte
Erstellung der Konfigurationsdatei, falls eine notwendig sein sollte.

Jedes Plugin wird über eine Agentenregel konfiguriert.
Sie finden die passenden Regelsätze in [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agents > Agent rules#:

.Gekürzter Kasten mit Plugins
image::agent_linux_rules_agent_plugins.png[alt="Liste mit Agentenplugins.]


=== Manuelle Ausführung

Da Agentenplugins ausführbare Programme sind, können Sie diese zu Test-
und Diagnosezwecken auch von Hand ausführen. Es gibt allerdings Plugins,
welche bestimmte vom Agenten gesetzte Umgebungsvariablen brauchen, um
z.B. ihre Konfigurationsdatei zu finden. Setzen Sie diese gegebenenfalls
von Hand, wenn Sie in dem Skript oder Programm benötigt werden.
////
