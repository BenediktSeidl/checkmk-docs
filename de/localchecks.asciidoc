include::global_attr.adoc[]
= Lokale Checks
:revdate: 2017-10-24
:title: Agent einfach erweitern
:description: Checkmk kann auch ohne große Programmierkenntnis sehr einfach erweitert werden. Erfahren Sie hier ausführlich, dem Agent ein eigenes Skript übergeben wird.

[TIP]
.Related Articles:
====
link:wato_monitoringagents.html[]

link:datasource_programs.html[]

link:check_plugins_catalog.html[]

====


== Warum eigene Checks?

{CMK} überwacht durch die große Anzahl an mitgelieferten Check-Plugins
bereits sehr viele relevante Daten. Dennoch ist jede IT-Umgebung einzigartig,
so dass sich oft sehr individuelle Anforderungen ergeben. Mit den local-Checks
sind Sie in der Lage, schnell und einfach eigene Services zu erstellen, um
diesen Anforderungen gerecht zu werden.

Diese local-Check-Plugins unterscheiden sich dabei in einem wesentlichen Punkt
von anderen Checks: Die Berechnung des Status erfolgt direkt auf dem Host,
auf dem die Daten auch abgerufen werden. Dadurch entfällt die komplexe
Erstellung von Checks in Python und Sie sind bei der Wahl der
Skriptsprache völlig frei.


== Einfache Checks selbst schreiben

=== Das Skript erstellen#syntax

Sie können einen lokalen Check in jeder beliebigen Programmiersprache schreiben,
die der Zielhost unterstützt. Das Skript muss so konstruiert sein, dass
es pro Check eine Statuszeile ausgibt, die aus vier Teilen besteht.
Hier ist ein Beispiel:

{c-start}
0      myservice   myvalue=73;80;90  My output text who may contain spaces
{c-end}

Die vier Teile sind durch Leerzeichen getrennt und haben folgende Bedeutung:


|===

|1.
|Status
|Der Status des Services wird als Ziffer angegeben: 0 für {OK}, 1 für {WARN}, 2 für {CRIT} und 3 für {UNKNOWN}. Alternativ kann der Status auch link:localchecks.html#dynamic_state[dynamisch] berechnet werden.

|2.
|Servicename
|Der Servicename, wie er in {CMK} angezeigt wird. Er darf keine Leerzeichen enthalten.

|3.
|Metriken
|Performancewerte zu den Daten. Sie finden link:localchecks.html#perfdata[weiter unten] näheres zu dem Aufbau. Alternativ können Sie Minuszeichen setzen, wenn der Check keine Metriken ausgibt.

|4.
|Statusdetail
|Details zu den Status, wie sie in {CMK} angezeigt werden. Dieser Teil kann auch Leerzeichen enthalten.

|===


Zwischen den einzelnen Teilen der Ausgabe und dem ersten Text des Statusdetails
muss immer ein Leerzeichen stehen. Alles danach wird dann zum Statusdetail
gezählt, weswegen dort auch Leerzeichen erlaubt sind.

Wenn Sie wegen einer möglichen Ausgabe unsicher sind, können Sie diese
einfach testen, indem Sie ein kleines Skript mit dem Kommando `echo`
schreiben. Fügen Sie hier Ihre Ausgabe ein, die Sie testen möchten:

.mylocalcheck
....
#!/bin/sh
echo "0 myservice - OK: This is my custom output"
....

Für Windows-Hosts sieht so ein Testskript sehr ähnlich aus:

.mylocalcheck.bat
....
@echo off
echo 0 myservice - OK: This is my custom output
....

Sie können übrigens beliebig viele Ausgaben in einem Skript
erzeugen. Für jede ausgegebene Zeile wird dann ein eigener Service
erstellt. Wie Sie prüfen, ob das local-Skript vom Agenten richtig aufgerufen
wird, sehen Sie in der link:localchecks.html#diagnose[Fehleranalyse].


=== Skript verteilen

Nachdem das Skript geschrieben ist, können Sie es an die entsprechenden
Hosts verteilen. Der Pfad unterscheidet sich je nach Betriebssystem. Eine
Liste der Pfade ist link:localchecks.html#folder[weiter unten] zu finden.

Vergessen Sie nicht, das Skript auf unixoiden Systemen ausführbar zu
machen. Der Pfad in dem Beispiel bezieht sich auf Linux:

{c-start}
{RP}chmod +x /usr/lib/check_mk_agent/local/mylocalcheck
{c-end}

Wenn Sie die link:wato_monitoringagents.html#bakery[Agent Bakery] nutzen, können Sie
das Skript auch regelbasiert verteilen. Mehr zu der Regelerstellung erfahren
Sie in dem Kapitel link:localchecks.html#bakery[Verteilung über Agent Bakery].


=== Den Service ins Monitoring aufnehmen

Bei jedem Aufruf des {CMK}-Agenten wird auch der local-Check
ausgeführt und an die Ausgabe des Agenten angehängt. Die
link:wato_services.html#discovery[Serviceerkennung] funktioniert also wie bei anderen
Services auch automatisch:

image::localchecks_services.png[]

Nachdem Sie die Änderungen aktiviert haben, ist die
Einrichtung eines selbsterstellten Services
mit Hilfe eines local-Checks bereits abgeschlossen. Falls es bei der
Serviceerkennung zu Problemen kommen sollte, kann Ihnen die
link:localchecks.html#diagnose[Fehleranalyse] weiter unten helfen.


== Erweiterte Funktionen

=== Metriken verwenden#perfdata

Sie können in einem einfachen local-Skript auch Metriken
übergeben. Die Syntax für diese Daten ist:

{c-start}
metricname=value;warn;crit;min;max
count=73;80;90;0;100
{c-end}

Die Werte werden mit einem Semikolon getrennt. Wird ein Wert nicht benötigt,
so wird das Feld leer gelassen:

{c-start}
count=42;;90
{c-end}

Beachten Sie, dass die Werte für `min` und `max` in den
{CEE} nur aus Kompatibilitätsgründen gesetzt werden können, aber
keine Auswirkungen haben. Die Begrenzung des Graphen auf einen bestimmten
Wertebereich hat in dieser Version keine Auswirkungen.

Prinzipiell sind alle Werte bis auf den Wert `value` selbst optional
und können ausgelassen werden.

==== Mehrere Metriken

Sie können in einem local-Check auch mehrere Metriken ausgeben lassen. Diese
 werden hierbei durch eine `|` (Pipe) getrennt:

{c-start}
count1=42|count2=21;23;27|count3=73
{c-end}

Eine komplette Ausgabe mit mehreren Metriken sieht dann etwa so aus:

{c-start}
{RP}/usr/lib/check_mk_agent/local/mycustomscript
0 myservice count1=42|count2=21;23;27|count3=73 OK - This is my custom output
{c-end}

Die Graphen werden in {CMK} nun automatisch erzeugt:

image::localchecks_graphs3.png[]


=== Mehrzeilige Ausgaben

Auch die Option, die Ausgabe über mehrere Zeilen zu verteilen, steht Ihnen
zur Verfügung. Da {CMK} unter Linux läuft, können Sie mit der
Escape-Sequenz `\n` arbeiten, um einen Zeilenumbruch zu erzwingen. Auch wenn
Sie bedingt durch die Skriptsprache den Backslash selbst maskieren müssen,
wird das von {CMK} korrekt interpretiert:

{c-start}
{RP}/usr/lib/check_mk_agent/local/mycustomscript
2 myservice - CRIT - This is my custom output\\nThis is some detailed information\\nAnd another line with details
{c-end}

In den Details des Services können Sie dann diese zusätzlichen Zeilen sehen:

image::localchecks_srv_details.png[]

=== Ausgaben cachen

Local-Checks können, wie auch normale Plugins, gecached werden. Das
kann notwendig werden, wenn Skripten längere Zeit zur Ausführung
benötigen. Sie werden dann nur in einem definierten Intervall ausgeführt und
zwischengespeichert. Dieser Cache wird dann der Agentenausgabe angehängt. Unter
Linux oder einem anderen unixoiden Betriebssystem kann übrigens auch
jedes gecachte Plugin asynchron ausgeführt werden. Legen Sie dazu ein
link:agent_linux.html#async_plugins[Unterverzeichnis] an, dessen Name die Anzahl
der Sekunden ist, wie lange die Ausgabe des Local-Checks gecached werden
soll. In dem Beispiel wird der local-Check z.B. nur alle 10 Minuten (600
Sekunden) ausgeführt:

{c-start}
{RP}/usr/lib/check_mk_agent/local/600/mylocalcheck
1 myservice count=4 WARN - Some output of a long time running script
{c-end}

Unter Windows wird ein local-Check genauso behandelt wie ein anderes Plugin
auch: Sie geben das link:agent_windows.html#cache_age[`cache_age`] für den
local-Check in der check_mk.ini an:

.check_mk.ini
....
[local]
    cache_age mylocalcheck = 3600
....

Alternativ können Sie das Caching unter Windows auch in der
link:agent_windows.html#bakery[Agent Bakery] konfigurieren.

*Wichtig*: Beachten Sie, dass das Caching nur für Windows, Linux,
Solaris, AIX und FreeBSD zur Verfügung steht.

=== Status dynamisch berechnen#dynamic_state

Wie Sie weiter link:localchecks.html#perfdata[oben] gelesen haben, können Sie bei den
Metriken auch die Schwellwerte in den Graphen anzeigen lassen. Diese
Schwellwerte könnte man doch auch für eine dynamische Berechnung des
Servicestatus benutzen! {CMK} bietet genau diese Möglichkeit, um einen
local-Check auszubauen.

Wenn Sie statt einer Zahl den Buchstaben "P" übergeben, wird der Status
des Services anhand der übergebenen Schwellwerte berechnet. Eine Ausgabe
würde dann so aussehen:

{c-start}
{RP}/usr/lib/check_mk_agent/local/mycustomscript
P myservice count=40;30;50 Result is computed from two values
P myservice2 - Result is computed with no values
{c-end}

Die Ausgabe in {CMK} unterscheidet sich in ein zwei Punkten von der Ausgabe,
wie sie weiter oben zu sehen war:

* Die einzelnen Metriken werden der Ausgabe, wie sie in den Views zu sehen ist, kommasepariert angehängt. So sehen Sie immer, welcher Status zu einem ein Wert berechnet wurde.
* Wenn keine Metriken übergeben werden, ist der Status des Services immer {OK}.

Hier die Ausgabe der oben gezeigten Beispiele in einer Serviceansicht:

image::localchecks_dynsrv.png[]


==== Obere und untere Schwellwerte

Manche Daten haben nicht nur obere Grenzwerte, sondern auch untere. Ein
Beispiel dafür ist die Luftfeuchtigkeit. Für solche Fälle bietet der
local-Check die Möglichkeit, zwei WARN-/CRIT-Werte zu übergeben. Sie werden
durch einen Doppelpunkt getrennt und stellen jeweils den unteren und den
oberen Schwellwert dar:

{c-start}
valuename=value;warn_lower:warn_upper;crit_lower:crit_upper
humidity=27;40:60;30:70
{c-end}

image::localchecks_lower.png[]


== Verteilung über die Agent Bakery#bakery

[CEE]Wenn Sie einen local-Check an mehrere Hosts verteilen möchten oder die
link:wato_monitoringagents.html#bakery[Agent Bakery] bereits nutzen, können Sie die
Skripten auch hierüber verteilen. Legen Sie dazu auf dem {CMK}-Server als
Instanzbenutzer unterhalb von `~/local/share/check_mk/agents/` das Verzeichnis
`custom` an. In diesem Verzeichnis wird für jede local-Checks-Gruppe
ein Unterverzeichnis erstellt:


{c-start}
{OM}cd ~/local/share/check_mk/agents
OMD[mysite]:~/local/share/check_mk/agents$ mkdir -p custom/mycustomgroup/lib/local/
{c-end}

Das `lib`-Verzeichnis markiert das Skript als Plugin oder
local-Check. Das nachfolgende Verzeichnis ordnet die Datei dann eindeutig zu. In
dieses Verzeichnis können Sie dann auch den local-Check ablegen.

*Wichtig:* Unter Linux können Sie ebenfalls die
link:agent_linux.html#async_plugins[asynchrone Ausführung] nutzen, wie Sie sie von
den Plugins kennen. Unter Windows werden die Einstellungen wie gehabt in
der `check_mk.ini` hinterlegt.

In WATO wird dann `mycustomgroup` als Option angezeigt. Erstellen
Sie in WATO über
[.guihint]#Host & Service Parameters|Monitoring Agents|Generic Options|Deploy custom files with agent#
eine neue Regel und wählen Sie die eben erstellte Gruppe aus:

image::localchecks_custom.png[]

{CMK} wird nun selbstständig den local-Check im Installationspaket der
jeweiligen Betriebssysteme richtig einordnen. Nachdem Sie die Änderungen
aktiviert und die Agenten gebacken haben, sind Sie mit der Konfiguration
auch schon fertig. Die Agenten müssen nun nur noch neu verteilt werden.


== Fehleranalyse#diagnose

=== Skript testen

Wenn Sie bei einem selbstgeschriebenen Skript auf Probleme stoßen, können Sie
die folgenden potentiellen Fehlerquellen prüfen:

* Ist das Skript ausführbar und stimmen die Zugriffsberechtigungen? Das ist vor allem relevant, wenn Sie den Agenten oder das Skript nicht als root/System-Benutzer ausführen.
* Ist die Ausgabe konform zu der vorgegebenen link:localchecks.html#snytax[Syntax]?
* Liegt das Skript in dem richtigen link:localchecks.html#folder[Verzeichnis]?


=== Ausgabe des Agenten testen

==== Auf dem Zielhost

Wenn das Skript selbst korrekt ist, können Sie den Agenten auf dem Host
ausführen. Bei unixoiden Betriebssystemen, wie Linux, BSD und so weiter, bietet sich
folgender Befehl an. Mit der Option `-A` bestimmen Sie die Anzahl der
zusätzlichen Zeilen, die nach einem Treffer angezeigt werden sollen. Sie
können diese Zahl entsprechend der Anzahl der erwarteten Ausgaben anpassen:

{c-start}
{RP}check_mk_agent | grep -v grep | grep -A 3 "<<&lt;local&gt;>>"
<<<local>>>
0 myservice count1=42|count2=21;23;27|count3=73 OK - This is my custom output
P myservice2 - Result is computed with no values
P myservice3 humidity=27;40:60;30:70 Result has upper and lower thresholds
{c-end}

Unter Windows können Sie die Ausgabe auf eine Textdatei umleiten, diese dann
z.B. mit Notepad ebenfalls nach der `local`-Sektion durchsuchen und
schauen, ob die erwarteten Ausgaben dabei sind. Ersetzen Sie gegebenenfalls den
Pfad unten durch Ihren Installationspfad, unter dem Sie {CMK} installiert
haben:

{c-start}
C:\Program Files (x86)\check_mk\> check_mk_agent.exe test > out.txt
{c-end}


==== Auf dem Checkmk-Server

Zuletzt können Sie die Verarbeitung der Skriptausgaben auch auf dem
{CMK}-Server testen. Einmal für die Serviceerkennung:

{c-start}
OM(mysite):cmk -IIv --debug --checks=local myserver123
Discovering services on myserver123:
myserver123:
    3 local
{c-end}

Und mit einem ähnlichen Befehl auch die Verarbeitung der Serviceausgabe:

{c-start}
OM(mysite):cmk -nv --debug --checks=local myserver123
Check_MK version 1.4.0p15
myservice            <b class=green>OK - This is my custom output*
myservice2           <b class=green>OK - Result is computed with no values*
myservice3           <b class=red>CRIT - Result has upper and lower thresholds, humidity 27.0 &lt; 30 (!!)*
{c-end}

Wenn es in den local-Checks Fehler gibt, wird {CMK} Sie in der
Serviceausgabe darauf hinweisen. Das gilt für fehlerhafte Metriken,
falsche, unvollständige Informationen in der Skriptausgabe oder einen
ungültigen Status. Diese Fehlermeldungen sollen Ihnen helfen, die Fehler
in den Skripten schnell zu identifizieren.

== Dateien und Verzeichnisse

=== Skriptverzeichnisse auf dem Host#folder

[cols=65,options="header"]
|===

|Pfad
|Betriebssystem

|`/usr/check_mk/lib/local/`
|AIX

|`/usr/local/lib/check_mk_agent/local/`
|FreeBSD

|`/omd/versions/0.45.20110123/lib/check_mk_agent/local/`
|HP-UX

|`/usr/lib/check_mk_agent/local/`
|Linux, Solaris, OpenBSD und OpenWRT

|`%PROGRAMFILES(X86)%\check_mk\local`
|Windows (Agent bis Version VERSION[1.5.0])

|`%PROGRAMDATA%\checkmk\agent\local`
|Windows (Agent ab Version VERSION[1.6.0])

|===



=== Cacheverzeichnisse auf dem Host


[cols=65,options="header"]
|===

|Pfad
|Betriebssystem

|`/tmp/check_mk/cache/`
|AIX

|`/var/run/check_mk/cache/`
|FreeBSD

|`/var/lib/check_mk_agent/cache/`
|Linux und Solaris

|===

