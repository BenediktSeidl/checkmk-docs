// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#architecture]
== Architektur des Agenten

Das *Agentenskript* `check_mk_agent`

* ist zuständig für die Sammlung der Monitoring-Daten,
* ist minimalistisch, denn es benötigt nur wenig CPU, RAM und Plattenplatz,
* ist transparent, denn es ist ein Shellskript, in dem Sie sehen können, welche Befehle es aufruft,
* ist sicher, denn es erlaubt keinerlei Zugriffe aus dem Netzwerk,
* wird unter `root` ausgeführt,
* lauscht an einem Unix-Socket (einer `systemd` Einheit) auf eine eingehende Verbindung vom Agent Controller,
* ruft der Reihe nach vorhandene Systembefehle auf, um die Monitoring-Daten zu ermitteln,
* schreibt seine Ausgabe in das Unix-Socket.

Der *Agent Controller* `cmk-agent-ctl`

* ist die neue Komponente des Agenten,
* ist zuständig für den Transport der vom Agentenskript gesammelten Daten,
* wird unter der User ID `cmk-agent` ausgeführt, die während der Installation des Agentenpakets angelegt wird und nur beschränkte Rechte besitzt, z.B. keine Login-Shell und nur zur Datenübertragung genutzt wird,
* läuft als Daemon und ist als Service an `systemd` gekoppelt,
* lauscht am TCP-Port 6556,
* fragt das Agentenskript ab.

Wozu wird nun der Agent Controller gebraucht -- bisher funktionierte es doch auch sehr gut ohne ihn?
Nun, die neue Software-Architektur des Agenten ist die Voraussetzung dafür, neue Funktionen anzubieten, die mit dem minimalistischen Design des Agentenskripts nicht umsetzbar sind, wie beispielsweise die Verschlüsselung der Kommunikation per Transport Layer Security (TLS), Datenkomprimierung und die Umkehrung der Kommunikationsrichtung.
Bisher war es stets der {CMK} Server, der die Kommunikation initiierte und die Daten vom Agenten abfragte -- im sogenannten Pull-Modus.

Mit dem Agent Controller kann nunmehr zusätzlich der Push-Modus realisiert werden, in dem die Initiative vom Agenten ausgeht.
Der Push-Modus ist für eine Cloud-basierte Konfiguration und in einigen abgeschotteten Netzwerken erforderlich.
In beiden Fällen kann der {CMK} Server nicht auf das Netzwerk zugreifen, in dem sich die zu überwachenden Hosts befinden.
Daher sendet der Agent von sich aus regelmäßig die Daten an den {CMK} Server.

Der *Agent Receiver* `agent-receiver`

* ist eine neue Komponente des {CMK} Servers,
* ist der Endpunkt für die Kommunikation des Agent Controller, z.B. für die Registrierung der Verbindung,
* empfängt die vom Agent Controller im Push-Modus gesendeten Daten.

Alle neuen Features werden über den Agent Controller und den Agent Receiver realisiert, d.h. {CMK} Server und Agent müssen Version {v21} haben.
Dabei ist der erste Schritt die Registrierung des Agent Controller beim Agent Receiver der {CMK} Instanz, mit der ein Vertrauensverhältnis hergestellt wird.
Die Registrierung beinhaltet bereits die TLS-Verschlüsselung der Kommunikation.

////
Stehsatz:

Seine Ausgabe stellt er entweder per `xinetd` oder `systemd` an TCP-Port 6556 bereit oder er wird alternativ per SSH aufgerufen.
Und wenn Ihnen beides nicht gefällt, können Sie auch eigene Methoden implementieren, wie {CMK} die Daten vom Agenten bekommen soll.

Monitoringinformationen, die der Agent nicht von Haus aus liefert, können Sie in Form von Agentenplugins hinzufügen.
In den {EE} können Sie alle Einstellungen und Plugins zusammen mit dem Agenten in der xref:wato_monitoringagents#bakery[Agentenbäckerei] zu einem RPM oder DEB-Paket paketieren, das mit einem einzigen Befehl installiert und sogar vollautomatisch xref:agent_deployment#[aktualisiert] werden kann.

Im neuen Agentenpaket ist eine neue Komponente dazubekommen: der Agent Controller (cmk-agent-ctl).

Agent Controller installation: Creating a UUID, Creating a user, Choosing a super server (systemd, xinetd, sshd(?)). In the push case it has to be systemd (for now?)
////
