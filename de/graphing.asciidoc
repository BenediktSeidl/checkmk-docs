include::global_attr.adoc[]
= Messwerte und Graphing
:revdate: 2016-02-20
:title: Messwerte in {CMK} schnell und einfach auswerten
:description: {CMK} bietet viele umfangreiche Metriken darzustellen, zu kombinieren und zu exportieren. Wichtiges Hintergrundwissen finden Sie am Ende des Artikels.

{related-start}
link:user_interface.html[Die Benutzeroberfläche]
link:views.html[Ansichten von Hosts und Services (Views)]
link:dashboards.html[Dashboards]
{related-end}



== Einleitung

image::example_graph.png[]

Nebem dem eigentlichen System-Monitoring -- nämlich der Erkennung von Problemen
-- ist {CMK} ein ausgezeichnetes Werkzeug zur Aufzeichnung und Analyse von
unterschiedlichsten Messdaten, welche in IT-Umgebungen so anfallen können. Dazu
gehören zum Beispiel:

* Betriebssystemperformance (Platten-IO, CPU- und Speicherauslastung,{nbsp}...)
* Netzwerkgrößen (genutzte Bandbreite, Paketlaufzeiten, Fehlerraten,{nbsp}...)
* Umgebungssensoren (Temperatur, Luftfeuchte, Luftdruck,{nbsp}...)
* Nutzungsstatistiken (eingeloggte User, Seitenabrufe, Sessions,{nbsp}...)
* Qualitätskennzahlen von Anwendungen (z.B. Antwortzeiten von Webseiten)
* Stromverbrauch und -qualität im RZ (Ströme, Spannungen, Leistungen, Batteriegüte,{nbsp}...)
* Anwendungsspezifische Daten (z.B. Länge von Mailqueues von MS Exchange)
* _Und vieles mehr{nbsp}..._

{CMK} zeichnet grundsätzlich alle beim Monitoring anfallenden Messgrößen
über einen Zeitraum von (einstellbar) vier Jahren auf, so dass Sie nicht
nur auf die aktuellen, sondern auch auf historische Messwerte zugreifen
können. Um den Verbrauch an Plattenplatz in Grenzen zu halten, werden die
Daten mit zunehmendem Alter immer weiter verdichtet. Die Messwerte selbst
werden von den einzelnen Check-Plugins ermittelt. Sie legen somit auch fest,
welche Metriken genau bereitgestellt werden.

== Zugriff über die GUI

Die Messwerte eines Services werden in der GUI in drei verschiedenen Formen
präsentiert. Die sogenannten *Perf-O-Meter* tauchen direkt in der Tabelle
der Hosts oder Services auf und bieten einen schnellen Überblick und einen
optischen Vergleich. Allerdings beschränken sich diese aus Platzgründen
meist auf eine einzelne ausgewählte Metrik. Bei den Dateisystemen ist dies
z.B. der prozentual belegte Platz:

[{image-border}]
image::perfometer_filesystems.png[]

Alle Metriken eines Services im *Zeitverlauf* erhalten Sie,
wenn Sie mit der Maus über das icon:icon_pnp[] Graphen-Icon fahren oder
draufklicken. Die gleichen Graphen finden Sie zudem auch ganz einfach in
den Details zu einem Host oder Service:

image::graph_used_cpu_time.png[]

In den Host-/Servicedetails gibt es zudem eine *Tabelle mit den aktuellen präzisen Messwerten*
für alle Metriken:

image::metrics_table.png[]

Wie genau die Zeitverläufe visualisiert werden, hängt von Ihrer {CMK}-Edition
ab:

== Das Graphing in den {EE}

{cee-only}
Die {CEE} enthalten eine eigenständige
komlett neu entwickelte Oberfläche für die Visualisierung der historischen
Messdaten, welche auf interaktivem HTML5 basiert. Außerdem gibt es eine
native Darstellung in PDF -- und zwar direkt als Vektorgraphik im PDF-Format
und damit ohne sichtbare Pixel im Ausdruck.

=== Interaktion mit dem Graphen

Sie können die Darstellung des Graphen auf verschiedene Arten interaktiv
beeinflussen:

* Durch Pannen (mit links klicken und festhalten, dann ziehen) verschieben Sie den Zeitbereich (links/rechts) oder skalieren vertikal (hoch/runter).
* Mit dem Mausrädchen Zoomen Sie in der Zeit rein und raus.
* Durch Ziehen an der rechten unter Ecke verändern Sie die Größe des Graphen.
* Ein Klick an eine Stelle im Graphen setzt eine _Stecknadel_ (den [.guihint]#Pin#). Damit erfahren Sie die genaue zeitliche Lage eines Punkts und alle präzisen Messwerte zu diesem Zeitpunkt. Der exakte Zeitpunkt des Pins wird pro Benutzer gespeichert und in allen Graphen angezeigt:

image::graphing_pin.png[]

Wenn sich auf einer Seite mehrere Graphen befinden, so folgen auch alle anderen Graphen der
Seite den gemachten Änderungen am gewählten Zeitbereich und der Stecknadel. Somit sind die
Werte immer vergleichbar. Auch eine Größenänderung wirkt sich auf alle Graphen
aus. Der Abgleich geschieht allerdings erst beim nächsten Neuladen der Seite (sonst
würde zeitweise in ziemliches Chaos auf dem Bildschirm entstehen{nbsp}...).

Sobald Sie die interaktiven Funktionen nutzen, also beispielsweise einen
Pin setzen, erscheint auf dem Bildschirm ein großes Pause-Symbol und die
Seitenaktualisierung setzt für 60 Sekunden aus. So wird Ihre Änderung im
Graphen nicht sofort durch die Aktualisierung wieder rückgängig gemacht. Der
Countdown wird immer wieder auf 60 Sekunden zurückgesetzt, wenn Sie erneut
aktiv werden. Sie können den Countdown aber auch komplett abgeschalten,
wenn Sie auf die Zahl klicken. Über das Pause-Symbol können Sie Pause
in jedem Fall direkt wieder beenden.

image::graphing_pause.png[]

[#graph_collections]
== Graphensammlungen (Graph Collections)

Mit dem icon:icon_menu[] Menüsymbol können Sie den Graphen an
verschiedenen Stellen einbetten, z.B. in Berichte oder Dashboards. Sehr
nützlich sind dabei die [.guihint]#Graph Collections#. In so eine Graphensammlung
können Sie beliebig viele Graphen packen und diese dann später vergleichen
oder auch als PDF exportieren.Per Standard hat jeder Benutzer eine
Graphsammlung mit dem Namen [.guihint]#My Graphs#. Sie können aber sehr einfach
weitere anlegen und diese sogar für andere Benutzer sichtbar machen.
Das Vorgehen ist dabei exakt das Gleiche wie bei den link:views.html[Ansichten].

Sie gelangen zu Ihren Graphsammlungen über [.guihint]#Views > Metrics > My Graphs# in der
Seitenleiste. Der Eintrag [.guihint]#My Graphs# taucht erste auf, wenn Sie auch
tatsächlich mindestens einen Graphen hinzugefügt haben.

image::snapin_graph_collections.png[width=50%]

Der Knopf icon:button_graph_collections[] bringt Sie zur Tabelle all Ihrer
Graphensammlungen mit der Möglichkeit, weitere anzulegen, zu ändern usw.


[#custom_graphs]
== Freiformgraphen (Custom Graphs)

Die {CEE} bieten einen grafischen Editor, mit dem Sie komplett eigene
Graphen mit eigenen Berechungsformeln erstellen können. Damit ist es
auch möglich, Metriken *von verschiedenen Hosts und Services in einem Graphen*
zu kombinieren. Zu den Freiformgraphen gelangen Sie z.B. über [.guihint]#Views > EDIT#
und dann mit dem Knopf icon:button_custom_graphs[].

Ein anderer Weg geht über die Metrik-Tabelle bei einem Service. Dort gibt es
bei jeder Metrik ein icon:icon_custom_graph[] Symbol, mit der Sie diese
Metrik zu einem Freiformgraphen hinzufügen können:

image::graphing_new_custom.png[]

Folgende Abbildung zeigt die Liste der Freiformgraphen (hier mit nur
einem Eintrag):

[{image-border}]
image::custom_graph_list.png[]

Bei jedem vorhandenen Graphen haben Sie fünf mögliche Operationen:

[cols=2]
|===

|icon:icon_new_custom_graph[] |Zeigt den Graphen an.
|icon:icon_insert[] |Erzeugt eine Kopie dieses Graphen.
|icon:icon_delete[] |Löscht den Graphen.
|icon:icon_edit[] |Öffnet die *allgemeinen Eigenschaften* dieses Graphen. Hier können Sie nebem dem Titel auch Einstellungen zur Sichtbarkeit für andere Benutzer festlegen. Alles verhält sich exakt wie bei den link:views.html[Ansichten]. Bitte denken Sie an die icon:icon_help[] Onlinehilfe, wenn Sie Fragen zu einer der Einstellungen haben.
|icon:icon_custom_graph[] |Hier gelangen Sie zum eigentlichen Graphdesigner,  mit dem Sie die Inhalte verändern können.
|===


Beachten Sie, dass jeder Freiformgraph -- analog zu den Ansichten -- eine
eindeutige ID hat. Über diese wird der Graph in Berichten und Dashboards
angesprochen. Wenn Sie die ID eines Graphen später ändern, gehen dadurch
solche Referenzen verloren. Alle Graphen, die nicht [.guihint]#hidden# sind, werden
in Ihrer Seitenleiste unter [.guihint]#Views > Metrics# angezeigt.

=== Der Graphdesigner

[{image-border}]
image::custom_graphs.png[]

Der Graphdesigner ist in vier Bereiche unterteilt:

=== Vorschau des Graphen
Hier sehen Sie den Graphen exakt so, wie er auch später zu sehen sein wird. Sie können alle
interaktiven Funktionen nutzen.


=== Liste der Metriken

Die im Graphen enthaltenen Kurven, welche hier direkt editiert werden
können. Eine Änderung des Titels einer Kurve in diesem Feld bestätigen
Sie mit der Enter-Taste. Der [.guihint]#Style# legt fest, wie der Wert im Graphen
optisch gezeichnet wird. Dabei gibt es folgende Möglichkeiten:

[cols=2]
|===

|[.guihint]#Line# |Der Wert wird als Linie eingezeichnet.
|[.guihint]#Area# |Der Wert wird als Fläche eingezeichnet. Beachten Sie, dass die Kurven, die weiter oben in der Liste stehen, Vorrang vor späteren haben und diese dabei überdecken können. Wenn Sie Linien und Flächen kombinieren möchten, sollten die Flächen immer unten stehen.
|[.guihint]#Stacked Area# |Alle Kurven dieses Stils werden als Flächen gezeichnet und vom Wert her aufeinander gestapelt (also quasi addiert). Die obere Grenze dieses Stapels symbolisiert also die Summe aller beteiligten Kurven.
|===


Die weiteren drei Möglichkeiten [.guihint]#Mirrored Line#, [.guihint]#Mirrored Area# und [.guihint]#Mirrored Stacked# funktionieren analog, nur dass
die Kurven von der Nulllinie aus nach unten gezeichnet werden. Das ermöglicht eine Art von Graph, wie sie {CMK}
generell für Input/Output-Graphen wie den folgenden verwendet:

image::graph_input_output.png[]

In der letzten Spalte der Metriktabelle können Sie bestehende Metriken
editieren. Das ermöglicht z.B., eine Kurve zu icon:button_clone[]
klonen und dann einfach den Hostnamen auszutauschen. Die Bedeutung der
einzelnen Felder wird im nächsten Abschnitt erlärt.

[#adding_metrics]
=== Formular zum Hinzufügen einer Metrik

Über das Formular [.guihint]#Metrics# können Sie neue Metriken zum Graphen
hinzufügen. Sobald Sie in das erste Feld einen gültigen Hostnamen
eingeben, wird das zweite Feld mit der Liste der Services des Hosts
gefüllt. Eine Auswahl in dieser Liste füllt das dritte Feld mit der Liste
der Metriken dieses Services. Im vierten und letzten Feld wählen Sie die
*Konsolidierungsfunktion*. Zur Auswahl stehen [.guihint]#Minimum#, [.guihint]#Maximum#
und [.guihint]#Average#. Diese Funktionen kommen immer dann zur Anwendung, wenn
die Speicherung der Daten in den RRDs für den gewählten Zeitraum bereits
verdichtet ist. In einem Bereich, wo z.B. nur noch ein Wert pro halber
Stunde zur Verfügung steht, können Sie so wählen, ob Sie den größten,
kleinsten oder durchschnittlichen Originalmesswert dieses Zeitraums
einzeichnen möchten.

image::graphing_metrics.png[]

Auf die gleiche Art blenden Sie über die Funktion [.guihint]#Add new scalar#
die Werte eines Service für {WARN}, {CRIT}, Maximum und Minimum
als waagerechte Linie ein.

image::graphing_scalar.png[]

Sie können dem Graphen auch eine *Konstante* hinzufügen. Diese wird
dann zunächst als waagerechte Linie angezeigt. Konstanten sind manchmal
nötig zur Bildung von Berechnungsformeln. Dazu später mehr.

=== Graphoptionen

Hier finden Sie Optionen, die den Graphen als Ganzes betreffen. Die Einheit
[.guihint]#Unit# beeinflusst die Beschriftung der Achsen und der Legende. Sie wird
automatisch eingestellt, sobald die erste Metrik hinzugefügt wird. Beachten
Sie, dass es zwar möglich, aber nicht sehr sinnvoll ist, zwei Metriken mit
unterschiedlichen Einheiten in einem Graphen unterzubringen.

Unter [.guihint]#Explicit vertical range# können Sie den vertikalen Bereich des
Graphen voreinstellen. Normalerweise wird die Y-Achse so skaliert, dass alle
Messwerte im gewählten Zeitraum genau in den Graphen passen. Wenn Sie einen
Graphen für z.B. einen Prozentwert entwerfen, könnten Sie sich aber auch
entscheiden, dass immer von 0 bis 100 dargestellt wird. Beachten Sie dabei,
dass der Graph vom Benutzer (und auch Ihnen selbst) trotzdem mit der Maus
skaliert werden kann und die Einstellung dann wirkungslos wird.


[#calculation]
=== Rechnen mit Formeln

Der Graphdesigner ermöglicht es Ihnen, die einzelnen Kurven durch
Rechenoperationen zu kombinieren. Folgendes Beispiel zeigt einen Graphen mit
zwei Kurven: CPU utilization [.guihint]#User# und [.guihint]#System#.

Nehmen wir an, dass Sie für diesen Graphen nur die Summe von beiden
interessiert. Dazu wählen Sie zunächst die beiden Kurven durch Ankreuzen ihrer
Checkboxen aus. Sobald Sie das tun, erscheinen im Kasten [.guihint]#Metrics# in der
Zeile [.guihint]#Operation on selected metrics# Knöpfe für alle wählbaren Verknüpfungen:

[{image-border}]
image::graphdesigner_ops_1.png[]

Ein Klick auf [.guihint]#Sum# kombiniert die beiden gewählten Zeilen zu einer neuen
Kurve, deren Farbe der obersten ausgewählten Metrik entspricht.
Der Titel der neuen Kurve wird zu [.guihint]#Sum of System, User#. Die Berechnungsformel
wird in der Spalte [.guihint]#Formula# angezeigt. Außerdem taucht ein neues
icon:button_dissolve_operation[] Symbol auf:

[{image-border}]
image::graphdesigner_ops_2.png[]

Durch einen Klick auf icon:button_dissolve_operation[] machen Sie die
Operation quasi rückgängig, in dem Sie die Formel wieder auflösen und die
einzelnen enthaltenen Kurven wieder zum Vorschein kommen. Weitere Hinweise zu
den Rechenoperationen:

* Manchmal ist es sinnvoll, Konstanten hinzuzufügen, um z.B. den Wert einer Kurve von der Zahl 100 abzuzuiehen.
* Scalare können ebenfalls für Berechnungen genutzt werden.
* Sie können die Operation können beliebig verschachteln.


== Die Graphingoberfläche von PNP4Nagios

{cre-only}
In der {CRE} bildet das Graphingsystem
link:http://www.pnp4nagios.org[PNP4Nagios von Jörg Linge] die Grundlage
für die Erfassung und Visualisierung von Messdaten. Dieses ist in der Sprache
PHP geschrieben und ein eigenständiges Projekt, welches auch ohne {CMK}
verfügbar und vor allem bei Benutzern von klassichen Nagios-basierten
Monitoringsystemen beliebt ist. PNP4Nagios ist über einen Frame in die
{CMK}-Oberfläche eingebunden sowie von der Farbgebung her eigens an {CMK}
angepasst:

[{image-border}]
image::graphingpnp.png[]


=== Zeitraum auswählen

Um den dargestellten Zeitraum auszuwählen, haben Sie verschiedene Möglichkeiten:

* Direkt im Graphen können Sie mit der Maus einen Bereich auswählen.
* Die icon:pnp_zoom[] Lupe öffnet einen Dialog mit Knöpfen zum Blättern und Zoomen.
* Der icon:pnp_calendar[] Kalender ermöglicht die Eingabe von Datum und Uhrzeit.
* Im Kasten [.guihint]#Timeranges# können Sie einen von fünf Standardzeiträumen wählen (z.B. [.guihint]#One Month#).


=== Das Basket

In Ihrem [.guihint]#Basket# können Sie mit dem Icon icon:pnp_add[] mehrere Graphen
"einsammeln", um diese dann später über [.guihint]#My basket# gleichzeitig anzusehen. So
können Sie auch Graphen von verschiedenen Hosts auf einmal ansehen und diese
leichter vergleichen.


=== PDF-Export

Der Knopf icon:pnp_pdf[] startet einen einfachen Export der aktuellen Ansicht
als PDF.


[#graphing_api]
== Graphite, Grafana und InfluxDB

{cee-only}
Wenn Sie eine der {CEE} einsetzen, so können Sie parallel zum in
{CMK} eingebauten Graphing auch externe Metrik-Datenbanken anbinden. Der
{CMK} Micro Core kann alle Messdaten zusätzlich an eine oder mehrere Datenbanken
weiterleiten, die das Protokoll von
link:http://graphite.wikidot.com/[Graphite] unterstützt. Neben Graphite
selbst hat z.B. die link:https://influxdata.com/[InfluxDB] eine
derartige Schnittstelle.

Die Anbindung konfigurieren Sie in den [.guihint]#Global Settings# unter
[.guihint]#Send metrics to Graphite / InfluxDB#:

image::graphite.png[]

Neben den offensichtlichen Angaben zum Netzwerk können Sie hier optional einen
Präfix konfigurieren, der jedem Hostnamen vorangestellt wird, um z.B. eindeutige
Namen zu erzwingen. Als Namensschema für den Export der Metriken wird HOST.SERVICE.METRIK
verwendet.

Sollte die Anbindung nicht funktionieren, so finden Sie Diagnoseinformationen
in der Datei `~/var/log/cmc.log` in ihrer Instanz. Folgendes Beispiel
zeigt die Meldungen im Fall, dass ein Connect zum Graphite-Server nicht klappt:

./omd/sites/mysite/var/log/cmc.log
[{file}]
----
2016-02-24 16:30:48 [5] Successfully initiated connection to Carbon/Graphite at 10.0.0.5:2003.
2016-02-24 16:32:57 [4] Connection to Carbon/Graphite at 10.0.0.5:2003 failed: Connection timed out
2016-02-24 16:32:57 [5] Closing connection to Carbon/Graphite at 10.0.0.5:2003
----

Der Core versucht in so einer Situation von sich aus immer wieder, die
Verbindung aufzubauen. Messdaten, die während einer Zeit anfallen, zu der
keine Verbindung zu Graphite besteht, werden nicht zwischengespeichert,
sondern gehen verloren (bzw. sind dann nur in den RRD-Datenbanken von {CMK}
verfügbar).


== Historische Messwerte in Tabellen

=== Um was gehts?

(NEW) Wenn Sie die Messwerte der Vergangenheit betrachten, sind Sie manchmal nicht
an deren genauem Verlauf interessiert sondern eventuell nur an einer groben
Zusammenfassung wie: _Der durschnittliche CPU-Verbrauch in den letzten 7 Tagen_.
Das Ergebnis wäre dann einfach eine Zahl wie _88%_.

Dies ist seit Version {v16} von {CMK} möglich. Sie können in einer
Tabelle von Hosts oder Services Spalten hinzufügen, welche den Durchschnitt, das
Maximum oder andere Zusammenfassungen einer Metrik über einen bestimmten
Zeitraum als Zahl darstellen. Das ermöglicht Ihnen dann auch Auswertungen, die
nach diesen Spalten sortieren und so z.B. die Liste derjenigen ESX-Hosts
anzuzeigen, die im Vergleichszeitraum die geringste Auslastung hatten.


=== Messwerte zu Tabellen hinzufügen

Um solche Messwerte zu erhalten, gehen Sie so vor:

. Wählen oder erzeugen Sie eine Ansicht, zu der Sie die Spalte hinzufügen wollen.
. Fügen Sie eine Spalte vom Typ [.guihint]#Services: Historic metrics# hinzu.


==== Erzeugen einer Ansicht

Zunächst benötigen Sie eine Ansicht, zu welcher Sie Spalten hinzufügen wollen.
Dies kann entweder eine Ansicht von _Hosts_ oder von _Services_ sein.
Einzelheiten zum Anlegen oder Editieren von Ansichten finden Sie in dem
link:views.html#edit[Artikel über Ansichten].

Für das folgende Beispiel wurde eine Kopie der Ansicht [.guihint]#All hosts# angelgt
und die Spalten für die Anzahl der Services in den verschiedenen Zuständen
entfernt. Damit die Ansicht [.guihint]#All hosts# nicht durch die neue Ansicht ersetzt
wird, wurde die ID der Ansicht auf einen neuen Wert geändert.

[{image-border}]
image::graphing_historic_metrics_1.png[]
//BI:historic_metrics_1.png


==== Spalte hinzufügen

Fügen Sie nun eine Spalte vom Typ [.guihint]#Services: Historic metrics#. Da dies
eine Spalte von Services ist, benötigen Sie im Falle einer Host-Ansicht als
erste Auswahl den Spaltentyp [.guihint]#Joined column#, welcher das Anzeigen einer
Servicespalte in einer Hosttabelle ermöglicht. Bei einer Service-Ansicht
reicht es, wenn Sie eine neue [.guihint]#Column# hinzufügen.

Wählen Sie dann [.guihint]#Services: Historic metrics# als Spalte aus.

[{image-border}]
image::graphing_historic_metrics_2.png[]
//BI:historic_metrics_2.png center width:85%

In [.guihint]#Metric name# wählen Sie den Namen der Metrik aus, die historisch
ausgewertet werden soll. Sollten Sie unsicher über den Namen der Metrik sein,
finden Sie diesen in den Servicedetails beim Eintrag [.guihint]#Service Metrics#:

[{image-border}]
image::graphing_historic_metrics_4.png[]

In meinem Beispiel wähle ich die Metrik [.guihint]#CPU utilization#, welche
hier *zufällig* gleich lautet wie der Name des Services.

Bei [.guihint]#RRD consolition# wählen Sie am besten den gleichen Wert wie
weiter unten bei [.guihint]#Aggregation function#, da es wenig sinnvoll wäre,
Dinge wie „das Minimum vom Maximum“ zu berechnen.

Der [.guihint]#Time range# ist der Zeitraum in der Vergangenheit, über den
Sie etwas erfahren wollen. In meinem Beispiel habe ich die
letzten sieben Tage ausgewählt, was exakt 168 Stunden entspricht.

[.guihint]#Column title# ist dann der Name der Spalte -- also welche Überschrift
über der Tabelle angezeigt wird. Ich hab in meinem Beispiel `Util @
7 days` verwendet. Bitte wundern Sie sich nicht, dass später noch ein
Feld mit dem Namen [.guihint]#Title# kommt. Diese sehen Sie nur dann, wenn hier
eine [.guihint]#Joined column# benutzt wird, welche immer die Angabe eines Titels
ermöglicht. Lassen Sie den zweiten Titel einfach leer.

Nach dem Speichern erhalten Sie jetzt eine Ansicht mit einer weiteren
Spalte, welche die prozentuale CPU-Auslastung der letzten sieben Tage
anzeigt. Hier an dem Beispiel der Host-Ansicht:

//BI:historic_metrics_3.png
[{image-border}]
image::graphing_historic_metrics_3.png[]


*Hinweise*

* Sie können natürlich auch mehrere Spalten auf die Art hinzufügen, z.B. für unterschiedliche Metriken oder unterschiedliche Zeiträume
* Beachten Sie bei der Angabe des Services die genaue Schreibung (auch groß/klein).
* Bei Hosts, welche die betreffende Metrik oder den Service nicht haben, bleibt die Spalte einfach leer
* Falls Sie mit einer Tabelle von Services arbeiten, benötigen Sie keine [.guihint]#joined columns#. Allerdings können Sie dann pro Host in einer Zeile nur einen Service anzeigen.

[#rrds]
== Hintergründe, Tuning, Fehlerdiagnose

{CMK} speichert alle Messwerte in dafür eigens entwickelten Datenbanken,
sogennannten *RRDs* (*Round Robin Datenbanken*). Dabei kommt das
link:http://www.rrdtool.org[RRDTool von Tobi Oetiker] zum
Einsatz, welches in Open-Source-Projekten sehr beliebt und weit verbreitet ist.

Die RRDs bieten gegenüber klassischen SQL-Datenbanken bei der Speicherung
von Messwerten wichtige Vorteile:

* RRDs speichern die Messdaten sehr kompakt und effizient.
* Der Platzverbrauch auf der Platte pro Metrik ist statisch. RRDs können weder wachsen noch schrumpfen. Der benötigte Plattenplatz kann gut geplant werden.
* Die benötigte CPU- und Disk-Zeit pro Update ist immer gleich. RRDs sind (nahezu) echtzeitfähig, da es nicht zu Staus aufgrund von Reorganisationen kommen kann.

=== Organisation der Daten in den RRDs

{CMK} ist so voreingestellt, dass der Verlauf jeder Metrik über einen
Zeitraum von *vier Jahren* aufgezeichnet wird. Die Grundauflösung ist
dabei eine Minute. Dies ist deswegen sinnvoll, weil das Check-Intervall auf
eine Minute voreingestellt ist und so von jedem Service genau einmal pro
Minute neue Messwerte kommen.

Nun kann sich allerdings jeder ausrechnen, dass die Speicherung von einem Wert
pro Minute über vier Jahre eine enorme Menge an Plattenplatz benötigen würde
(obwohl die RRDs pro Messwert nur genau 8 Byte benötigen). Aus diesem Grund
werden die Messdaten mit der Zeit *verdichtet*. Die erste Verdichtung
findet nach 48 Stunden statt. Ab diesem Zeitpunkt wird nur noch ein Wert pro
fünf Minuten aufbewahrt. Die übrigen Stufen sind nach 10 Tagen und 90 Tagen:

[cols=4]
|===
|Phase |Dauer |Auflösung |Messpunkte 

|1 |2 Tage |1 Minute |2880
|2 |10 Tage |5 Minuten |2880
|3 |90 Tage |30 Minuten |4320
|4 |4 Jahre |6 Stunden |5840
|===


Jetzt stellt sich natürlich die Frage, wie denn nun fünf Werte sinnvoll zu
einem einzigen konsolidiert werden sollen.
Als *Konsolidierungsfunktionen* bieten sich z.B. das *Maximum*,
das *Minimum* oder der *Durchschnitt* an.
Was in der Praxis
sinnvoll ist, hängt von der Anwendung oder Betrachtungsweise ab. Möchten Sie
z.B. den Temperaturverlauf in einem Rechenzentrum über vier Jahre beobachten,
wird Sie wahrscheinlich eher die maximale Temperatur interessieren, die je
erreicht wurde. Bei der Messung von Zugriffszahlen auf eine Anwendung könnte
der Durchschnitt interessieren.

Um maximal flexibel bei der späteren Auswertung zu sein, sind die RRDs von {CMK}
so voreingestellt, dass sie einfach jeweils *alle drei* Werte speichern --
also Minimum, Maximum _und_ Durchschnitt. Pro Verdichtungsstufe und
Konsolidierungsfunktion enthält die RRD einen ringförmigen Speicher -- ein
sogenanntes RRA (Round Robin Archive). Im Standardaufbau gibt es also insgesamt
12 RRAs. So benötigt das Standardschema von {CMK} genau 384.952 Byte pro Metrik.
Das ergibt sich aus 2880 + 2880 + 4320 + 5840 Messpunkten mal drei
Konsolidierungsfunktionen mal acht Byte pro Messwert, was genau 382.080 Byte
ergibt. Dazu kommt ein Dateiheader von 2872 Byte.

Ein interessantes alternatives Schema wäre z.B. das Speichern von einem Wert
pro Minute für ein komplettes Jahr. Dabei kann man einen kleinen Vorteil
ausnutzen: Da die RRDs dann zu allen Zeiten die optimale Auflösung haben,
können Sie auf die Konsolidierung verzichten und z.B. nur noch _Average_
anlegen. So kommen Sie auf 365 x 24 x 60 Messpunkte zu je 8 Byte, was
ziemlich genau 4 MB pro Metrik ergibt. Auch wenn die RRDs somit mehr als
den zehnfachen Platz benötigen, ist die nötige *Disk-IO* sogar reduziert!
Der Grund: Ein Update muss nicht mehr in 12 verschiedene RRAs geschrieben
werden, sondern nur noch in eines.

=== Anpassen des RRD-Aufbaus

{cee-only}
Wenn Ihnen das voreingestellte Speicherschema nicht zusagt, so können Sie
dieses über link:wato_rules.html[Konfigurationsregeln] ändern (sogar pro Host oder
Service unterschiedlich). Den nötigen Regelsatz finden Sie am einfachsten über
die Regelsuche -- also [.guihint]#WATO > Host & Service Parameters#. Geben Sie dort
einfach [.guihint]#RRD# in das Suchfeld ein. So finden Sie die Regel
[.guihint]#Configuration of RRD databases of services#. Es gibt auch eine analoge Regel
für Hosts, aber Hosts haben nur in Ausnahmefällen Messwerte. Folgendes Bild
zeigt die Regel mit den Standardeinstellungen:

image::graphing_rrd_configuration.png[]

In den Abschnitten [.guihint]#Consolidation Functions# und [.guihint]#RRA Configuration#
können Sie die Anzahl und Größe der Verdichtungsphasen bestimmen und
festlegen, welche Konsolidierungen bereit gehalten werden sollen. Das Feld
[.guihint]#Step# bestimmt die Auflösung in Sekunden, in der Regel 60 (eine
Minute). Für Services mit einem Check-Interval von kleiner als einer Minute
kann es sinnvoll sein, diese Zahl kleiner einzustellen. Beachten Sie dabei,
dass die Angaben im Feld [.guihint]#Number of steps aggregated into one data point#
dann nicht mehr Minuten bedeuten, sondern die in [.guihint]#Step# eingestellte
Zeitspanne.

{cee-only}
Jede Änderung des RRD-Aufbaus hat zunächst nur Einfluss auf
*neu angelegte* RRDs -- sprich wenn Sie neue Hosts oder Services in das
Monitoring aufnehmen. Sie können aber die bestehenden RRDs von {CMK} umbauen
lassen. Dazu dient der Befehl `cmk --convert-rrds`, bei welchem sich
immer die Option `-v` (verbose) anbietet. {CMK} kontrolliert dann
alle vorhandenen RRDs und baut diese nach Bedarf in das eingestellte
Zielformat um:

[{shell}]
----
{c-omd} cmk -v --convert-rrds
myserver012:
  Uptime (CMC).....converted, 376 KB -> 159 KB
  Filesystem / (CMC).....converted, 1873 KB -> 792 KB
  OMD slave apache (CMC).....converted, 14599 KB -> 6171 KB
  Memory (CMC).....converted, 14225 KB -> 6012 KB
  Filesystem /home/mk (CMC).....converted, 1873 KB -> 792 KB
  Interface 2 (CMC).....converted, 4119 KB -> 1741 KB
  CPU load (CMC).....converted, 1125 KB -> 475 KB
----

Der Befehl ist intelligent genug, um RRDs zu erkennen, die bereits den
richtigen Aufbau haben:
[{shell}]
----
{c-omd} cmk -v --convert-rrds
myserver345:
  Uptime (CMC).....uptodate
  Filesystem / (CMC).....uptodate
  OMD slave apache (CMC).....uptodate
  Memory (CMC).....uptodate
  Filesystem /home/mk (CMC).....uptodate
  Interface 2 (CMC).....uptodate
  CPU load (CMC).....uptodate
----

Wenn das neue Format eine höhere Auflösung oder zusätzliche
Konsolidierungsfunktionen hat, werden die bestehenden Daten so gut es geht
interpoliert, so dass die RRDs mit möglichst sinnvollen Werten gefüllt
werden. Nur ist natürlich klar, dass wenn Sie z.B ab sofort nicht 2 sondern
5 Tage mit minutengenauen Werten haben möchten, die Genauigkeit der bestehenden
Daten nicht nachträglich erhöht werden kann.

[#rrdformat]
=== RRD-Speicherformat

{cee-only}
Die oben gezeigte Regel hat noch eine weitere Einstellung:
[.guihint]#RRD storage format#. Mit dieser können Sie zwischen zwei Methoden wählen, wie
{CMK} die RRDs erzeugt. Das Format [.guihint]#One RRD per host/service#
(oder Kurz {CMK}-Format oder CMK-Format) speichert dabei alle Metriken
eines Hosts bzw. Services in einer einzigen RRD-Datei. Dies sorgt für ein
effizienteres Schreiben der Daten, da so immer ein kompletter Satz an Metriken
in einer einzigen Operation geschrieben werden kann. Diese Metriken liegen dann
in benachbarten Speicherzellen, was die Anzahl der Plattenblöcke reduziert, die
geschrieben werden müssen.

Bitte beachten Sie, dass das Format [.guihint]#One RRD per host/service# nicht von
PNP4Nagios untetstützt wird.

Sollten Ihre {CMK}-Instanzen mit einer älteren Version als einer der {CEE}
{v128} erzeugt worden sein, lohnt sich gegebenenfalls ein genauer Blick
darauf, ob ihre Messwertdaten jemals in das aktuelle und weitaus performantere
Format konvertiert worden sind. Sollten die Daten noch im alten Format
vorliegen, können Sie diese über das Anlegen einer Regel im oben gezeigten
Regelsatz auf das {CMK}-Format umstellen. Auch hier benötigen Sie anschließend
den Befehl `cmk --convert-rrds`:

[{shell}]
----
{c-omd} cmk -v --convert-rrds
myhost123:
   Uptime PNP -> CMC..converted.
  WARNING: Dupliate RRDs for stable/Uptime. Use --delete-rrds for cleanup.
   OMD heute apache PNP -> CMC..converted.
  WARNING: Dupliate RRDs for stable/OMD heute apache. Use --delete-rrds for cleanup.
   fs_/home/mk PNP -> CMC..converted.
  WARNING: Dupliate RRDs for stable/fs_/home/mk. Use --delete-rrds for cleanup.
   OMD slave apache PNP -> CMC..converted.
  WARNING: Dupliate RRDs for stable/OMD slave apache. Use --delete-rrds for cleanup.
   Memory PNP -> CMC..converted.
...
----

Wie Sie an der Warnung sehen können, lässt {CMK} die bestehenden Dateien
im alten Format zunächst liegen. Dies ermöglicht Ihnen im Zweifel eine Rückkehr
zu diesem Format, weil ein Konvertieren in die Rückrichtung *nicht*
möglich ist. Die Option `--delete-rrds` sorgt dafür, dass diese Kopien
nicht erzeugt bzw. nachträglich gelöscht werden. Sie können das Löschen
bequem später mit einem weiteren Aufruf des Befehls machen:

[{shell}]
----
{c-omd} cmk -v --convert-rrds --delete-rrds
----


[#rrdcached]
=== Der RRD-Cache-Daemon (rrdcached)

Um die Anzahl der nötigen Schreibzugriffe auf die Platte (drastisch) zu reduzieren,
kommt ein Hilfsprozess zum Einsatz: der RRD-Cache-Daemon (rrdcached). Er ist einer
der Dienste, welche beim Start einer Instanz gestartet werden:

[{shell}]
----
{c-omd} omd start
Starting mkeventd (builtin: syslog-udp)...OK
Starting Livestatus Proxy-Daemon...OK
Starting mknotifyd...OK
*Starting rrdcached...OK*
Starting Check_MK Micro Core...OK
Starting dedicated Apache for site stable...OK
Initializing Crontab...OK
----

Alle neuen Messwerte für die RRDs werden zunächst vom Kern ({EE}) bzw. von NPCD ({RE})
an den rrdcached gesendet. Dieser schreibt die Daten zunächst nicht in die RRDs, sondern
merkt sie sich im Hauptspeicher, um sie später dann gesammelt in die jeweilige RRD
zu schreiben. So wird die Anzahl der Schreibzugriffe auf die Platte (oder in das SAN!)
deutlich reduziert.

Damit im Falle eines Neustarts keine Daten verloren gehen, werden die Updates zusätzlich
in Journaldateien geschrieben. Dies bedeutet zwar auch Schreibzugriffe, aber da hier
die Daten direkt hintereinander liegen, wird dadurch kaum IO erzeugt.

Damit der RRD-Cache-Daemon effizient arbeiten kann, benötigt er natürlich
viel Hauptspeicher. Die benötigte Menge hängt von der Anzahl Ihrer RRDs ab
und davon, wie lange Daten gecachet werden sollen. Letzteres können Sie in der
Datei `etc/rrdcached.conf` einstellen. Die Standardeinstellung legt
eine Speicherung von 7200 Sekunden (zwei Stunden) plus eine Zufallsspanne
von 1800 Sekunden fest. Diese zufällige Verzögerung pro RRD verhindert
ein pulsierendes Schreiben und sorgt für eine gleichmäßige Verteilung
der IO über die Zeit:

[{file}]
----
# Data is written to disk every TIMEOUT seconds. If this option is
# not specified the default interval of 300 seconds will be used.
*TIMEOUT=3600*

# rrdcached will delay writing of each RRD for a random
# number of seconds in the range [0,delay). This will avoid too many
# writes being queued simultaneously. This value should be no
# greater than the value specified in TIMEOUT.
*RANDOM_DELAY=1800*

# Every FLUSH_TIMEOUT seconds the entire cache is searched for old values
# which are written to disk. This only concerns files to which
# updates have stopped, so setting this to a high value, such as
# 3600 seconds, is acceptable in most cases.
*FLUSH_TIMEOUT=7200*
----

Eine Änderung der Einstellungen in dieser Datei aktivieren Sie mit:

[{shell}]
----
{c-omd} omd restart rrdcached
Stopping rrdcached...waiting for termination....OK
Starting rrdcached...OK
----

=== Verzeichnisse

Hier ist eine Übersicht über die wichtigsten Dateien und Verzeichnisse, die
mit Messdaten und RRDs zu tun haben (alle bezogen auf das Homeverzeichnis
der Instanz):

[cols=2]
|===

|var/check_mk/rrd |RRDs im {CMK}-Format
|var/pnp4nagios/perfdata |RRDs im alten Format (PNP)
|var/rrdcached |Journaldateien des RRD-Cache-Daemons
|var/log/rrdcached.log |Logdatei des RRD-Cache-Daemons
|var/log/cmc.log |Logdatei des {CMK}-Kerns (Fehlermeldungen zu RRDs)
|etc/pnp4nagios |Einstellungen für PNP4Nagios ({CRE})
|etc/rrdcached.conf |Einstellungen für den RRD-Cache-Daemon
|===



