include::global_attr.adoc[]
= Konfiguration via Checkmk REST-API
:revdate: draft
:title: Konfiguration via Checkmk REST-API
:description: Die Checkmk REST-API ist eine neue Schnittstelle mit vielen Vorteilen, um Checkmk über HTTP zu konfigurieren.

[TIP]
.Related Articles:
====
link:web_api.html[]

====


== Einleitung

Ab der Version VERSION[2.0] gibt es in {CMK} eine neue Anwendungsprogrammierschnittstelle: die {CMK} REST-API. Mit dieser API können Sie die Aufgaben, die Sie sonst in {CMK} über die GUI erledigen, per Kommando oder Skript mit HTTP-Anfragen an den {CMK}-Server übermitteln und ausführen lassen.

Eine API per HTTP nutzen? Das kommt Ihnen vielleicht bekannt vor. Denn {CMK} bietet schon seit längerem eine API, die sogenannte link:web_api.html[Web-API], mit der Sie viele Administrationsaufgaben erledigen können. Warum gibt es also jetzt eine neue API? Anders als der Name REST-API vielleicht vermuten lässt, geht es nicht darum, mit der neuen API den _Rest_ der in der Web-API fehlenden Funktionen zu liefern. Ganz im Gegenteil soll die REST-API die komplette Funktionalität abdecken, die {CMK} über die GUI und über Kommandoschnittstelle bietet und damit die Web-API komplett ersetzen.

REST steht für _Representational State Transfer_ und beschreibt eine Architektur für den Austausch von Daten auf verteilten Systemen -- insbesondere für Web-Dienste. Eine API, die gemäß der REST-Architektur implementiert ist, folgt bestimmten Prinzipien, z.B. dem Client-Server-Modell, der zustandslosen Kommunikation und einer einheitlichen Schnittstelle. In der Praxis erfolgt die Umsetzung bevorzugt über das HTTP-Protokoll, wobei die Ressourcen per Uniform Resource Identifier (URI) angesprochen werden und auf diese mit HTTP-Methoden (GET, POST, PUT, DELETE) zugegriffen wird.


// MA: Frage: Ich habe es bisher immer so gemacht, dass ich Abkürzungen eingeführt habe, um sie dann später nutzen zu können. In der Weise: "Der _Representational State Transfer_ (Rest) beschreibt eine Architektur für... Sie können die Rest-API dann..."
// MA: Wollen wir das generell so machen? Ist das sinnvoll? Bei URI habe ich nämlich exakt dasselbe Schema entdeckt.

Soviel zu den REST-Prinzipien. Ihre Vorteile zeigen sich in den konkreten Features, die Ihnen die {CMK} REST-API bietet:

// MA: Generell in der nachfolgenden Liste mehr mit Hervorhebungen arbeiten, so dass man schnell die wichtigen Informationen (json, ISO-8601) oder Fachbegriffe (breaking changes) identifizieren kann.

* Protokoll: Das Hypertext Transfer Protocol (HTTP/1.1) wird als Transportsystem für die Kommunikation genutzt.

* Kodierung: Als Datenformat wird die JavaScript Object Notation (JSON) verwendet. Die Nutzdaten (payload) der Antworten werden mit JSON serialisiert und in UTF-8 kodiert. Datums- und Zeitangaben sind im ISO-8601-Format mit gültigen Zeitzoneninformationen kodiert.

* Sprache: Englisch ist die Sprache für Labels, Identifiers und die API-Dokumentation.

* Authentifizierung: Der Zugriff auf die API wird einem Client nur dann gestattet, wenn er die Berechtigung mittels HTTP-Authentifizierung (z.B. "Basic" oder "Bearer") nachgewiesen hat.

* Versionierung: Die API ist versioniert und nutzt dabei eine dreistufige Nummerierung nach dem Semantic Versioning 2.x Standard im Format X.Y.Z, wobei X für ein Main Release steht, Y für ein Minor Release und Z für einen Patch. Ein neues Minor Release enthält neue, rückwärtskompatible Funktionen. Ein neues Main Release kann dagegen Änderungen enthalten, die die API inkompatibel mit dem vorherigen Main Release machen (sogenannte breaking changes). Die Versionsnummer des Main Release ist Bestandteil der URL, mit dem eine Anfrage an den Server gesendet wird.

* Dokumentation: Die API wird in einem maschinenlesbaren Schema und einem menschenlesbaren Format in englischer Sprache dokumentiert, mit allen Ressourcen, ihren Eingabe- und Ausgabeparametern und den zugehörigen Wertebereichen. Die API ist mit der OpenAPI Spezifikation 3.x erstellt, einem API-Beschreibungsformat speziell für REST-APIs. Das mit dieser Spezifikation erstellte API-Dokument wird für den Benutzer mit ReDoc angezeigt, einem responsiven Web-Design für OpenAPI-Dokumente.

* Beispiel-Code: Um die Verwendung zu demonstrieren, gibt es zu jeder Anfrage Beispiel-Code für verschiedene Anwendungen.

* Fehleranzeige: Die API sendet im Fehlerfall numerische HTTP-Status-Codes und eine Diagnosemeldung des Problems, die bei der Suche nach möglichen Ursachen für fehlerhafte Anfragen hilft.

* REST-API Klassifizierung: Die API erfüllt alle vier Ebenen (0 bis 3) des Richardson Maturity Models (RMM), mit dem beurteilt werden kann, wieviel REST in einer API steckt. In Ebene 1 wird die Einführung von Ressourcen gefordert, damit über die API statt zu einem globalen zu individuellen Endpunkten kommuniziert werden kann. Ebene 2 wird erfüllt, wenn für die Anfragen HTTP-Methoden verwendet werden. Auf der (höchsten) Ebene 3 dokumentiert sich die API quasi selbst, indem der Server mit der Antwort auf eine Anfrage die nächsten möglichen Aktionen und die dabei anzusprechenden Ressourcen mitteilt, und es dem Client so ermöglicht, die verfügbare Funktionalität selbst zu entdecken. Diese Bereitstellung von Zusatzinformationen wird auch "Hypermedia as the Engine of Application State" (HATEOAS) genannt.

//Ein nach der OpenAPI Spezifikation erstelltes OpenAPI-Dokument kann im JSON- oder im YAML-Format vorliegen. Der Benutzer kann aus der API-Dokumentation das zugrundeliegende OpenAPI-Dokument im JSON-Format herunterladen.

// MA: Ich würde mir statt der Liste eher ein Format wünschen, welche Standards
// MA: Checkmk für die Rest-API nutzt. Für den Laien/Neueinsteiger ist die
// MA: Liste ja erst einmal leer Information, weil er sie in keinen Kontext setzen
// MA: kann. Für den Profi/Fortgeschrittenen allerdings sind das u.U. wichtige
// MA: Informationen zum Einstieg. Der Zweck dieser Liste ist für also klar, welche
// MA: Standards/Normen er bei uns voraussetzen kann. Vielleicht ist es aber auch
// MA: durch Hervorhebungen schon deutlicher?


Neben diesen generellen Komfortfunktionen bietet die {CMK} REST-API bereits jetzt Zugriff zu mehr Bereichen in {CMK} als die Web-API, z.B. zu Wartungszeiten, Zeitperioden, Quittierung von Problemen, Agenten und der Business Intelligence (BI). Für viele Bereiche, die beide APIs unterstützen, haben Sie per REST-API zudem mehr und spezifischere Möglichkeiten.

Bei allem REST-Enthusiasmus verschweigen wir aber nicht, dass die REST-API zurzeit noch nicht all das drauf hat, was die Web-API kann (z.B. Regelsätze). Solange das so ist, finden Sie im link:rest_api.html#rest-web-api[letzten Kapitel] eine Gegenüberstellung der Funktionalität von REST-API und Web-API.


== Die API-Dokumentation

=== Zugriff

Einer der Vorteile der REST-API ist, dass Software und Dokumentation aus der gleichen Quelle stammen: dem OpenAPI-Dokument. Daher passt die API-Dokumentation stets zur Software und beschreibt genau das, was die API kann. Daher ist es auch nicht nötig, den Referenzteil der verfügbaren Ressourcen, Methoden, Parameter etc. im {CMK}-Handbuch zu beschreiben: stattdessen finden Sie die API-Dokumentation außerhalb dieses Handbuchs.

// MA: ... direkt in ihrer {CMK}-Instanz.

Die REST-API-Dokumentation steht im HTML-Format zur Ansicht im Web-Browser bereit. Sie kann über die {CMK} GUI geöffnet und alternativ/zusätzlich über die {CMK}-Website heruntergeladen werden.

Wie in der Einleitung beschrieben, ist die REST-API und damit auch die API-Dokumentation versioniert. Allerdings folgt die API einer anderen Versionierung als die {CMK}-Software. Da ein neues Main Release der API dann notwendig ist, wenn es inkompatible API-Änderungen gibt, passt das in der Regel nicht zum Release-Zyklus der {CMK}-Software.

// MA: Das ist einer sehr wichtiger Punkt, der imho hier zu sehr
// MA: untergeht. Versionierung folgt nicht der Versionierung von {CMK} - das
// MA: könnte vielleicht in eine eigene ÜBerschrift? Und dann den Listenpunkt
// MA: aus der Einleitung dort mit rein?

Trotzdem ist die Zuordnung der Versionen von API-Dokumentation und {CMK}-Software sehr einfach. Wenn Sie die API-Dokumentation über die {CMK} GUI öffnen, wird Ihnen automatisch die passende API-Dokumentation angezeigt. Im
link:https://checkmk.de/download-archive.php[Download-Bereich] finden Sie beim Eintrag der {CMK}-Softwareversion die zugehörige API-Dokumentation .

So öffnen Sie die API-Dokumentation über die {CMK} GUI: 


=== Struktur und Inhalt

Die API-Dokumentation nutzt ein responsives Web-Design mit 3 Bereichen:



* Der linke Navigationsbereich dient der Orientierung, der Suche und dem schnellen Sprung zur genauen Beschreibung der Einträge im mittleren Bereich. Das Inhaltsverzeichnis enthält für jeden API-Endpunkt einen Eintrag. Ein Endpunkt bezeichnet per URL die Ressource, die die API zur Verfügung stellt (z.B. für die Sammlung der Hosts), zusammen mit der Methode, um auf die Ressource zuzugreifen (z.B. GET zur Anzeige eines Hosts). Die Endpunkte sind in mehrere Ordner organisiert.

* Der mittlere Inhaltsbereich enthält die harten Fakten der Dokumentation: alle Informationen zur Definition einer Anfrage (mit Parametern, Wertebereichen, Default-Werten und Beschreibungen) und die zugehörigen Antworten (ebenfalls mit allen Details). Die möglichen Antworten werden in unterschiedlichen Farben dargestellt, je nachdem ob der zurückgelieferte HTTP-Status-Code Erfolg oder einen Fehler signalisiert.

* Der rechte Beispielbereich zeigt für den im Inhaltsbereich ausgewählten Endpunkt die Methode und die URL, gefolgt von mehreren Beispielen zu Anfragen: die Payload im JSON-Format (falls relevant für den Endpunkt) und Code-Beispiele z.B. für cURL, HTTPie, Python Requests und Python Urllib. Dann folgen die Antworten passend zum HTTP-Status. Alle Code-Beispiele können über den Knopf [.guihint]#Copy# in die Zwischenablage kopiert werden.

Der Navigationsbereich ist scroll-synchronisiert zu den anderen beiden Bereichen, das heißt, wenn Sie im Inhaltsbereich nach oben oder unten scrollen, scrollt der Navigationsbereich automatisch zum passenden Eintrag des Inhaltsverzeichnisses mit.

Das responsive Web-Design sorgt dafür, dass in einem Browser-Fenster mit geringer Breite der Beispielbereich verschwindet (dafür werden dann die Beispiele unterhalb der zugehörigen Methode angezeigt) und der Navigationsbereich in ein Menü umgewandelt wird.

In allen Bereichen finden Sie Inhalte, die Sie ein- und ausblenden können, zum Beispiel im Navigationsbereich die Einträge für die Endpunkte und im Inhaltsbereich verschachtelte Parameter. Durch Anklicken von [.guihint]#># oder [.guihint]#Expand all# blenden Sie die verborgenen Inhalte ein und mit [.guihint]#&or;# oder [.guihint]#Collapse all# wieder aus.

Wie Sie die API-Dokumentation nutzen können, um aus den Informationen konkrete  Anfragen zu erstellen, an den {CMK}-Server zu senden, ausführen zu lassen und den Erfolg zu kontrollieren: all das erfahren Sie im nächsten Kapitel.


== Die API nutzen

=== Authentifizierung

Um von einem Client aus die REST-API nutzen zu können, muss auf dem {CMK}-Server ein link:wato_user.html#automation[Automationsbenutzer] eingerichtet sein. Nur dieser ist berechtigt, Aktionen über die API auszuführen.

Für die Authentifizierung benötigen Sie den Benutzernamen und das zugehörige, sogenannte "automation secret for machine accounts", das heißt das Passwort des Automationsbenutzers. Beide Informationen müssen im Header jeder Anfrage an den {CMK}-Server übermittelt werden.
Bei einer neu erstellten Instanz (site) ist der Benutzer [.guihint]#automation# bereits angelegt. Sie finden ihn, wie andere Benutzer auch, unter [.guihint]#Setup => Users#. Achten Sie darauf, dass die Rollen und die damit verbundenen Berechtigungen für den Automationsbenutzer so gesetzt sind, dass Sie die Ausführung Ihrer Anfragen erlauben.

In diesem Artikel wird immer der standardmäßig eingerichtete Automationsbenutzer als Beispiel genommen.


=== Die API lokal testen

Um die REST-API zu testen, bietet es sich an, die Anfragen direkt vom {CMK}-Server aus zu stellen, das heißt, in diesem Fall befinden sich Client und Server auf dem gleichen Rechner. Wenn Sie als Instanzbenutzer arbeiten, können Sie zudem lokale Variablen wie z.B. `$OMD_SITE` benutzen, die auf den Namen der Instanz (site) verweist.

In den folgenden Beispielen nutzen wir den in der API-Dokumentation enthaltenen Beispiel-Code für das Kommandozeilenprogramms cURL, das es ermöglicht, ohne Benutzerinteraktion Daten von oder zu einem Server zum Beispiel per HTTP zu übertragen. Das `curl`-Kommando wird innerhalb eines Bash-Skripts ausgeführt.

Zur Vorbereitung erstellen Sie eine Skript-Datei, in die später der Beispiel-Code kopiert wird:

[{shell}]
----
{c-omd} touch rest-api_test.sh
{c-omd} chmod +x rest-api_test.sh
----

Bevor es los geht, sammeln Sie einige grundlegenden Informationen, die spezifisch für Ihre {CMK}-Konfiguration sind:

[cols=3]
|===
|Variable |Beispielwert |Bedeutung 

|HOST_NAME |myserver |Hostname des {CMK}-Servers
|SITE_NAME |mysite |Name der {CMK}-Instanz
|USERNAME |automation |Name des Automationsbenutzers
|PASSWORD |theautomationsecret |Passwort des Automationsbenutzers
|===


Diese Variablen werden im Beispiel-Code verwendet und müssen von Ihnen  geändert werden, bevor Sie eine Anfrage absenden. In der obigen Tabelle finden Sie auch die Beispielwerte, die im folgenden verwendet werden.


=== Anfragen stellen

Wir werden nun den Umgang mit der REST-API an einem übersichtlichen Beispiel demonstrieren: Sie erstellen einen Host mit seinen Services mit insgesamt
drei Anfragen. Prinzipiell gehen Sie dabei genauso vor, wie Sie es auch mit der {CMK} GUI tun würden:

. Einen Host erstellen
. Eine Serviceerkennung auf dem Host durchführen
. Die Änderungen aktivieren

//Auswertung Web-API Kap. 2.4. Die API lokal testen
//Auswertung Web-API Kap. 2.2. Der Aufbau der URL


==== Einen Host erstellen

Öffnen Sie die API-Dokumentation und suchen Sie im linken Navigationsbereich den Eintrag zum Erstellen eines Hosts ([.guihint]#Create a host#):



Im mittleren Bereich sehen Sie die Details zur gewählten Anfrage: welche HTTP-Authentifizierung gefordert ist (diese ist identisch für alle Anfragen über die REST-API) und die notwendigen und optionalen Parameter. Notwendig (required) ist der Name des Hosts und das Verzeichnis, in dem er angelegt werden soll. Sollten Sie den Host nicht im Hauptverzeichnis anlegen wollen, müssten Sie sich erst über eine andere API-Anfrage ([.guihint]#List all folders#) die existierenden Verzeichnisse anzeigen lassen, um die ID des gewünschten herauszufinden.

In unserem Beispiel wollen wir den Host `myserver123` mit der IP-Adresse `192.168.0.42` im Hauptverzeichnis anlegen.

In der API-Dokumentation klicken Sie im rechten Beispielbereich auf den Knopf [.guihint]#curl# und dann auf [.guihint]#Copy# um den cURL-Beispielcode in die Zwischenablage zu kopieren. Öffnen Sie das vorbereitete Skript `rest-api_test.sh` und fügen Sie den Inhalt der Zwischenablage ein:

.
[{file}]
----
#!/bin/bash
HOST_NAME="localhost"
SITE_NAME="heute"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/v0"

USERNAME="automation"
PASSWORD="test123"

curl \
    -X POST \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \ \
    --data '{
          "attributes": {
            "ipaddress": "192.168.0.123"
          },
          "folder": "root",
          "host_name": "example.com",
          "nodes": [
            "host1",
            "host2",
            "host3"
          ]
        }' \
    "$API_URL/domain-types/host_config/collections/all"
----

Im ersten Teil des Beispiel-Codes finden Sie die vier zu ändernden Umgebungsvariablen, dann folgt das `curl`-Kommando mit der POST-Methode auf die Ressource, deren URL in der letzten Zeile steht. In der POST-Methode finden Sie nach den Header-Zeilen (eine davon definiert die HTTP-Authentifizierung) den Datenteil, in dem die Parameter für den neuen Host  festgelegt werden. Beachten Sie, dass der Beispiel-Code mehr Parameter enthalten kann, als Sie brauchen: in unserem Beispiel benötigen wir den  Parameter `nodes` nicht, da wir keinen Cluster-Host erstellen wollen.

Passen Sie nun den Beispiel-Code an, so dass das Resultat ungefähr so aussieht:

.
[{file}]
----
#!/bin/bash
HOST_NAME="*myserver*"
SITE_NAME="*mysite*"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/v0"

USERNAME="*automation*"
PASSWORD="*theautomationsecret*"

curl \
    -X POST \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Content-Type: application/json" \
    --header "Accept: application/json" \
    --data '{
          "attributes": {
            "ipaddress": "*192.168.0.42*"
          },
          "folder": "root",
          "host_name": "*myserver123*"
        }' \
    "$API_URL/domain-types/host_config/collections/all"
----



Führen Sie das Skript aus:

[{shell}]
----
{c-omd} ./rest-api_test.sh
{"domainType": "host_config", "id": "example.com", "title": null, "links": [{"rel": "self", "href": "\/objects\/host_config\/example.com", "method": "GET", "type": "application\/json", "domainType": "link"}, {"rel": "urn:org.restfulobjects:rels\/update", "href": "\/objects\/host_config\/example.com", "method": "PUT", "type": "application\/json", "domainType": "link"}, {"rel": "urn:org.restfulobjects:rels\/delete", "href": "\/objects\/host_config\/example.com", "method": "DELETE", "type": "application\/json", "domainType": "link"}], "members": {"folder_config": {"id": "folder_config", "memberType": "property", "value": "\/objects\/folder_config\/d68fa227d2fc40caa8754d71244c3744", "format": "string", "title": null, "choices": [], "links": [{"rel": "self", "href": "\/objects\/host_config\/example.com\/properties\/folder_config", "method": "GET", "type": "application\/json;profile=\"urn:org.restfulobjects:rels\/object_property\"", "domainType": "link"}]}}, "extensions": {"attributes": {"ipaddress": "192.168.0.123"}, "is_cluster": true, "is_offline": false, "cluster_nodes": []}}
----

In der Ausgabe erkennen Sie an den fett formatierten Einträgen, dass der Host erstellt wurde.




==== Eine Serviceerkennung auf dem Host durchführen

Nachdem der Host erstellt wurde, können die Services hinzugefügt
werden. Wählen Sie dazu in der API-Dokumentation den Eintrag zur Ausführung einer Serviceerkennung aus ([.guihint]#Run a service discovery#) , kopieren Sie den Beispiel-Code in das Skript und passen Sie es an Ihre Konfiguration an, indem Sie den Hostnamen ändern und bei Bedarf
die Art der Serviceerkennung (`full-scan` oder `tabula-rasa`):

Für unser Beispiel sieht das angepasste Skript so aus:

.
[{file}]
----
#!/bin/bash
HOST_NAME="*myserver*"
SITE_NAME="*mysite*"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/v0"

USERNAME="*automation*"
PASSWORD="*theautomationsecret*"

curl \
    -X POST \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \
    "$API_URL/objects/host/example.com/actions/discover-services/mode/tabula-rasa"
----



Nach der Ausführung des Skripts erhalten Sie folgende Ausgabe:




==== Die Änderungen aktivieren

Zum Abschluss müssen die Änderungen aktiviert werden. Die passende Anfrage heißt [.guihint]#Activate pending changes#. Änderungen des Beispiel-Codes im
`curl`-Kommando sind nicht notwendig, da es für diese Anfrage keine Parameter gibt:

.
[{file}]
----
#!/bin/bash
HOST_NAME="*myserver*"
SITE_NAME="*mysite*"
API_URL="http://$HOST_NAME/$SITE_NAME/check_mk/api/v0"

USERNAME="*automation*"
PASSWORD="*theautomationsecret*"

curl \
    -X POST \
    --header "Authorization: Bearer $USERNAME $PASSWORD" \
    --header "Accept: application/json" \
    "$API_URL/domain-types/activation_run/actions/activate-changes/invoke"
----

Die Ausgabe des Skripts:



// MA: Ich fände es besser, wenn in den einzelnen Skript-Beispiele deutlicher
// MA: wäre, was nun neu ist und was nicht. Gerade das letzte Beispiel habe ich
// MA: ja wahrscheinlich nicht exakt so aus der Doku kopiert, oder?


=== Fehler korrigieren

// MA: Ich würde eher einmal die vier (bzw. 5) Punkte in der Ausgabe erklären
// MA: und dann ein oder maximal zwei Beispiele bringen. Letztendlich müssen die
// MA: Benutzer ja nur das Grundprinzip verstehen und dann einmal an einem Beispiel
// MA: sehen. Vorschlag: Zwei Beispiele -- einmal einen Standard und einen, wo auch
// MA: der Error-Key vorkommt?


Im Gegensatz zu den im vorherigen Kapitel gezeigten Ausgaben bei erfolgreichen Kommandos, werden Ihnen Fehler mit
link:https://de.wikipedia.org/wiki/HTTP-Statuscode[HTTP-Status-Code]
und einer Beschreibung der Fehlerursache in der folgenden Art geliefert:

[{shell}]
----
{
  "detail": "Provided token is not valid",
  "status": 401,
  "title": "Unauthorized",
  "type": "about:blank"
}
----

Wie Sie aus den `detail` und `title`-Zeilen ablesen können, liegt hier der Fehler in der Header-Zeile für die HTTP-Authentifizierung, z.B. ist der Benutzername oder das Passwort falsch.

Auch für den folgenden Fehler liegt die Ursache im Header:

[{shell}]
----
{
  "detail": "Invalid Content-type (application\/x-www-form-urlencoded), expected JSON data",
  "status": 415,
  "title": "Unsupported Media Type",
  "type": "about:blank"
}
----

Da der der Inhaltstyp (content type) der Anfrage nicht der erwartete ist -- nämlich JSON -- könnte das Hinzufügen der folgenden Zeile zum Skript zum Erfolg führen:

[{shell}]
----
--header "Content-Type: application/json" \
----

Der nächste Fehler teilt Ihnen mit, dass die Syntax der Anfrage nicht korrekt Ist, meist verursacht durch einen Tippfehler beim Editieren:

[{shell}]
----
{
  "detail": "Request body is not valid JSON",
  "status": 400,
  "title": "Bad Request",
  "type": "about:blank"
}
----

Eingaben außerhalb des gültigen Wertebereichs (hier ein Schrägstrich im Hostnamen) liefert Ihnen die API so zurück:

[{shell}]
----
{
  "detail": "There is an error in your submitted data.",
  "errors": {
    "host_name": [
      "'myserver\/123' does not match pattern '[-0-9a-zA-Z_.]+'."
    ]
  },
  "status": 400,
  "title": "The request could not be validated.",
  "type": "about:blank"
}
----

Im folgenden Fehler erfahren Sie, dass es zwar ausstehende Änderungen in {CMK} gibt, die aber von einem anderen Benutzer veranlasst wurden. Über die API können nur Änderungen aktiviert werden, die auch über die API durchgeführt wurden:

[{shell}]
----
{
  "detail": "An exception occurred.",
  "status": 401,
  "title": "There are changes from other users and foreign changes are not allowed in this API call.",
  "type": "about:blank"
}
----

Die Anzahl der möglichen Fehler ist natürlich sehr viel länger als die paar wenigen, die wir vorgestellt haben. An den gezeigten Beispielen sehen Sie aber, dass die REST-API in der Ausgabe meist genügend Informationen über die Ursache liefert und Ihnen so Anhaltspunkte für den Einstieg in die Analyse und die Fehlerbehebung  gibt.


== Die API absichern

Da beim Zugriff über die REST-API sensible Daten übertragen  und -- je nach Berechtigung des Automationsbenutzers -- umfassende Änderungen an
{CMK} durchgeführt werden können, sollten Sie den Zugriff entsprechend
absichern. Hier finden Sie einige der Möglichkeiten:

* link:omd_https.html[{CMK} über HTTPS]: Nutzen Sie die API ausschließlich über das Hypertext Transfer Protocol Secure (HTTPS), da Benutzername, Passwort und auch Konfigurationsdaten sonst im Klartext im Netz übertragen werden.

* Geben Sie dem Automationsbenutzer ein Passwort mit einer ausreichenden Länge. Da das Passwort in der Regel nur in einem Skript hinterlegt wird, können Sie problemlos ein sehr langes vergeben.

* Achten Sie auf das Berechtigungskonzept zu den Skripten, mit denen Sie die Anfragen an die API stellen. In den Skripten können sensible Daten, wie Konfigurationsdaten, Passwörter usw. enthalten sein. Stellen Sie daher sicher, dass ausschließlich berechtigte Benutzer und Gruppen diese Skripten lesen können.


[#rest-web-api]
== REST-API und Web-API im Vergleich

In diesem Kapitel erhalten Sie einen Überblick, welche Funktionen Ihnen über die REST-API und über die Web-API zur Verfügung stehen. Die folgende Tabelle ist gegliedert nach den Endpunkten, die sie im linken Navigationsbereich der  REST-API-Dokumentation wiederfinden. In der Tabelle enthält die Spalte für die REST-API die HTTP-Methoden (bei Mehrdeutigkeit ergänzt um Kontextinformationen) und die Spalte für die Web-API die Befehle.

[cols=3]
|===
|Aktion |REST-API |Web-API
|ausstehende Änderungen aktivieren |POST activate-changes |activate_changes
|auf Abschluss einer Aktivierung warten |GET wait-for-completion |-
|Zustand einer Aktivierung anzeigen |GET activation_run |-
|laufende Aktivierungen anzeigen |GET collections running |-
|anzeigen |GET |get_folder
|alle anzeigen |GET all |get_all_folder
|erstellen |POST |add_folder
|mehrere erstellen |POST bulk-create |-
|ändern |PUT |edit_folder
|mehrere ändern |PUT bulk-update |-
|verschieben |POST move |-
|entfernen |DEL |delete_folder
|mehrere entfernen |DEL bulk-delete |-
|anzeigen |GET |get_host
|alle anzeigen |GET all |get_all_hosts
|erstellen |POST |add_host
|mehrere erstellen |POST bulk-create |-
|ändern |PUT |edit_host
|mehrere ändern |PUT bulk-update |-
|entfernen |DEL |delete_host
|mehrere entfernen |DEL bulk-delete |delete_hosts
|alle Hosts eines Zustands anzeigen |GET all |-
|anzeigen |GET |-
|alle anzeigen |GET all |get_all_hostgroups
|erstellen |POST |add_hostgroup
|mehrere erstellen |POST bulk-create |-
|ändern |PUT |edit_hostgroup
|mehrere ändern |PUT bulk-update |-
|entfernen |DEL |delete_hostgroup
|mehrere entfernen |DEL bulk-delete |delete_hosts
|mehrere anzeigen |- |get_hosttags
|mehrere ändern |- |set_hosttags
|alle anzeigen |GET all |-
|erstellen |POST |-
|entfernen |DEL |-
|mehrere entfernen |DEL bulk-delete |-
|Serviceerkennung ausführen |POST |discover_services
|Services in einem Serviceerkennungszustand anzeigen |GET |-
|Serviceerkennungszustand ändern |PUT |-
|Services eines Zustands auf einem Host anzeigen |GET |-
|Services eines Zustands global anzeigen |GET all |-
|anzeigen |GET |-
|alle anzeigen |GET all |get_all_servicegroups
|erstellen |POST |add_servicegroup
|mehrere erstellen |POST bulk-create |-
|ändern |PUT |edit_servicegroup
|mehrere ändern |PUT bulk-update |-
|entfernen |DEL |delete_servicegroup
|mehrere entfernen |DEL bulk-delete |-
|anzeigen |- |get_ruleset
|alle anzeigen |- |get_ruleset_info
|ändern |- |set_ruleset
|BI-Regel anzeigen |GET bi_rule |-
|BI-Regel ändern |PUT bi_rule |-
|BI-Aggregat anzeigen |GET bi_aggregation |-
|BI-Aggregat ändern |PUT bi_aggregation |-
|BI-Paket anzeigen |GET bi_pack |-
|alle BI-Pakete anzeigen |GET all bi_pack |-
|anzeigen |GET |-
|erstellen |POST |-
|ändern |PUT |-
|entfernen |DEL |-
|alle anzeigen |- |get_all_users
|mehrere erstellen |- |add_users
|mehrere ändern |- |edit_users
|mehrere entfernen |- |delete_users
|anzeigen |GET |-
|erstellen |POST |-
|ändern |PUT |-
|entfernen |DEL |-
|anzeigen |GET |-
|alle anzeigen |GET all |get_all_contactgroups
|erstellen |POST |add_contactgroup
|mehrere erstellen |POST bulk-create |-
|ändern |PUT |edit_contactgroup
|mehrere ändern |PUT bulk-update |-
|entfernen |DEL |delete_contactgroup
|mehrere entfernen |DEL bulk-delete |-
|für einen Host quittieren |POST host |-
|für mehrere Hosts quittieren |POST host bulk-acknowledge |-
|für Hosts einer Hostgruppe quittieren |POST hostgroup |-
|für einen Service auf einem Host quittieren |POST host service |-
|für einen Service global quittieren |POST service |-
|für mehrere Services auf einem Host quittieren |POST service bulk-acknowledge |-
|für Services einer Servicegruppe quittieren |POST servicegroup |-
|alle Agenten anzeigen |GET collections agent |-
|alle Agenten backen |POST bake |bake_agents
|alle Agenten signieren |POST sign |-
|alle Agenten backen und signieren |POST bake_and_sign |-
|Backzustand anzeigen |GET baking_status |-
|Zustand der automatischen Agentenverteilung anzeigen |GET automatic-deployment |-
|Agent herunterladen |GET agent |-
|anzeigen |- |get_site
|aktualisieren |- |set_site
|entfernen |- |delete_site
|anmelden |- |login_site
|abmelden |- |logout_site
|{CMK} Version anzeigen |GET version |-
|Instanzen eines Benutzers anzeigen |- |get_user_sites
|Host-Namen aller Instanzen anzeigen |- |get_host_names
|Metriken aller Services eines Hosts anzeigen |- |get_metrics_of_host
|Graph-Informationen eines Services anzeigen |- |get_graph_recipes
|Metriken eines Graphen anzeigen |- |get_graph
|Service Level Agreement (SLA)-Informationen anzeigen |- |get_sla
|===

