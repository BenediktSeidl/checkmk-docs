include::global_attr.adoc[]
= Der Checkmk Micro Core
:revdate: 2016-03-10
:title: Der optimierte Core in Checkmk
:description: Alles über den spezifischen Checkmk Micro Core (CMC) und seine Vorteile erfahren Sie in diesem Artikel.

{related-start}
link:cmc_migration.html[Migration auf den CMC]
link:cmc_differences.html[Besonderheiten des CMC]
link:cmc_files.html[Dateien und Verzeichnisse des CMC]
{related-end}

== Der Monitoring-Kern

An zentraler Stelle im {CMK}-System arbeitet der Monitoring-Kern.
Seine Aufgaben sind

* das regelmäßige Anstoßen von Checks und Sammeln der Ergebnisse,
* das Bereitstellen des aktuellen Zustands für die GUI und
* das Erkennen von Zustandsänderungen und darauf basierend link:notifications.html[Alarmierung].

Folgendes Architekturbild zeigt den Kern im Zusammenhang mit den wichtigsten
Komponenten der {CEE}:

[#architecture]
image::cee_architecture_1.6.png[]


=== Nagios und Icinga

{cre-only}
Die {CRE} baut auf dem Kern aus dem bekannten Open-Source-Projekt _Nagios_
auf.  Dieser hat sich weltweit bei Millionen von Benutzern über Jahre hinweg
bewährt und bietet zahlreiche nützliche Funktionen. Seine Flexibilität
ist einer der Gründe für den Erfolg von Nagios.

Alternativ kann auch der Core von _Icinga_ eingesetzt werden. Dieser ist
vor allem in Deutschland verbreitet und basiert auf dem gleichen Programmcode,
wird aber seit einigen Jahren unabhängig weiterentwickelt.

Auch wenn Nagios bzw. Icinga hervorragende Dienste leistet, flexibel, stabil
und gut erprobt ist, so gibt es doch Situationen, in denen man damit an
Grenzen stößt. Bei einer größeren Zahl von überwachten Hosts und
Services treten vor allem drei Probleme auf:

* Der hohe CPU-Verbrauch beim Ausführen von Checks.
* Die lange Dauer eines Neustarts nach einer Konfigurationsänderung.
* Die Tatsache, dass das System während dieser Zeit nicht verfügbar ist.


== Der {CMK} Micro Core

{cee-only}
Da {CMK} in immer größeren Umgebungen eingesetzt wird und um die
oben genannten Limitierungen von Nagios zu überwinden, haben wir im Jahr
2013 mit der Neuentwicklung eines eigenen Kerns speziell für die {CEE}
begonnen. Der _{CMK} Micro Core_ -- kurz _CMC_ ist dabei nicht
als Fork von Nagios entstanden, sondern hat eine komplett eigene Codebasis.
Er verfügt über eine einzigartige und perfekt auf {CMK} zugeschnittene
Softwarearchitektur. Seine wichtigsten Vorteile sind:

[cols=2]
|===

|*Hohe Effizienz beim Ausführen von Checks* |Das betrifft sowohl aktive Checks als auch {CMK}-basierte Checks. In Benchmarks wurden auf einem Desktop-PC (Core i7) mehr als 600.000 Checks pro Minute erreicht.
|*Schnelles Aktivieren von Änderungen* |Eine Konfiguration mit 20.000 Hosts und 600.000 Services kann in 0,5 Sekunden geladen werden.
|*Konfigurationsänderungen im laufenden Betrieb* |Aktuell laufende Checks und Livestatus-Verbindungen werden nicht unterbrochen. Für die Nutzer des Monitorings ist der Vorgang nicht spürbar.
|*Schnelle Availability-Abfragen* |Durch einen speziellen Cache können Verfügbarkeitsanalysen auch über lange Zeiträume ohne spürbare Wartezeit berechnet werden.
|*Zusätzliche Features* |Der CMC verfügt über mehrere nützliche Zusatzfunktionen wie z.B. wiederkehrende Downtimes und link:basics_ackn.html[Quittierungen] mit automatischer Ablaufzeit.
|===



Auch an anderen Stellen wurde optimiert. So werden z.B. Messwerte jetzt ohne
Umwege direkt vom Core an den RRD-Cache übergeben, Notifikationen in einem
„Keepalive“-Modus erzeugt und Hostchecks mit einem eingebauten ICMP-Helper
ausgeführt. Das alles vermeidet kostspielige Prozesserzeugungen und spart CPU-Ressourcen.

Diese Eigenschaften bringen zahlreiche Vorteile -- auch in kleineren Installationen:

* Der geringe Verbrauch an CPU ermöglicht in vielen Fällen Virtualisierung anstelle echter Hardware.
* Das stoßfreie Aktivieren von Änderungen ermöglicht häufige Konfigurationsänderungen.
* Dadurch sind auch Problemstellungen wie z.B. Cloud-Monitoring möglich, bei denen in kurzer Abfolge Server hinzugefügt und entfernt werden.

// Die folgende Grafik zeigt die CPU-Last auf einem {CMK}-Server vor und
// nach der Umstellung von Nagios auf CMC. Diese wurde uns freundlicherweise
// vom Flughafen München bereitgestellt, welcher mit diesem Server 730 Hosts
// und 18.000 Services überwacht.

// BI:cmc-migration-cpuload2.png border center width:500px

Die folgende Grafik zeigt die CPU-Last auf einem {CMK}-Server vor und
nach der Umstellung von Nagios auf CMC. Diese wurde uns freundlicherweise
von dem Unternehmen DFi Service SA bereitgestellt. Sie überwachten zu diesem
Zeitpunkt 1.205 Hosts und 13.555 Services auf einem Server mit 10 Cores.

image::cmc-migration-cpuload4.png[width=500]
image::cmc-migration-cpuutil4.png[width=500]


In einem anderen Projekt zeigen sich ähnliche Effekte. Folgende Graphen
zeigen eine Umstellung vom Nagios-Core  auf CMC , in einer Umgebung mit
56.602 Service auf 2.230 überwachten Hosts auf einer virtuellen Maschine
mit zwei Cores:

[{image-border}]
image::cmc-migration-cpuload.png[width=500]
[{image-border}]
image::cmc-migration-cpuutil.png[width=500]
[{image-border}]
image::cmc-migration-diskio.png[width=500]

Wie groß der Unterschied im Einzelfall ist, hängt natürlich von vielen
Rahmenbedingungen ab.  Im obigen Fall läuft auf dem gleichen Server noch
eine kleinere Instanz, die nicht umgestellt wurde. Ohne diese wäre der
Unterschied in der Last noch deutlicher zu erkennen.

Weitere Artikel über den CMC:

- link:cmc_migration.html[Migration auf den CMC]
- link:cmc_differences.html[Besonderheiten des CMC]
- link:cmc_files.html[Dateien und Verzeichnisse des CMC]


== Häufig gestellte Fragen (FAQ)

=== Kann der CMC auch normale Nagios-Plugins ausführen?
Selbstverständlich kann der CMC auch klassische aktive und passive
Nagios-Checks ausführen.

=== Wird {CMK} weiterhin Nagios unterstützen?

{CMK} ist und bleibt kompatibel zu Nagios und wird auch den Nagios-Core weiterhin voll
unterstützen. Auch die {CEE} enthalten Nagios weiterhin als optionalen Kern -- allerdings nur
um die Migration der {RE} auf die {EE} zu unterstützen.

=== Wie kann ich zwischen Nagios und CMC wechseln?

Ein Umschalten zwischen den beiden Kernen ist einfach, sofern Ihre Konfiguration
rein mit WATO erstellt wurde. Einzelheiten finden Sie im Artikel
link:cmc_migration.html[Migration auf den CMC]. Die {EE} erzeugen neue Instanzen per Default
mit CMC als Kern.

=== Ist der CMC frei verfügbar?

Der CMC ist als Teil der {EE} im Rahmen verfügbar. Die {FE} ist kostenlos,
die {SE} und {ME} sind über eine Subskription erhältlich.
