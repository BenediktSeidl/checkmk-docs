include::global_attr.adoc[]
= Draft für die neue Check API
:revdate: draft
:title: 
:description: 

[TIP]
.Related Articles:
====
====

Nur für den internen Gebrauch.

== Check API Design

Die Check API ist eine an dem oben vorgestellten Prinzip orientierte API, die das erstellen von Inventory- und Check-Plugins erlauben soll.
Sie stellt Registries, Klassen und Hilfsfunktionen zur Verfügung, die dabei helfen.


=== Clusterkompatibilität#cluster

Die Pluginregistrierung bekommt ein optionales Keyword "`cluster_check_function`".

In der Version 1.0 sind Check-Plugins nicht länger implizit clusterfähig.
Konfiguriert ein Anwender einen solchen nicht clusterfähigen Service auf einem Cluster, so lautet die Ausage des Services lediglich
"{UNKNOWN} - This service is not fit for clustering. Please adjust your configuration.".
(Mehr zur Migration der alten Plugins unten.)

Die `cluster_check_function` wird analog zur `check_function` aufgerufen.
Allerdigs bekommt sie statt der geparsten Sektion(en) jeweils ein `Dict` übergeben, das die geparsten Sektionen der Nodes enthält.
Hierbei sind die Keys immer exakt die Nodes aus denen das Cluster aggregiert ist.
Fehlt eine Sektion für eine Node vollständig, so wird eine leere Sektion geparst.


Im allgemeinen Fall muss der Entwickler eines clusterfähigen Check-Plugins eine `cluster_check_function` implementieren.
Zur Bequemlichkeit stellt die API allerdings einige Funktionen bereit, die gewisse häufig benötigte Clustercheckfunktionen aus den Checkfunktionen generieren:

.
....
from check_api.v1 import clusterize

register.check_plugin(
    name                   = "norris",
    # ...
    check_function         = check_norris,
    cluster_check_function = clusterize.failover(check_norris),
)
....

Zur Verfüging gestellte "clusterize" Tools sind:

* `failover`: Erwarte nur Daten von genau einer Node
* `worst`: Schlimmstes Ergebnis bestimmt den Gesamtzustand
* `best`: Bestes Ergebnis bestimmt den Gesamtzustand


==== Legacy mode from hell

Um bei der Migration weniger Schmerzen zu haben, stellen wir eine Möglichkeit bereit das alte Verhalten zu bekommen:
In einer Version 0.1 der Check-API entspricht das Verhalten ohne das `cluster_check_function` Keyword dem alten impliziten, undurchschaubaren aber manchmal funktionierenden Verhalten.
Diese API Version dient lediglich der *Migration* der Plugins, die keine `node_info` gesetzt haben, und ist von Anfang an Deprecated.

Das kann nur funktionieren, wenn für alle abbonierten Sektionen `name == parsed_section_name` gilt. Wir prüfen das (sonst Exception).

Bei der Migration der übrigen Plugins und der Entwicklung neuer Plugins wird die API Version 1.0 eingesetzt.


==== Beispiel: `clusterize.failover`

Die Implementierung von `clusterize.failover` würde etwa so aussehen:

.clusterize.py
....
def failover(check_function):

    def _extract_node_sections(node, clusterd_sections):
        return tuple(arg[node] for arg in clusterd_sections)

    def _add_node_info(node, results):
        """Add node info to first encountered Details"""
        iresults = iter(results)
        for result in iresults:
            if not isinstance(result, Details):
                yield result
            else:
                yield Details(result.state, "[%s] %s" % (node, result.text))
                break
        # leave rest untouched
        yield from iresults

    # see if have item/params argument
    func_args = inspect.signature(check_function).parameters
    section_args_pos = 'item' in func_args + 'params' in func_args

    @functools.wraps(check_function)
    def cluster_check_function(*args)
        # last argument must be a section
        nodes = args[-1].keys()
        item_params, *sections = args[:section_args_pos], args[section_args_pos:]
        result_dict = {
            node: list(check_function(*item_params, *_extract_node_sections(node, sections)))
            for node in nodes
        }

        active_nodes = {node: results for node, results in result_dict.items() if results}

        if len(active_nodes) >= 2:
            yield 1, "More than one active node: %s" % ', '.join(active_nodes)
        for node, results in active_nodes.items():
            yield from _add_node_info(node, results)

    cluster_check_function.__name__ = "cluster_%s" % check_function.__name__
    return cluster_check_function
....


=== Check-Plugins

==== Übersicht: Alt vs neu

[options="header"]
|===
|Alt: check_info Dict
|Neu: registry kwarg
|Kommentar
|===


Zusätzlich bei SNMP Check-Plugins:

[options="header"]
|===
|Alt: check_info Dict
|Neu: registry kwarg
|Kommentar
|===


==== Registrierung

Die Check API stellt eine Registrierungsfunktion für Check-Plugins bereit (Beispiele in der link:checkapisummary.html[Zusammenfassung]).

*name*

Obligatorisch. Ein eindeutiger Name, wie allgemein für link:checkapidraft.html#pluginreg[Plugins] beschrieben.

*sections*

Optional. Eine Liste von Sektionsnamen. Diese steuern die Anzahl und Namen der Argumente, die von Discover- und check Funktion akzeptiert werden (unter dem Namen `section_foo`. Default: `[name]`.

*service_name*

Obligatorisch. Das Template für den Namen des Service (früher `service_description`). Die `check_function` muss muss genau dann das Argument `item` akzeptieren, wenn ein Item-Platzhalter vorkommt.

*discovery_ruleset_name*

Optional. Der name der Discoveryregel, falls es eine gibt.

*discovery_default_parameters*

Optional. Die default Parameter für die Discovery. Müssen zur WATO-Regel passen, falls es eine gibt.

*discovery_function*

Die Discoverfunktion. Sie akzeptiert als Argumente:

* `params` genau dann, wenn `discovery_ruleset_name` gesetzt ist
* Ein Argument für jeden Eintrag in `sections` (z.B. `section_foo, section_bar` entsprechend `sections = ["foo", "bar"]`)

Die Registrierungsfunktion validiert die Anzahl der Argumente gegenüber den abbonierten Sektionen.

Die Discoverfunktion wird ausgeführt, falls mindestens eine der abbonierten Sektionen vorhanden ist.

Die Discoverfunktion muss den Fall berücksichtigen, dass eine Sektion zwar vorhanden, aber leer ist.

Die Discoveryfunktion ist ein Generator, der Objekte des Typs check_api.Service yieldet.


*check_ruleset_name*

Optional. Der name der Checkregel, falls es eine gibt.

*check_default_parameters*

Optional. Die default Parameter für die Checkfunktion. Müssen zur WATO-Regel passen, falls es eine gibt.

*check_function*

Die Checkfunktion. Sie akzeptiert als Argumente:

* `item` genau dann, wenn der Item-Platzhalter in `service_name` vorkommt
* `params` genau dann, wenn `check_ruleset_name` gesetzt ist, die effektiven Parameter, gebildet aus Regeln und Defaults
* Ein Argument für jeden Eintrag in `sections` (z.B. `section_foo, section_bar` entsprechend `sections = ["foo", "bar"]`)

Die Registrierungsfunktion validiert die Anzahl der Argumente.

Auch hier können einige oder alle Sektionen leer sein.

Die Checkfunktion ist ein Generator, der Objekte folgenden Typs yieldet:

* check_api.Result
* check_api.AdditionalDetails
* check_api.Metric
* check_api.IgnoreResults

*cluster_check_function*

Siehe link:checkapidraft.html#cluster[Clusterkompatibilität].
Die Clustercheckfunktion wird analog zur Checkfunktion aufgerufen, und darf exakt die selben Objekte yielden.

*management_board*

Bei SNMP-Plugins kann es durch ein Managementboard als zweite SNMP Datenquelle zu Konflikten kommen.
Diese können aufgelöst werden, in dem ein Plugin angeben kann, dass es excliusiv für Managementboards ist (`management_board.EXCLUSIVE`), oder auf den Managementboards nicht angewendet werden soll (`management_board.DISABLED`).

=== Inventoryplugins

==== Übersicht: Alt vs. neu

[options="header"]
|===
|Alt: inv_info Dict
|Neu: registry kwarg
|Kommentar
|===


==== Registrierung

Die Check API stellt eine dedizierte Registrierungsfunktion für Inventoryplugins bereit.
Diese ist, wo immer sinnvoll möglich, analog zu den Checkplugins.

.
....
register.inventory_plugin(
    name               = "norris",
    sections           = ["norris"],
    inventory_function = inventory_norris,
)
....

*name*

Obligatorisch. Ein eindeutiger Name, wie allgemein für link:checkapidraft.html#pluginreg[Plugins] beschrieben.

*sections*

Optional. Eine Liste von Sektionsnamen. Diese steuern die Anzahl und Namen der Argumente, die von der Inventoryfunktion akzeptiert werden (unter dem Namen `section_foo`. Default: `[name]`.

*inventory_ruleset_name*

Optional. Der name der Inventoryregel, falls es eine gibt.

*inventory_default_parameters*

Optional. Die default Parameter für die Inventory. Müssen zur WATO-Regel passen, falls es eine gibt.

*inventory_function*

Die Inventoryfunktion. Sie akzeptiert als Argumente:

* `params` genau dann, wenn `inventory_ruleset_name` gesetzt ist
* Ein Argument für jeden Eintrag in `sections` (z.B. `section_foo, section_bar` entsprechend `sections = ["foo", "bar"]`)

Die Registrierungsfunktion validiert die Anzahl der Argumente gegenüber den abbonierten Sektionen.

Die Inventoryfunktion wird ausgeführt, falls mindestens eine der abbonierten Sektionen vorhanden ist.

Die Inventoryfunktion ist eine Generatorfunktion, die Objekte folgenden Typs yieldet:

* check_api.TableRow
* check_api.Attributes

Mehr zur Funktionsweise unten.

== Objekte der CheckAPI#apiobjects



=== Klassen für das Arbeiten mit Sektionen

==== SNMPTree

Ein einfacher Wrapper für das Angeben von OIDs die abgefragt werden sollen (siehe link:checkapidraft.html#sections[hier]).

.
....
class SNMPTree(typing.NamedTuple("SNMPTree", [('base', str), ('oids', ListOf[Union[str,OIDQualifier]])])):
  def __new__(cls, oids, base=None):
    # validation goes here
    super().__new__(cls, base, oids)
....

Die Objekte vom Typ `OIDQualifier` bilden das Verhalten von `OID_END`, `BINARY` und `CACHED_OID` aus den `snmp_utils` ab.
Die folgenden drei Subklassen der ABC `OIDQualifier` soll es geben:


|===
|===



==== ParsedSection

Wenn die Parsefunktion ein Objekt der Klasse `ParsedSection` zurück gibt, wird es im Anschluss mit verschiedenen Metainformationen angereichert, falls sie nicht in der Parsefunktion bereits gesetzt wurden. Die `ParsedSection` ist ein `dict`, ergänzt um ein Attribut "meta".

Jede ParsedSection bekommt einen Zeitstempel, idealerweise den Zeitpunkt der Erzeugung der Daten (durch den Agent), ansonsten den Zeitpunkt des Empfangs durch die Site.

Insgesamt hat die `ParsedSection` die folgenden Attribute:

* `.meta.node_name`: der Name der node von der die Sektion stammt
* `.meta.cached`: die Cachinginformation aus dem Sektionsheader
* `.meta.timestamp`: Zeitpunkt des Empfangs durch die Site


.
....
class _ParsedMetaInfo():
  def __init__(self):
    node_name = None
    cached = None
    timestamp = None
    missing = None


class ParsedSection(dict):
  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.meta = _ParsedMetaInfo()
....


==== HostLabel
Schon da. Siehe `cmk/base/discovered_labels.py`.

=== Valide Kassen zur Rückgabe durch die Discovery

==== Service ("Item")

Das Service-Objekt enthält alle Informationen, die von der Discoveryfunktion für diesen Service bestimmt werden:

* Item
* Parameters
* List der service labels


=== Klassen für das Arbeiten mit Checkplugins

==== Konstanten für das `management_board` Keyword
.
....
@enum.unique
class management_board(enum.Enum):
    DISABLED = "disabled"
    EXCLUSIVE = "exclusive"
....


=== Valide Klassen zur Rückgabe durch die Checkfunktion

Eine Checkfunktion yielded Instanzen der Typen `Result` ("state" und "Details"), `AdditionalDetails`, `Metric` und `IgnoreResults` zurück.

Da die Validierung dieser Objekte bei der Erzeugung im Plugin-Kontext erfolgen soll, müssen sie so konzipiert sein, dass Benutzer sie nach der Erstellung nicht mehr ändern können.

==== Der Monitoring-State

Als Monitoring-State wird nicht mehr ein Integer, sondern eine dedizierte Enum Klasse benutzt. Die abgebildeten States sind {OK}, {WARN}, {CRIT} und {UNKNOWN}.
Soll ein Service "stale" werden, wird eine Exception des Typs `IgnoreResultsException` geraised oder `IgnoreResults()` geyieldet.
Wann ein Service auf den Status {PEND} geht, entscheidet {CMK} alleine.

.
....
from check_api import state

print(state.WARN)
print(state(2))
print(state["OK"])
....

.
....
@enum.unique
class state(enum.IntEnum):
    OK = 0
    WARN = 1
    CRIT = 2
    UNKNOWN = 3
....

Außerdem gibt es im gleichen Namespace noch eine Funktion `state.worst`, die alle übergebenen States nach dem Schema {OK} &lt; {WARN} &lt; {UNKNOWN} &lt; {CRIT} vergleicht, und den schlimmsten zurück gibt.

==== `Result`

Dieses Objekt bündelt einen State und dazugehörigen Text. Es wird erzeugt mit den folgenden Keyword-Argumenten:


|===
|===



==== `Metric`

*Achtung*: In der `Metric` sollte auch der "de-serialisierungs Hack" für `float('Inf')` enthalten sein,
der derzeit unter dem Namen `as_float` in `cmk/base/check_api.py` lebt, und nur optional ist.

.
....
class Metric(typing.NamedTuple("Metric", [('name', str), ('value', float), ('levels', tuple), ('boundaries', tuple)])):
  def __new__(cls, name, value, *, levels=(None, None), boundaries=(None, None)):
    # validation goes here
    super().__new__(cls, name, value, levels, boundaries)
....


==== `IgnoreResults`

Wenn eine Instanz der Klasse `IgnoreResults` zurückgegeben wird, werden *alle* Ergebnisse der Checkfunktion verworfen, so wie das jetzt beim raisen einer `MKCounterWrapped` Exception der Fall ist. Die geyieldeten Werte der Checkfunktion werden aber noch vollständig konsumiert. Soll die Checkfunktion abbrechen, muss eine `IgnoreResultsException` geworfen werden (siehe unten "Exceptions").

.
....
class IgnoreResults(object):
    pass
....


=== Klassen für das Arbeiten mit Inventoryplugins

Inventoryfunktionen dürfen Instanzen von zwei verschiedenen Klassen yielden.
Instanziierungskeys die mit "inventory" oder "status" geprefixed sind, unterscheiden sich dadurch,
dass die Letzteren nicht bei der Berechnung der Inventoryhistory berücksichtigt werden.
Dieser Unterschied ist also rein intentional -- sie werden exakt gleich aufgerufen,
und unterlaufen die gleichen Validierungen.

==== `TableRow`

.
....
TableRow(
    path = ["software", "applications", "oracle", "instance"],
    key_columns = {
        "sid" : item_data['sid'],
    },
    inventory_columns = {
        "version": item_data['version'],
        "openmode": item_data['openmode'],
        "logmode": item_data['log_mode'],
        "logins": item_data['logins'],
        "db_creation_time": _parse_raw_db_creation_time(item_data['db_creation_time']),
    }
    status_columns = {
        "db_uptime": up_seconds,
    }
)
....

Yieldet eine Inventoryfunktion ein Objekt vom Typ `TableRow` wird am angegebenen Pfad eine entsprechende Tabelle angelegt oder weiter befüllt.
Das Plugin muss (und kann) nicht wissen, ob es den Pfad, die Tabelle, oder die entsprechenden Spalten bereits gibt.

*path*:

Obligatorisch. Eine Liste von Strings.
Der Pfad, an dem die Tabelle, für die diese Zeile bestimmt ist, liegen soll.

*key_columns*:

Obligatorisch. Ein *nicht leeres* Dictionary mit Strings als Key.
Die Keys des Dictionarys sind die Spaltenbezeichnungen, die Values die Werte,
die in die Tabelle eingetragen werden.

Diese Werte werden bei der Berechnung der Inventoryhistorie berücksichtigt.

Diese Keys geben an welche Spalten von je zwei Zeilen übereinstimmen müssen,
damit sie als die gleiche Zeile behandelt, und gemerged werden.
Beim Anlegen eines neuen Tables werden sie als Attribute des Tables übernommen,
bei dem Befüllen eines existierenden Tables müssen sie passen (sonst Exception).

Das Mergen läuft immer gleich ab, und ist relvant

* wenn mehrere Plugins Daten für die selbe Tabelle liefern
* wenn das "diff" für die Inventoryhistory berechnet wird
* wenn Status- und Inventory Daten zusammen gemischt werden

Damit ist es nicht mehr nötig, dass die Tabellen sortiert sind. Das sortierte *Darstellen* der Tabellen ist ein Feature der aktuellen displayhints.

Werden bei dem Mergen Einträge überschrieben, die nicht in `key_column` gelistet sind, wird eine Warnung in _das Log_ geschrieben.

*inventory_columns*:

Optional. Ein Dictionary mit Strings als Key.
Die Keys des Dictionarys sind die Spaltenbezeichnungen, die Values die Werte,
die in die Tabelle eingetragen werden.

Diese Werte werden bei der Berechnung der Inventoryhistorie berücksichtigt.

*status_columns*:

Optional. Ein Dictionary mit Strings als Key.
Die Keys des Dictionarys sind die Spaltenbezeichnungen, die Values die Werte,
die in die Tabelle eingetragen werden.

Diese Werte werden bei der Berechnung der Inventoryhistorie *nicht* berücksichtigt.

==== `Attribute`

.
....
Attributes(
    path = ["os", "vendor"],
    inventory_attributes = {
        "name" : "Micki$osft",
        "date" : 1920,
    }
    status_attributes = {
        "uptime" : uptime,
    }
)
....

Yieldet eine Inventoryfunktion ein Objekt vom Typ `Attributes` werden die entsprechenden Attribute dem Knoten zugeordnet.


=== Hilfsobjekte zur Checkentwicklung

Hier gibt es zwei unterschiedliche Kategorien:

* Rein funktionale Hilfsmittel (`check_levels`, `@discover`)
* Helfer für die Interaktion mit {CMK} (`item_state`, `host_name`).

Die letzteren sollten auf das allernötigste beschränkt sein (insbesondere `host_name` soll weg).
Außerdem ist zu beachten, dass es möglichst einfach sein soll, Check-Plugins außerhalb eines Monitoringkontextes zu testen.

COMMENT[LM: Wir sollten intern diese globalen Dinge, wie "aktueller Hostname" usw. über einen Kontextmanager registrieren. Können wir u.u. ähnlich wie bei Flask machen, dass es beim Zugriff auf dieses Objekt auserhalb eines Context eine Exception gibt.]



==== Logging

User sollen über die API einen `LOGGER` aus dem `logging` modul bekommen, der immer (auch außerhalb eines Monitoringkontextes!) angemessen konfiguriert ist.

.
....
from check_api import LOGGER

def check_func(...):
    LOGGER.warning("bla")
....

Der Logger wird durch die Check-API automatisch so mit Infos ergänzt, dass klar ist um welches Plugin es geht in welchem Check-Context (Host, Item, ...) er gerade ausgeführt wird.


==== Exceptions

Die API stellt die Exceptionklasse `IgnoreResultsException` bereit, deren Instanzen dazu führen, dass die geyieldeten Results verworfen werden. Sie teilt sich eine Oberklasse mit MKCounterWrapped, die das Verhalten triggert (CMK-1124).

