= Multisite - Custom Notes
:description: Nagios allows you to configure a noter_url for each host and service, which can be used to link to custom web pages showing more information.
:revdate: outdated
VS:1.1.7i5
== Custom host and service notes
Nagios allows you to configure a noter_url for each host
and service. This can be used to link to custom web pages
showing more information about that specific item. It is
not possible - however - to configure notes or in general
text to be displayed in the GUI directly.

As of version 1.1.7i5 Multisite allows you to do exactly
this in an easy and flexible way: It allows you to attach
arbitrary HTML text to a service or a host. That text
will be displayed in the detailed view of the host or
service. That text is available as a new column named
_Custom host notes_ or _Custom service notes_
and thus can be added to each view as you prefer.

You are not limited in the amount or complexity of text.
You can embed hyperlinks and other HTML code, even iframes.

== How to add custom notes
Adding your own notes is easy. No configuration is needed.
First create a subdirectory `notes` in the same directory
where `multisite.mk` is present - usually `/etc/check_mk`:

[source,bash]
----
RP:cd /etc/check_mk
RP:mkdir notes
----

=== Notes for hosts
You can add notes for hosts and/or services. Let's start with
hosts. Make a subdirectory called `hosts`:

[source,bash]
----
RP:cd notes
RP:mkdir hosts
----

Now let's make a note for the host `b02nag01`. This is
done by creating a file with that name and writing HTML code
into it:

./etc/check_mk/notes/hosts/b02nag01

----This is a note for `b02nag02`
----

You can use one file for more hosts by making use of
shell patterns like `*` and `?`. Please
note that here the filename aktually contains the `*`.
While this concept is very unusual it is not at all
impossible nor inconvenient. You just have to make sure
that you use quotes in order to escape the patterns from
the shell. The following example creates a description
for all hosts containing `nag`:

[source,bash]
----
RP:cd /etc/check_mk/notes/hosts
RP:vim '*nag*'
----

If more than one file matches then all matching files will
be used and several notes will be attached to the host.

=== Notes for services
Making notes for services is just as easy as for hosts but
with one extra directory level. First you have to create
a subdirectory `services`:

[source,bash]
----
RP:cd /etc/check_mk/notes
RP:mkdir services
RP:cd services
----

Service notes can be specific to hosts. Therefore you first
have to create directories for your hosts. Here exactly the
same rules apply as for host notes with the only difference
that we now create _directories_ instead of files.
In the following example we create the three directories
`b02nag02`, `b02*` and `*`. They will
be used for the host `b02nag02`, all hosts beginning
with `b02*` (including `b02nag02` and all of your
host.

Just as with the host notes all matching directories will
be used and scanned for matching notes. This allows you to
make general notes for a specific type of services by
using the directory `*` and at the same time additional
notes for that service on one ore more specific hosts.

Within the directories spoken of you now create files matching
the service descriptions the notes should be displayed at.
Again those files may contain arbitrary HTML code. Here are
some examples:

Make a note for service `CPU Load` on all hosts:
[source,bash]
----
RP:cd /etc/check_mk/notes/services
RP:mkdir '*'
RP:vim '*/CPU Load'
----

Make an additional note for `CPU Load` just on
`b02nag02`:
[source,bash]
----
RP:mkdir 'b02nag02'
RP:vim 'b02nag02/CPU Load'
----

Make notes for services containing `eth0` on hosts
beginning with `srv`:
[source,bash]
----
RP:mkdir 'srv*'
RP:vim 'srv*/*eth0*'
----

== Replacing tags
You are for sure not the first one having the idea to
add hyper links into your host or service notes. If your
link contains host specific information (such as the host
name or its ip address) you probably do not want to
copy and paste your host notes file for each host.

Therefore, Multisite is so kind as to replace the following
macros in your HTML code with the actual values:

[cols=, ]
|===
<td class=tt>$HOSTNAME$</td><td>The host name</td><td class=tt>$HOSTNAME_LOWER$</td><td>The host name converted to lower case</td><td class=tt>$HOSTNAME_UPPER$</td><td>The host name converted to upper case (new in <b class=new>1.1.8b2*)</td><td class=tt>$HOSTNAME_TITLE$</td><td>The host name with the first character upper case and the rest lower case (new in <b class=new>1.1.8b2*)</td><td class=tt>$HOSTADDRESS$</td><td>The IP address of the host</td><td class=tt>$SERVICEDESC$</td><td>The service description (only for service notes)</td><td class=tt>$SITE$</td><td>The id of the site as defined in `multisite.mk` (new in <b class=new>1.1.9i5*)</td><td class=tt>$URL_PREFIX$</td><td>The URL prefix of the site as defined in `multisite.mk` (new in <b class=new>1.1.9i5*)</td><td class=tt>$HOSTOUTPUT$</td><td>The output of the host check plugin (new in <b class=new>1.2.2*, only for host notes)</td><td class=tt>$SERVICEOUTPUT$</td><td>The output of the check plugin (new in <b class=new>1.2.2*, only for service notes)</td>|===

Here is an example for a notes file making use of that:

./etc/check_mk/notes/hosts/*

----Lookup <a href="http://mywiki.local/page.php?host=$HOSTNAME$">this host in Wiki</a>
----
