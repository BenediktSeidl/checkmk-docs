include::global_attr.adoc[]
= Installation als Docker-Container
:revdate: draft
:title: Installation als Docker-Container
:description: Die Installation von {CMK} in einem Docker-Container ist mit dem offiziellen Image sehr einfach. Die sinnvolle Optionen dabei werden hier näher beschrieben.

{related-start}
link:intro_welcome.html[Leitfaden für Einsteiger]
link:checkmk_getting_started.html[Schnelleinstieg ins Monitoring]
link:managing_docker.html[{CMK}-Server im Docker-Container]
{related-end}


== Grundsätzliches

Es gibt viele Gründe, weshalb Anwender Software in einem Docker-Container betreiben möchten. 
Auch {CMK} kann man in einer Docker-Umgebung einsetzen. 
Ein Anwendungsfall kann sein, eine dynamisch erstellte Containergruppe zu überwachen und {CMK} zu einem Teil dieser Gruppe zu machen. 
Wird die Containergruppe nicht mehr benötigt, kann auch die Instanz von {CMK} wieder entfernt werden.

*Wichtig:* Auch wenn es möglich und sehr einfach ist, {CMK} in eine containerisierte Umgebung zu integrieren, ist das nicht immer der sinnvollste
Weg. 
Da jegliche Virtualisierung zum einen eine verringerte Performance mit sich bringt und zum anderen das Monitoring prinzipiell möglichst wenige physische Abhängigkeiten haben sollte, eignen sich {CMK}-Container zum Beispiel nicht, um damit die gesamte Infrastruktur zu überwachen. 
In einem in sich abgeschlossenen Container-Cluster kann es aber durchaus zielführend sein, in dieses einen {CMK}-Container zu integrieren, um es direkt von innen heraus zu überwachen. 
Prüfen Sie also auch und besonders hier, ob das Werkzeug Docker/Container für Ihre konkrete Anforderung das richtige ist.

Um Ihnen die Bereitstellung als Container so einfach wie möglich zu machen, stellen wir für jede {CMK}-Edition eigene Images zur Verfügung, welche
neben {CMK} das Linux-Betriebssystem Debian enthalten. 
Diese Images erhalten Sie wie folgt:

[cols=2]
|===

|{CRE} |link:https://hub.docker.com/r/checkmk/check-mk-raw/[Docker Hub]
|{CEE} |link:https://checkmk.com/de/download/[{CMK}-Download-Seite] (für die {FE}), 
link:https://customer.checkmk.com/[{CMK}-Kundenportal]
|===

In diesem Artikel führen wir Sie durch die Einrichtung von {CMK} in Docker und zeigen Ihnen einige Tricks, die das Leben mit {CMK} in Docker
einfacher machen.

Weitere Informationen finden Sie im Artikel xref:managing_docker#[{CMK}-Server im Docker-Container.]


[#install_cre]
== Installation der {RE}
// TK: Das docker Kommando musste ich erst mit "apt install docker.io" nachinstallieren. Soll man das erwähnen - oder ist das eh klar für jemand, der in der Dockerwelt unterwegs ist?

{cre-only}
Der Start mit Docker mit der {CRE} ist einfach. 
Ein passendes Image steht Ihnen direkt über Docker Hub zur Verfügung. 
Das Ganze geht mit einem einzigen Kommando auf der Linux-Konsole. 
Dabei wird nicht nur ein Docker-Container mit {CMK} erzeugt, sondern auch gleich eine Monitoringinstanz mit dem Namen `cmk` eingerichtet und gestartet. 
Diese ist sofort bereit zur Anmeldung mit dem Benutzer `cmkadmin`.

[{shell}]
----
{c-root} docker container run -dit -p 8080:5000 --ulimit nofile=1024 --tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 -v monitoring:/omd/sites --name monitoring -v /etc/localtime:/etc/localtime:ro --restart always checkmk/check-mk-raw:2.0.0-latest
Unable to find image 'checkmk/check-mk-raw:2.0.0-latest' locally
2.0.0-latest: Pulling from checkmk/check-mk-raw
69692152171a: Pull complete 
9c7de4c0761f: Pull complete 
6707e96b1346: Pull complete 
b6a32bb602b9: Pull complete 
906e243cffff: Pull complete 
dcc72c1a4553: Pull complete 
Digest: sha256:a4f25bd3b81eb7d3e1f4caa11025243b9fc4c8397ffdf41ffb23ca685161bfcd
Status: Downloaded newer image for checkmk/check-mk-raw:2.0.0-latest
73a86e310b60bfdd9ebe76ad110139b612bce02b22dd6aaf5fdb341323397299
----

Nähere Informationen zu den benutzen Optionen:
// TK: Die Option -dit hab ich in der Docker Doc nicht gefunden.

[cols="33,~"]
|===
|Option |Beschreibung 

|-p 8080:5000 |Der Webserver des Containers lauscht standardmäßig auf Port 5000. In diesem Beispiel wird der Port 8080 des Docker-Node an den Port des Containers gebunden, damit dieser von außen erreichbar ist. Wenn Sie keinen anderen Container oder Prozess haben, welcher den Standard-HTTP-Port 80 benutzt, können Sie den Container auch daran binden. In diesem Fall würde die Option so aussehen: `-p 80:5000`. Die Nutzung von HTTPS wird im Artikel xref:managing_docker#[{CMK}-Server im Docker-Container] erläutert.
|--ulimit nofile=1024 |Indem Sie das User Limit (`ulimit`) für `nofile` manuell setzen, reduzieren Sie die Anzahl an Dateideskriptoren, die ein Prozess in dem Container öffnen kann. 
// Das ist vor allem hier sinnvoll, da {CMK} derzeit noch auf Python 2 setzt, welches einen sehr hohen Standardwert heranzieht und damit den Prozess sehr stark ausbremsen kann.
|--tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 |Für eine optimale Performance können Sie ein temporäres Dateisystem direkt im RAM des Docker-Nodes nutzen. Mit dieser Option geben Sie den Pfad zu diesem Dateisystem an. Wenn Sie die ID der Instanz ändern, so muss auch dieser Pfad entsprechend angepasst werden.
|-v monitoring:/omd/sites |Diese Option bindet die Daten der Instanz in diesem Container an eine persistente Stelle im Dateisystem des Docker-Node. Sie gehen daher nicht verloren, wenn der Container wieder entfernt wird. Der Teil vor dem Doppelpunkt bestimmt hierbei den Namen. So können Sie später den Speicherpunkt eindeutig identifizieren. Zum Beispiel mit dem Befehl `docker volume ls`.
|--name monitoring |Hiermit wird der Name des Containers definiert. Dieser Name muss eindeutig sein und darf auf dem Docker-Node kein zweites Mal verwendet werden.
|-v /etc/localtime:/etc/localtime:ro |Mit dieser Option nutzen Sie in dem Container dieselbe Zeitzone wie im Docker-Node. Gleichzeitig wird die Datei nur lesend (`ro`) eingebunden.
|--restart always |Normalerweise startet ein Container nicht neu, wenn er gestoppt wurde. Mit dieser Option sorgen Sie dafür, dass er eben doch automatisch neu startet.
|checkmk/check-mk-raw:2.0.0-latest |Bezeichnung des {CMK} Images im Format <Repository>:<Tag>. Die Bezeichnungen können Sie über den Befehl `docker images` auslesen.
|===

Nachdem alle benötigten Dateien geladen wurden und der Container gestartet ist, sollten Sie die GUI von {CMK} über `\http://localhost:8080/cmk/check_mk/` erreichen:

image::login.png[alt="{CMK}-Anmeldedialog.",width=60%]

[#login]
Sie können sich nun erstmals xref:checkmk_getting_started#[einloggen und {CMK} ausprobieren.]
Das initiale Passwort für den Benutzer `cmkadmin` finden Sie in den Logs, die für diesen Container geschrieben werden (hier auf die wesentlichen Informationen gekürzt):

[{shell}]
----
{c-root} docker container logs monitoring
Created new site cmk with version 2.0.0.cre.

  The site can be started with *omd start cmk*.
  The default web UI is available at *http://73a86e310b60/cmk/*

  The admin user for the web applications is *cmkadmin* with password: *2JLysBmv*
  For command line administration of the site, log in with *'omd su cmk'*.
  After logging in, you can change the password for cmkadmin with *'htpasswd etc/htpasswd cmkadmin'*.
----
// TK: Die in der Log-Datei angezeigte URL http://73a86e310b60/cmk/ funktionierte bei mir nicht.


[#short-lived_containers]
=== Kurzlebige Container

Wenn Sie sich sicher sind, dass die Daten in der {CMK}-Container-Instanz nur in diesem speziellen Container verfügbar sein sollen, können Sie entweder darauf verzichten, dem Container einen persistenten Datenspeicher zuzuordnen oder diesen Speicher automatisch beim Stoppen des Containers entfernen. 
Um den persistenten Speicher wegzulassen, lassen Sie schlicht die Option `-v /omd/sites` weg. 
Um einen persistenten Speicher anzulegen und beim Stoppen automatisch zu entfernen, benutzen Sie den folgenden Befehl:

[{shell}]
----
{c-root} docker container run --rm -dit -p 8080:5000 --tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 --ulimit nofile=1024 -v /omd/sites --name monitoring -v /etc/localtime:/etc/localtime:ro checkmk/check-mk-raw:2.0.0-latest
3d7f04bc7d0a1ded5fb5ab49e3c72894615a2058c5df2d7af11e20f4662b5c09
----

Dieser Befehl hat -- im Gegensatz zu dem von oben -- lediglich zwei andere Optionen:

* Mit `--rm` übergeben Sie direkt zum Start den Befehl, dass auch der Datenspeicher für den Container beim Stoppen entfernt werden soll. Auf diese Weise sparen Sie sich das manuelle Aufräumen, wenn Sie viele kurzlebige {CMK}-Container haben.
+
*Wichtig:* Beim Stoppen wird auch der Container selbst komplett entfernt!

* Die Option `-v /omd/sites` ist im Vergleich zu oben angepasst. Sie beinhaltet keinen selbst vergebenen Namen mehr, da der Datenspeicher sonst nicht korrekt gelöscht wird.


[#install_cee]
== Installation der {EE}

{cee-only}
Auch die {EE} können Sie in einem Docker-Container betreiben. 
Die Images der {EE} sind nicht frei über Docker Hub verfügbar.
Laden Sie sich die gewünschte Edition und Version von der link:https://checkmk.com/de/download/[{CMK}-Download-Seite] (für die {FE}) oder im link:https://customer.checkmk.com/[{CMK}-Kundenportal] herunter.

Laden Sie das Image aus der heruntergeladenen tar-Archivdatei in Docker:

[{shell}]
----
{c-root} docker load -i check-mk-enterprise-docker-2.0.0p5.tar.gz
9e77dbc9fb80: Loading layer [==================================================>]  2.048kB/2.048kB
333c8e825260: Loading layer [==================================================>]  305.6MB/305.6MB
23a76a052da6: Loading layer [==================================================>]  175.7MB/175.7MB
f8583c4a8a97: Loading layer [==================================================>]  758.4MB/758.4MB
789d4e45d714: Loading layer [==================================================>]  6.656kB/6.656kB
Loaded image: checkmk/check-mk-enterprise:2.0.0p5
----

Danach können Sie den Container mit einem sehr ähnlichem Befehl wie oben starten.
Achten Sie nur darauf, dass Sie den Namen des geladenen Images (`Loaded image`) aus der vorherigen Kommandoausgabe im folgenden Startkommando verwenden, also in diesem Beispiel `checkmk/check-mk-enterprise:2.0.0p5`:

[{shell}]
----
{c-root} docker container run -dit -p 8080:5000 --ulimit nofile=1024 --tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 -v monitoring:/omd/sites --name monitoring -v /etc/localtime:/etc/localtime:ro --restart always checkmk/check-mk-enterprise:2.0.0p5
f00d10fcb16313d3539065933b90c4dec9f81745f3d7283d794160f4f9b28df1
----

Nach dem Start des Containers können Sie sich an der {CMK}-Weboberfläche anmelden, wie es bei der xref:login[Installation der {RE}] beschrieben ist.

// TK: Deinstallation ist nirgends beschrieben - auch nicht in update, wo die Linux Deinstallation beschrieben ist. Zu trivial?
