include::global_attr.adoc[]
= Installation als Docker-Container
:revdate: 2019-02-12
:title: {CMK} als Container betreiben
:description: Die Installation von checkmk in einer Containerumgebung ist mit dem offiziellen Image  spielend leicht. Sinnvolle Optionen werden hier näher beschrieben.

{related-start}
<<<<<<< HEAD
link:intro.html[Der Leitfaden für (CMK) Einsteiger]
=======
link:intro.html[Das offizielle Handbuch zu (CMK)]
>>>>>>> f08b29c30da21b8d382975a82c1f6b8db2cf5a58
link:checkmk_getting_started.html[Schnelleinstieg ins Monitoring]
link:managing_docker.html[Checkmk-Server im Docker-Container]
{related-end}

== Grundsätzliches

Es gibt viele Gründe, weshalb Anwender Software in einem Docker-Container
betreiben möchten. Auch {CMK} kann man in der Version
VERSION[1.6.0] offiziell in einer Docker-Umgebung einsetzen. Ein
Anwendungsfall kann sein, eine dynamisch erstellte Containergruppe zu
überwachen und {CMK} zu einem Teil dieser Gruppe zu machen. Wird die
Containergruppe nicht mehr benötigt, kann auch die Instanz von {CMK}
wieder entfernt werden.

*Wichtig:* Auch wenn es möglich und sehr einfach ist, {CMK} in eine
containerisierte Umgebung zu integrieren, ist das nicht immer der sinnvollste
Weg. Da jegliche Virtualisierung zum einen eine verringerte Performance mit
sich bringt und zum anderen das Monitoring prinzipiell möglichst wenige physische
Abhängigkeiten haben sollte, eignen sich {CMK}-Container zum Beispiel
nicht, um damit die gesamte Infrastruktur zu überwachen. In einem in sich
abgeschlossenen Container-Cluster kann es aber durchaus zielführend sein,
in dieses einen {CMK}-Container zu integrieren, um es direkt
von innen heraus zu überwachen. Prüfen Sie also auch und besonders hier, ob
das Werkzeug Docker/Container für Ihre konkrete Anforderung das richtige ist.

Um die Bereitstellung als Container für Sie so einfach wie möglich zu gestalten,
stellen wir für jede {CMK}-Editon eigene Images zur Verfügung, welche
neben {CMK} das Linux-Betriebssystem Debian 9 (Stretch) enthalten. Diese
erhalten Sie wie folgt:

[cols=2]
|===

|{CRE} |link:https://hub.docker.com/r/checkmk/check-mk-raw/[Docker Hub]
|{CEE} |link:https://checkmk.de/download.php[{CMK}-Downloadseite]
|===


In diesem Artikel führen wir Sie durch die Einrichtung von {CMK} in
Docker und zeigen Ihnen einige Tricks, die das Leben mit {CMK} in Docker
einfacher machen.

Weitere Informationen zu {CMK} in einem Docker-Container finden Sie
in dem Artikel link:managing_docker.html[Checkmk-Server im Docker-Container.]

== Installation der {RE}

=== Allgemein

{cre-only}
Der Start mit Docker mit der {CRE} ist einfach. Ein passendes Image steht
Ihnen direkt über Docker Hub zur Verfügung. Das Ganze geht mit einem einzigen
Kommando auf der Linux-Konsole. Dabei wird nicht nur ein Docker-Container mit
{CMK} erzeugt, sondern auch gleich eine Monitoringinstanz mit dem Namen
`cmk` eingerichtet und gestartet. Diese ist sofort bereit zur Anmeldung
als Benutzer `cmkadmin`:

[{shell}]
----
{c-root} docker container run -dit -p 8080:5000 --ulimit nofile=1024 --tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 -v monitoring:/omd/sites --name monitoring -v /etc/localtime:/etc/localtime:ro --restart always checkmk/check-mk-raw:1.6.0-latest
Unable to find image 'checkmk/check-mk-raw:1.6.0-latest' locally
1.6.0-latest: Pulling from checkmk/check-mk-raw
8f91359f1fff: Pull complete
3d794619eec5: Pull complete
1468b0cb296b: Pull complete
787a36ef0a12: Pull complete
159fac9366a1: Pull complete
fefc9fe50b26: Pull complete
Digest: sha256:153b6a6b4002cc0e02c17e127f582fa54a539803960d36d265802426c0066aa8
Status: Downloaded newer image for checkmk/check-mk-raw:1.6.0-latest
511cd26bdc2847ee5b430a1c0c52ff4489b3556775d07878b0533df077b67a83
----

Nähere Informationen zu den benutzen Optionen:

[cols="33,~"]
|===
|Option |Beschreibung 

|-p 8080:5000 |Der Webserver des Containers lauscht standardmäßig auf Port 5000. In diesem Beispiel wird der Port 8080 des Docker-Node an den Port des Containers gebunden, damit dieser von außen erreichbar ist. Wenn Sie keinen anderen Container oder Prozess haben, welcher den Standard-HTTP-Port 80 benutzt, können Sie den Container auch daran binden. In diesem Fall würde die Option so aussehen: `-p 80:5000`. Die Nutzung von HTTPS wird link:managing_docker.html#https[weiter unten] näher erläutert.
|--ulimit nofile=1024 |Indem Sie das User Limit (ulimit) für nofile manuell setzen, reduzieren Sie die Anzahl an Dateideskriptoren, die ein Prozess in dem Container öffnen kann. Das ist vor allem hier sinnvoll, da {CMK} derzeit noch auf Python 2 setzt, welches einen sehr hohen Standardwert heranzieht und damit den Prozess sehr stark ausbremsen kann.
|--tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 |Ab Version VERSION[1.6.0] kann für eine optimale Performance ein temporäres Dateisystem direkt im RAM des Docker-Node genutzt werden. Mit dieser Option geben Sie den Pfad zu diesem Dateisystem an. Wenn Sie die ID der Instanz ändern, so muss auch dieser Pfad entsprechend angepasst werden.
|-v monitoring:/omd/sites |Diese Option bindet die Daten der Instanz in diesem Container an eine persistente Stelle im Dateisystem des Docker-Node. Sie gehen daher nicht verloren, wenn der Container wieder entfernt wird. Der Teil vor dem Doppelpunkt bestimmt hierbei den Namen. So können Sie später den Speicherpunkt eindeutig identifizieren. Zum Beispiel mit dem Befehl `docker volume ls`.
|--name monitoring |Hiermit wird der Name des Containers definiert. Dieser Name muss eindeutig sein und darf auf dem Docker-Node kein zweites Mal verwendet werden.
|-v /etc/localtime:/etc/localtime:ro |Mit dieser Option nutzen Sie in dem Container dieselbe Zeitzone wie im Docker-Node. Gleichzeitig wird die Datei nur lesend (ro) eingebunden.
|--restart always |Normalerweise startet ein Container nicht neu, wenn er gestoppt wurde. Mit dieser Option sorgen Sie dafür, dass er eben doch automatisch neu startet.
|checkmk/check-mk-raw:1.6.0-latest |Angabe des {CMK}-Image im Format _Repository:Tag;_ die Bezeichnungen können Sie über den Befehl `docker images` auslesen.
|===


Nachdem alle benötigten Dateien geladen wurden und der
Container gestartet ist, sollten Sie die GUI von {CMK} über
`http://localhost:8080/cmk/check_mk/` erreichen:

image::login.png[width=60%]

[#login]
Sie können sich nun erstmals link:checkmk_getting_started.html[einloggen] und {CMK}
ausprobieren. Das initiale Passwort für den Account `cmkadmin` finden
Sie in den Logs, welche für diesen Container geschrieben werden (hier
auf die wesentlichen Informationen gekürzt):

[{shell}]
----
{c-root} docker container logs monitoring
Created new site cmk with version 1.6.0.cre.

  The site can be started with omd start cmk.
  The default web UI is available at http://c395cfe2d50d/cmk/

  The admin user for the web applications is cmkadmin with password: erYJR0IT
  (It can be changed with 'htpasswd -m ~/etc/htpasswd cmkadmin' as site user.)
----


==== Kurzlebige Container

Wenn Sie sich sicher sind, dass die Daten in der {CMK}-Container-Instanz nur
in diesem speziellen Container verfügbar sein sollen, können Sie entweder
darauf verzichten dem Container einen persistenten Datenspeicher zuzuordnen
oder diesen Speicher automatisch beim Stoppen des Containers entfernen. Um
den persistenten Speicher wegzulassen, lassen Sie schlicht die Option
`-v /omd/sites` weg. Um einen persistenten Speicher anzulegen und
beim Stoppen automatisch zu entfernen, benutzen Sie den folgenden Befehl:

[{shell}]
----
{c-root} docker container run --rm -dit -p 8080:5000 --tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 --ulimit nofile=1024 -v /omd/sites --name monitoring -v /etc/localtime:/etc/localtime:ro checkmk/check-mk-raw:1.6.0-latest
3d7f04bc7d0a1ded5fb5ab49e3c72894615a2058c5df2d7af11e20f4662b5c09
----

Dieser Befehl hat -- im Gegensatz zu dem von oben -- lediglich zwei andere
Optionen:

* Mit `--rm` übergeben direkt zum Start den Befehl, dass auch der Datenspeicher für den Container beim Stoppen entfernt werden soll. Auf diese Weise sparen Sie sich das manuelle Aufräumen, wenn Sie viele kurzlebige Checkmk-Container haben. *Wichtig:* Beim Stoppen wird auch der Container selbst komplett entfernt!
* Die Option `-v /omd/sites` ist im Vergleich zu oben angepasst. Sie beinhaltet keinen selbst vergebenen Namen mehr, da der Datenspeicher sonst nicht korrekt gelöscht wird.


== Installation der {EE}

{cee-only}
Auch die {EE} können Sie in einem Docker-Container
betreiben. Diese sind nicht frei über Docker Hub verfügbar. Derzeit laden Sie die gewünschte
Version über unsere link:https://checkmk.de/download.php[Downloadseite] herunter und
laden das Image in Docker:

[{shell}]
----
{c-root} docker load -i check-mk-enterprise-docker-1.6.0p18.demo.tar.gz
333e2cb4c707: Loading layer [==================================================>]  58.49MB/58.49MB
bbfed64bbcfc: Loading layer [==================================================>]  2.048kB/2.048kB
9404c04f9b0e: Loading layer [==================================================>]  262.2MB/262.2MB
d0dbf2463465: Loading layer [==================================================>]  146.5MB/146.5MB
c614fb908387: Loading layer [==================================================>]  686.7MB/686.7MB
5fb3a3a79488: Loading layer [==================================================>]  5.632kB/5.632kB
Loaded image: checkmk/check-mk-enterprise:1.6.0p18.demo
----

Danach können Sie den Container mit einem sehr ähnlichem Befehl wie oben starten.
Achten Sie nur darauf, dass Sie in diesem Fall das Image der {SE} bzw. {ME} angeben (z.B.
`checkmk/check-mk-enterprise:1.6.0p18.demo`):

[{shell}]
----
{c-root} docker container run -dit -p 8080:5000 --ulimit nofile=1024 --tmpfs /opt/omd/sites/cmk/tmp:uid=1000,gid=1000 -v monitoring:/omd/sites --name monitoring -v /etc/localtime:/etc/localtime:ro --restart always checkmk/check-mk-enterprise:1.6.0p18.demo
6aef65edaa7f1409d218c3259d1009c1abdd424494a169565eac342bd5e1a29b
----

Auch hier finden Sie das Passwort in den link:introduction_docker.html#login[Logs.]
