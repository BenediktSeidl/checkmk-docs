= Verwaltung der Hosts
:revdate: 2018-07-05
:title: Zu überwachende Systeme verwalten
:description: Skalierbarkeit der Pflege gehört zum Grunddesign von checkmk. Welche Möglichkeiten es gibt, Hosts leicht pflegen und strukturieren, erfahren Sie hier.


== Einleitung

Die wichtigste Aufgabe beim Einrichten des Monitorings ist sicherlich das
Verwalten der zu überwachenden Systeme -- der _Hosts_. Dabei geht es nicht
nur darum, dass diese mit den richtigen Stammdaten (z.B. Hostname, IP-Adresse)
eingetragen sind. Auch Einstellungen für das Monitoring (z.B. Alarmierung,
Schwellwerte, usw.) wollen gepflegt werden.

(CMK) wurde von an Anfang für Umgebungen mit sehr vielen Hosts entworfen. Um
hier die Konfiguration für den Nutzer beherrschbar zu machen, verfolgt
(CMK) bei der Konfiguration einen anderen Ansatz als alle anderen Systeme,
die aus dem Ökosystem von Nagios heraus enstanden sind. Die wichtigsten
Prinzipien sind:

* Eine Hierarchie von Ordnern, in denen Hosts abgelegt werden
* Hostmerkmale (Hosttags) und eine darauf basierende [wato_rules|regelbasierte] Konfiguration
* [wato_services|Automatische Erkennung] der zu überwachenden Services


[#folder]
=== Ordner und ihre Hierarchie

Jeder, der mit Computern arbeitet, kennt das Prinzip von Dateien und Ordnern.
WATO verwendet ein analoges Prinzip für die Verwaltung der Hosts, welche
quasi die Rolle der Dateien übernehmen. Da Ordner selbst in Ordnern enthalten
sein können, ergibt sich eine Baumstruktur. Dabei sind drei Kriterien für
den Aufbau des Host-Baums verbreitet:

* *Standort* (z.B. München versus Shanghai)
* *Host-Typ* (z.B. Switch versus Loadbalancer)
* *Organisationsstruktur* (z.B. Datenbankgruppe versus Netzwerker)

Natürlich können Sie das auch mischen, also z.B. in der ersten Ebene
des Baums Aufteilung nach Standort, in der zweiten dann nach Host-Typ.

Wenn Sie einfache Dinge lieben, sollten Sie die eigentlichen Hosts
nur in die _„Blätter“_ des Baums packen (auch wenn Checkmk Hosts
in mittleren Ordnern erlaubt). Folgendes Beispiel zeigt eine einfache
Baumstruktur nach Host-Typ: Die Hosts _A_, _B_ und _C_
sind im Ordner _Server_ und _D_, _E_ und _F_ in _Network_:

image::bilder/wato_folders_step_2.png[align=center,width=430]


[#inheritance]
=== Vererbung von Attributen

Wenn Sie den Baum geschickt aufbauen, können Sie ihn nutzen,
um sinnvoll _Attribute zu vererben_. Das ist vor allem bei solchen
Attributen nützlich, die bei großen Gruppen von Hosts gleich sind, wie
z.B. die SNMP-Community oder _Hostmerkmale_ wie der [.guihints]#Agent Type}},# 
mit dem Sie festlegen, ob der Host per SNMP oder per Checkmk-Agent
überwacht werden soll.

Folgendes Beispiel zeigt die Vererbung der Merkmale [.guihints]#Agent Type# mit
den Ausprägungen `cmk-agent` und `snmp-only` sowie des
Merkmals [.guihints]#Criticality# mit den Ausprägungen `prod` und `test`:

image::bilder/wato_folders_step_4.png[align=center,width=500]

Weiter unten im Baum definierte Attribute haben immer Vorrang. Direkt beim
Host festgelegte Werte überschreiben also alles, was von den Ordnern kommt.
In obigem Beispiel ergeben sich so für den Host _A_ die Merkmale
`prod` und `cmk-agent`, für _D_ `prod` und
`snmp-only` und für den Host _F_ wegen des expliziten Attributs
die Werte `test` und `snmp-only`.

Ein großer Vorteil dieses Schemas gegenüber dem weit verbreiteten
_Copy & Paste_-Ansatz von datenbank&shy;orientierten Konfigurationsystemen:
Sie können Attribute auch für solche Hosts festlegen, die erst *in Zukunft*
hinzukommen werden. Das macht die Arbeit für Sie (oder Ihre Kollegen)
leichter: Einfach den neuen Host in den richtigen Ordner werfen und alle
Einstellungen stimmen automatisch!


=== Berechtigungen

Ein weiterer Zweck der Ordner ist die Vergabe von _Berechtigungen für
das Anlegen und Bearbeiten von Hosts_. Checkmk unterscheidet dabei
die Rechte in WATO von den Kontaktzuordnungen im Monitoring. Denn es
ist nicht immer gesagt, dass die gleichen Personen, die das Recht haben,
einen Host anzulegen, auch diejenigen sind, die im operativen Monitoring
für diesen Host verantwortlich sind. Die Berechtigungen werden in einem
[wato_user#wato_permissions|eigenen Artikel erläutert.]

Das Anlegen neuer Ordner erledigen Sie über ICON[button_new_folder.png]. Die
Optionen sind dieselben wie beim Anlegen neuer Hosts, was wir im Folgenden
detailliert erläutern.

[#create_hosts]
== Hosts anlegen in WATO

Zur Verwaltung der Ordner und Hosts gelangen Sie über das WATO-Modul
ICON[icon_folder.png] [.guihints]#Hosts}}:# 

image::bilder/wato_hosts.jpg[]


Das Anlegen eines neuen Hosts über den Knopf ICON[icon_new.png],
das ICON[button_insert.png] Klonen eines bestehenden Hosts und auch das ICON[icon_edit.png] Editieren
eines Hosts, bringt Sie zu der Seite mit den _Attributen_ des Hosts. Diese
ist in drei Abschnitte eingeteilt:

=== Der Hostname

Am wichtigsten ist der _Hostname_. Dieses Feld dient überall innerhalb
von Checkmk zur _eindeutigen Identifizierung_ des Hosts. Der Hostname
wird in interne Referenzen eingetragen, als Teil von URLs verwendet, dient
als Teil von Dateinamen und Verzeichnissen, taucht in Logdateien auf usw. Es
gibt zwar eine Funktion, um Hostnamen später zu ändern, dies ist aber ein
aufwendiger und komplexer Vorgang, den Sie vermeiden sollten. Wählen Sie
daher den Namen sorgfältig. Der Hostname _muss nicht unbedingt_ mit
dem DNS-Namen des Hosts übereinstimmen, aber es macht etliche Dinge einfacher.

image::bilder/new_host_1.png[align=center,width=570]

[#dns]
=== Basic Settings: Alias und IP-Adresse

In den [.guihints]#Basic settings# können Sie unter _Alias_ einen alternativen,
beschreibenden Namen für den Host vergeben, welcher an vielen Stellen in
der GUI und in Berichten angezeigt wird. Vergeben Sie kein Alias, so wird als
Alias der Hostname verwendet.


image::bilder/new_host_2.png[align=center,width=570]

Für die Konfiguration der _IP-Adresse_ haben Sie vier Möglichkeiten:

[cols=, ]
|===

  <th style="width:5%">Möglichkeit</th>
  <th style="width:50%">Vorgehen</th>
  <th>DNS passiert</th>


  <td>1
  <td>Sie geben _keine_ IP-Adresse an. Der Hostname muss per DNS auflösbar sein.
  <td>bei {{Activate Changes}}


  <td>2
  <td>Sie geben eine Adresse ein -- in der üblichen Punkt-Notation.
  <td>nie


  <td>3
  <td>Sie geben anstelle einer IP-Adresse einen alternativen
      Hostnamen ein, welcher per DNS auflösbar ist.
  <td>beim Ausführen der Checks


  <td>4
  <td>Über den [wato_rules|Regelsatz] {{Hosts with dynamic DNS lookup during monitoring}} bestimmen Sie
      Hosts für ein dymisches DNS. Das Resultat ist analog zu 3, nur dass für die DNS-Anfrage
      jetzt das Feld _Hostname_ verwendet wird.
  <td>beim Ausführen der Checks
|===

Bei der Methode _Hostname_ verwendet Checkmk eine Cache-Datei, um
wiederholte DNS-Anfragen während des [.guihints]#Activate Changes# zu vermeiden. Dieser Cache
ist sehr wichtig für die Beschleunigung des Vorgangs. Außerdem sorgt
er dafür, dass Sie eine geänderte Konfiguration auch dann aktivieren
können, wenn das DNS einmal nicht funktioniert.

Der Haken ist, dass Checkmk die Änderung einer IP-Adresse im DNS
nicht automatisch mitbekommt. Deswegen gibt es in den Hostdetails
den Knopf ICON[button_update_dns_cache.png], welcher den kompletten
DNS-Cache löscht und beim nächsten [.guihints]#Activate Changes# eine neue
Auflösung erzwingt. Diese Datei liegt übrigens in Ihrer Instanz unter
`~/var/check_mk/ipaddresses.cache`. Das Löschen dieser Datei hat
den gleichen Effekt wie der besagte Knopf.

(CMK) unterstützt übrigens auch Monitoring via *IPv6* -- auch im
Dualstack. Einzelheiten erklärt ein [ipv6|eigener Artikel.]

=== Host tags: Checkmk-Agent oder SNMP

Die letzte wichtige Einstellung geschieht im Kasten [.guihints]#Host tags# (Hostmerkmale). Die hier
angezeigten Merkmale können Sie beliebig erweitern und dazu verwenden,
um über [wato_rules|Regeln] sehr effizient alle Parameter von Hosts und
Services zu konfigurieren.

(CMK) erzeugt für Sie automatisch vier Gruppen von Merkmalen, von denen
*{{Agent type}}*# und *{{IP Address Family}}*# wichtig sind, da
diese bereits über vorhandene Regeln ausgewertet werden und quasi „scharf
geschaltet“ sind. [.guihints]#Criticality# und [.guihints]#Network Segment# sind lediglich
Beispiele.

image::bilder/new_host_3.png[align=center,width=570]

Für den [wato_monitoringagents => {{Agenttype}}]# sind die wichtigsten drei Einstellungen:

[cols=, ]
|===

  <td>{{Check_MK Agent}}<td>Der Host soll über den
  [wato_monitoringagents|(CMK)-Agenten] überwacht werden
  (welcher natürlich dazu installiert sein muss).
  Auch im Falle von _Spezial-Agenten_, wie z.B. beim ESX-Monitoring,
  wählen Sie diese Einstellung.


  <td>{{SNMP}}<td>Der Host soll über [snmp|SNMP] überwacht werden.
   Diese Auswahl lässt in den {{Basic settings}} das Feld {{SNMP Community}}
   auftauchen, mit der Sie die SNMP-Community festlegen können. Da diese
   meist für viele Host gleich ist, empfiehlt sich aber eher, das im Ordner
   zu hinterlegen. Wenn Sie gar nichts spezifizieren, wird automatisch `public`
   angenommen.


  <td>{{No Agent}}
  <td>Solche Host werden agentenlos und nur mit [active_checks|aktiven Checks] überwacht. Regeln
     dafür finden Sie in WATO unter {{Host & Service Parameters|Active checks}}. Wenn
     Sie nicht mindestens einen aktiven Check definieren, so erzeugt (CMK) automatisch
     einen PING-Service.<br><br>
     Die Einstellung {{No Agent}} ist auch die richtige, falls der Host per Huckepackverfahren
     {{(piggyback)}} von einem anderen Host aus überwacht wird. Dies gilt z.B. für VMs von ESX,
     auf denen _kein (CMK)-Agent_ installiert ist.

|===

=== Neuigkeiten ab Version 1.6.0

Bitte beachten Sie, dass ab Version VERSION[1.6.0] von Checkmk der
Eingabedialog für die Hosts etwas logischer aufgebaut ist:

* Die Einstellung für den Agenten finden Sie jetzt im Kasten [.guihints]#Data Sources}}.# 
* Die benutzerdefinierten Hostmerkmale sowie die die vordefinierten Beispielmerkmale [.guihints]#Criticality# und [.guihints]#Networking Segment# finden Sie jetzt im Kasten [.guihints]#Custom Attributes}}.# Dort befinden sich auch die neuen [.guihints]#Labels# (dazu gleich mehr)
* Die IP-Adresse ist umgezogen in den eigenen Kasten [.guihints]#Network Address}}.# 

[#labels]
=== Labels

Ab Version VERSION[1.6.0] von Checkmk gibt es das neue Konzept der [labels|Labels].
Ein Host kann beliebig viele Labels haben. Labels sind ähnlich wie
Hostmerkmale (Tags), müssen aber im Gegensatz zu diesen nicht vordefinert
werden, sonden Sie können Sie frei vergeben.

Geben Sie für den Hosts Labels ein, in dem Sie mit der Maus auf [.guihints]#Add some Label}}# 
klicken. Drücken Sie nach jedem Label *Enter*, um dieses
abzuschließen! Mit den Kreuzchen können Sie Labels entfernen.

image::bilder/wato_host_labels_entry.png[]

Wenn Sie für ein Label eigentlich keinen Wert brauchen, sondern nur wissen
wollen, ob an dem Host ein bestimmtes Label hängt oder nicht, vergeben Sie
z.B.: einfach `yes` als Wert (`vm:yes`). Falls Sie dieses
Schema konsequent einhalten, haben Sie es später leichter, für solche
Labels Bedingungen zu definieren.

Übrigens können Labels auch automatisch an Hosts gehängt werden: zum einen
durch externe Konnektoren, welche automatisch Hosts anlegen (z.B. automatisch
erkannte Hosts in Cloud-Umgebungen), zum anderen durch Regeln.

=== Speichern und weiter

Beim Neuanlegen oder Klonen eines Hosts ist der nächste sinnvolle Schritt immer
[.guihints]#Save & go to Services}}.# Damit gelangen Sie in die automatische Serviceerkennung,
der wir uns im nächsten Abschnitt widmen wollen. [.guihints]#Save & Test# bringt Sie in den
Diagnosemodus, mit dem Sie erstmal testen können, ob Sie mit den gemachten Einstellungen
überhaupt Daten vom Agenten bekommen. Einzelheiten zum Diagnosemodus finden Sie im
[wato_monitoringagents#diagnosticpage|Artikel über die Agenten].


[#services]
== Konfiguration der Services

image::bilder/services_illu.png[align=border,left]

Der nächste Schritt nach dem Anlegen eines Hosts ist die Kon&shy;figuration der
darauf zu überwachenden [.guihints]#Services}}.# Alle Einzelheiten der automatischen
Erkennung und Konfiguration der Services erfahren Sie in einem
[wato_services|eigenen Artikel]. Wir schildern hier nur das Wichtigste.
<br><br><br>

Zur Liste der _konfigurierten_ Services eines Hosts in WATO gelangen
Sie

* mit dem Knopf [.guihints]#Save & go to Services# auf der Detailseite eines Hosts,
* mit dem Knopf ICON[icon_services.png] auf der Detailseite eines Hosts (ohne zu speichern),
* mit dem Symbol ICON[icon_services.png] in der Liste der Hosts in einem Ordner und
* beim Service [.guihints]#Checkmk Discovery# im ICON[icon_menu.png] Menü mit dem Eintrag ICON[icon_services.png] [.guihints]#Edit Services}}.# 

image::bilder/wato_services.png[align=border]

Dazu einige Hinweise:

* Der normale Weg nach dem Anlegen eines *neuen* Hosts ist der Knopf [.guihints]#Save manual check configuration}},# welcher alle gefundenen Services zur Überwachung übernimmt ({{Available (missing) services}}).# 

* Wenn Sie die Seite für einen bestehenden Host aufrufen, bei dem Services gefunden wurden, die aktuell nicht überwacht werden, ist der Knopf [.guihints]#Activate missing# sinnvoll. Dieser fügt die fehlenden Services hinzu.

* Der Knopf [.guihints]#Full scan# sorgt dafür, dass frische vollständige Daten vom Zielgerät geholt werden. Denn um einen schnellen Seitenaufbau zu ermöglichten, arbeitet Checkmk mit gecachten Dateien, die beim normalen Monitoring aufgezeichnet werden. Bei SNMP-Geräten löst der Knopf eine aktive Suche nach neuen Check-Plugins aus und findet eventuell weitere Services.

* [.guihints]#Automatic Refresh# ist das Gleiche wie ein Entfernen und Neuermitteln aller Services. Das ist bei Services nützlich, die sich bei der Erkennung einen aktuellen Zustand merken (z.B. der aktuelle Zustand von Switchports).

* Über die Checkboxen können Sie einzelne Services an- oder abwählen. Dies ist nur eine vorübergehende Lösung, da die Serviceerkennung fehlende Services immer wieder aufzeigen wird. Ein permanentes Ignorieren erfordert das Anlegen einer _Regel_ und geschieht mit dem ICON[button_ignore.png] Symbol.

* Nach jeder Änderung ist wie immer ein [.guihints]#Activate Changes# nötig, um diese wirksam zu machen.

* Alles Weitere erfahren Sie im Artikel über die [wato_services|Service-Konfiguration.]

[#bulk_operations]
== Bulkoperationen

Gelegentlich kommt es vor, dass Sie Dinge wie Löschen, Verschieben,
Editieren oder Service&shy;erkennung für eine ganze Reihe von Hosts gleichzeitig
machen möchten. Dazu bietet WATO sogenannte _Bulkoperationen_. Diese
beziehen sich immer auf die Hosts, die direkt in einem Ordner liegen. Sie können
die Auswahl einschränken: durch die Eingabe eines Suchtexts links von [.guihints]#Search}}# 
oder durch Checkboxen, welche Sie dazu mit ICON[icon_checkbox.png] aktivieren. Durch
einen anschließenden Klick auf einen der Knöpfe in der Bulk-Leiste wird dann die Operation
für alle Hosts ausgeführt oder zumindest eingeleitet.

image::bilder/wato_bulk_operations.png[align=border]

Hier einige Hinweise zu den nicht ganz offensichtlichen Operationen:

=== Edit und Cleanup

[.guihints]#Edit# ermöglicht das Ändern eines oder mehrerer Attribute auf allen gewählten Hosts. Das Attribut
wird dadurch in die Hosts explizit eingetragen. Achtung: Es ist
ein Unterschied, ob ein Host ein Attribut von einem Ordner _erbt_ oder es _explizit_
gesetzt ist. Warum? In letzterem Fall wird eine Änderung der Attribute im Ordner keine
Wirkung haben, da Werte, die direkt beim Host festgelegt sind, immer Vorrang haben.

Aus diesem Grund gibt es auch die Operation [.guihints]#Cleanup}}.# Damit entfernen Sie
von den ausgewählten Hosts explizite Attribute und setzen die Vererbung wieder
in Kraft. Das Gleiche würden Sie erreichen, wenn Sie jeden Host einzeln
auswählen und die Checkboxen bei den betroffenen Attributen abwählen würden.

Generell ist es eine gute Idee, so wenig explizite Attribute wie möglich zu
verwenden. Wenn alles korrekt über die Ordner vererbt wird, vermeidet das
Fehler und ermöglicht das bequeme Aufnehmen von neuen Hosts.

=== Discovery

Details hierzu erfahren Sie im Artikel zu den [wato_services#bulk_discovery|Services.]


[#search]
== Hostsuche in WATO

WATO bietet eine eigene Suchfunktion für _konfigurierte_ Hosts, mit der
Sie über Ordnergrenzen hinaus suchen können. Warum können Sie
nicht einfach über die Ansichten im Monitoring suchen? Um einen einzelnen Host
zu suchen, geht das sicher auch. Über das Symbol ICON[icon_wato.png] gelangen
Sie dann zu diesem Host in WATO.

Aber erinnern wir uns: Im
[wato|Einleitungsartikel zu WATO] haben wir gesehen, dass die
Hosts in der _Konfi&shy;gurations&shy;umgebung_ nicht unbedingt die gleichen sind,
wie im _operativen Monitoring_. Außerdem bietet die WATO-Suche die Möglichkeit,
mit den gefundenen Hosts sogleich Bulkoperationen durchzuführen.

Die Suche erreichen Sie über den Knopf ICON[button_search.png], den
Sie in jedem Ordner finden. Die Suche geht immer vom aktuellen Ordner aus rekursiv
in alle Unterordner. Um global zu suchen, verwenden Sie einfach die Suche vom
Hauptordner aus. Beim Feld [.guihints]#Hostname# gilt hier eine _Infix-Suche_ -- der
eingegebene Text muss nur im Hostnamen enthalten sein. Ferner können Sie die
Suche auch über Merkmale oder andere Attribute einschränken:

image::bilder/wato_search.png[align=border]

Alle Bedingungen werden mit _UND_ verknüpft. Das Beispiel aus der Abbilung
sucht also alle Hosts mit dem Merkmal [.guihints]#Test system}},# welche gleichzeitig [.guihints]#ora# in ihrem
Namen haben.

Die Ergebnisliste verhält sich fast wie ein normaler Ordner. Das
bedeutet, dass Sie hier mit _Bulkoperationen_ arbeiten können,
um z.B. alle gefundenen Hosts in einen bestimmten Ordner zu verschieben.
Wenn Ihnen das Ergebnis nicht gefällt, können Sie die Suche jederzeit mit
ICON[button_refine_search.png] anpassen und verfeinern.


[#import]
== Import von Hosts über CSV-Datei

Wenn Sie eine größere Anzahl von Hosts aus einem früheren Monitoringsystem
oder einer Excel-Tabelle übernehmen möchten, können Sie sich die Arbeit einfacher
machen, indem Sie Hosts mithilfe einer CSV-Datei importieren. Checkmk ist beim
Einlesen von CSV-Dateien recht flexibel. Im einfachsten Fall haben Sie schlicht eine
Datei, in der in jeder Zeile ein Hostname steht, der per DNS auflösbar ist:

.import.csv

----myserver01
myserver02
myserver03
----

Es ist aber auch möglich, beim Import gleich weitere Attribute zu übernehmen.
Wenn die CSV-Datei in der ersten Zeile Namen der Attribute
enthält, kann Checkmk diese sogar automatisch zuordnen. Dabei versucht Checkmk
tolerant gegenüber einer genauen Schreibweise zu sein. In folgender Datei
kann WATO automatisch alle vier Spalten korrekt zuordnen:

.import.csv

----hostname;ip address;alias;agent
srvlnx17;10.0.0.10;web99;cmk-agent
srvlnx18;10.0.0.32;Backupserver;cmk-agent
switch47-11;;Backpserver23;snmp-only
----

Das Vorgehen ist wie folgt: Wählen oder erstellen Sie einen Ordner, in den der
Import erfolgen soll. Wechseln Sie in diesen Ordner und klicken Sie auf ICON[icon_bulk_import.png].
Im folgenden Dialog laden Sie entweder die Datei hoch oder wählen [.guihints]#Content of CSV file# und
kopieren den Inhalt in das Feld, das nun erscheint.
Sie können auf den neu importierten Hosts sogleich eine automatische Serviceerkennung
ausführen lassen. Dafür sorgt die Option [.guihints]#Perform automatic service discovery}}:# 

image::bilder/wato_bulk_import_step1.png[]

Die Auswahl eines Trennzeichens im nächsten Schritt ist hier nicht notwendig,
weil dieses automatisch erkannt wird. Wählen Sie die Option [.guihints]#Has title line}}:# 

image::bilder/wato_bulk_import_step2.png[]

Ein Klick auf [.guihints]#Update preview# zeigt Ihnen nun folgende Tabelle:

image::bilder/wato_bulk_import_step3.png[align=border]

Falls die automatische Erkennung einer Spalte nicht klappt, können Sie auch
manuell das Attribut auswählen, welches zugeordnet werden soll. Bei den Hostmerkmalen
muss in der CSV-Datei unbedingt der interne Name des Merkmals stehen (hier z.B. `cmk-agent`
und nicht [.guihints]#Check_MK Agent (Server)}}).# Wie die internen Namen genau lauten, können
Sie im WATO-Modul der ICON[icon_hosttag.png] Hostmerkmale nachsehen.

Falls Sie weiter oben die Option [.guihints]#Perform automatic service discovery}}# 
gewählt haben, kommt nun noch die gleiche Maske, wie bei der
[wato_services#bulk_discovery|{{Bulk discovery}}]. Nach Abschluss der
Erkennung fehlt nur noch das gewohnte [.guihints]#Activate Changes# und alle neuen
Hosts sind im Monitoring!


[#parents]
== Parents anlegen

=== Parents manuell anlegen

Wie [monitoring_basics#parents|Parents] funktionieren, haben Sie bereits
gelernt und auch was es mit Zuständen von [monitoring_basics#hosts|Hosts]
und [monitoring_basics#notifications|Alarmierungen] auf sich hat, ist bekannt. Aber wie
legt man Parents überhaupt an? Die Antwort ist typisch Checkmk: Es gibt
unterschiedliche Vorgehensweisen: Manuell, per Scan oder über die Web-API.

Einen Parent für einen einzelnen Host legen Sie so fest: Öffnen Sie die
Eigenschaften des gewünschten Hosts über [.guihints]#WATO => Hosts}}.# Im Bereich
[.guihints]#Basic Settings# tragen Sie den Parent über seinen Namen oder die IP-Adresse
ein. Sobald ein Parent angegeben wird, erscheint ein weiteres Eingabefeld
für einen zusätzlichen Parent.

*Wichtig*: Es werden immer nur direkte Parent-Hosts angegeben.

image::bilder/parents_host_config.png[]

Analog lassen sich Parents auch in den Eigenschaften von Ordnern festlegen
und auf die beinhalteten Hosts vererben. Wie das geht, haben Sie bereits im
Abschnitt zu der [wato_hosts#inheritance|Host-Verwaltung] gelesen.


=== Parents per Scan anlegen lassen

Wenn Sie Ihr Monitoring frisch aufsetzen und von vorne herein sauber mit
Ordnern und Parents planen, werden Sie mit der Parent-Vererbung über Ordner
vermutlich gut zurecht kommen. Sie können Parents aber auch über einen
Scan automatisch einrichten lassen. Den [.guihints]#Parent scan# finden Sie unter
[.guihints]#WATO => Hosts# in jedem einzelnen Ordner.

Der Scan sucht über das IP-Protokoll auf dem Network Layer des OSI-Modells
(Schicht 3) via _traceroute_ nach dem letzten Gateway vor einem
Host. Wird ein solches Gateway gefunden und gehört dessen Adresse zu
einem Ihrer überwachten Hosts, so wird dieser als Parent gesetzt. Bekommt
traceroute von den Hops vor dem anvisierten Host keine Informationen, so
wird der letzte erfolgreiche Hop verwendet.

Wird jedoch kein Gateway mit einer überwachten IP-Adresse gefunden, legt
(CMK) per Default einen künstlichen Ping-only-Host an, standardmäßig
im Ordner [.guihints]#Parent}},# der gleich mit angelegt wird.

Diese Standardeinstellung kann auch zu unerwünschten Ergebnissen
führen: Nehmen Sie ein typisches, kleines Netzwerk mit dem Adressbereich
_192.168.178.0/24._ Wird in dieses Monitoring nun ein Host mit einer
Adresse aus einem anderen Adressbereich aufgenommen, der nicht angepingt
werden kann, so versucht der Scan den Weg über den Router -- und findet dort
nur den Knotenpunkt des Netz-Providers. Und so könnte dann zum Beispiel
ein Telekom-Server aus dem WAN-Bereich als Parent für diesen Host gesetzt
werden. Natürlich können Sie diese Option deaktivieren.

Wenn Sie einen Ordner mit neuen Hosts auf Parents scannen wollen, gehen Sie
wie folgt vor:

Navigieren Sie zunächst in den gewünschten Ordner und klicken Sie auf
ICON[icon_parentscan.png] [.guihints]#Parent scan}}.# 

image::bilder/parents_folder_scan3.png[align=border]

Anschließend öffnet sich die Scan-Konfiguration. Um alle Hosts in allen
Unterordnern komplett neu einzuscannen, unabhängig von eventuell manuell
gesetzten Parents, wählen Sie unter [.guihints]#Selection# die Optionen [.guihints]#Include all subfolders}}# 
und [.guihints]#Scan all hosts}}.# Im Bereich [.guihints]#Performance# können
Sie die Scan-Dauer anpassen, die bei vielen Hosts recht lang ausfallen kann.

Unter [.guihints]#Creation of gateway hosts# bestimmen Sie, ob, wie und unter welchem
Alias neu erzeugte Parent-Hosts erzeugt werden. Deaktivieren Sie die Funktion,
wenn Sie Parents auf überwachte Hosts beschränken wollen.

image::bilder/parents_configuration.png[]

Starten Sie nun den Scan. Die Ausgabe des Scans können Sie live
mitverfolgen. Nach Abschluss müssen Sie die Änderungen wie üblich über
[.guihints]#Activate Changes# aktivieren. Anschließend sehen Sie die
konfigurierten Parents sowie gegebenenfalls einen neuen Ordner [.guihints]#Parents}}# 
unter [.guihints]#WATO => Hosts}}.# 

image::bilder/parents_host_list.png[align=border]

Damit ist der Scan abgeschlossen.

Nach einem durchgeführten Scan werden die Parent-Child-Beziehungen automatisch
als Topologie-Karte visualisiert, die Sie über [.guihints]#Views => Network Topology}}# 
aufrufen können.

image::bilder/monitoring_parents.png[align=border]

*Tipp:* Wenn die Ergebnisse des Scans an einigen Stellen nicht plausibel
erscheinen, ist ein manueller traceroute-Aufruf bisweilen hilfreich, um die
einzelnen Hops nachzuvollziehen.

Sie können übrigens auch, statt eines ganzen Ordners, nur eine Auswahl von
Hosts scannen lassen: Aktivieren Sie zunächst über ICON[icon_checkbox.png]
die Checkboxen, markieren Sie die gewünschten Hosts und starten Sie
anschließend die Gruppenaktion [.guihints]#Parentscan}}.# 

image::bilder/parents_scan_selection.png[align=border]


=== Parents ohne WATO anlegen

Für versierte Nutzer gibt es die Möglichkeit, Parents über die
[web_api_references|Web-API] zu konfigurieren.


[#rename]
== Hosts umbenennen

Das Umbenennen von Hosts -- auf den ersten Blick eine einfache Sache -- entpuppt
sich bei näherem Hinsehen als eine erstaunlich komplexe Operation. Der
Grund ist, dass Checkmk den Namen des Hosts als eindeutigen Schlüssel
für den Host verwendet -- und das an zahlreichen Stellen. Dazu gehören auch
Logdateien, Dateinamen, Konfigurationsregeln, BI-Aggregationen, Berichte,
Dashboards und vieles mehr. Auch taucht der Hostname in URLs auf.

Um einen Host an allen Stellen sauber umzubenennen, besitzt WATO eine eigene
Funktion. Sie können einen einzelnen Host über den Knopf ICON[button_rename_host.png]
in dessen Detail-Ansicht umbenennen oder über den Knopf
ICON[button_bulk_renaming.png] in einem Order gleich eine Vielzahl von Hosts
gleichzeitig.

Das [.guihints]#Bulk renaming# erlaubt dabei über intelligente Operationen systematische
Namensanpassungen. Im Feld [.guihints]#Hostname matching# geben Sie zunächst optional
einen regulären Ausdruck an, der auf *den Anfang* der Hosts matcht, welche
Sie umbenennen möchten -- hier im Beispiel also alle Hosts, die mit `mysrv`
beginnen. Dann fügen Sie eine oder mehrere Operationen ein, die *der
Reihenfolge nach* auf die Hostnamen angewendet werden sollen. In folgendem
Beispiel wird von allen Hosts zunächst alles ab dem ersten `.` abgeschnitten
und danach die Endung `.servers` angefügt:

image::bilder/wato_bulk_renaming.png[]

Es stehen zahlreiche Operationen zur Verfügung. Bitte aktivieren Sie die
ICON[icon_help.png] Online-Hilfe und wählen Sie eine Operation aus, um eine
Erklärung dazu zu bekommen. Nach der obligatorischen „_Sind Sie sicher..._-Abfrage“&nbsp;&#8230;

image::bilder/wato_host_rename_sure.png[]

&#8230; kann es eine Weile dauern. Während der Umbenennung wird das Monitoring *komplett gestoppt!*
Dies ist notwendig, um alles in einem konsistenten Zustand zu halten. Am
Ende erhalten Sie eine Übersicht, wo genau Umbenennungen stattgefunden
haben:

image::bilder/wato_host_rename_finish.png[]


== Hostgruppen

=== Wofür Hostgruppen?

Hostgruppen gehören zu den [monitoring_basics|Grundlagen des Monitorings mit Checkmk].
Sie ermöglichen eine zweite Ebene der Gruppierung von Hosts
quer über die Ordnerstruktur. Dazu ein Beispiel: Sie haben über die Ordner
Ihre Standorte abgebildet. Nun wollen Sie aber alle Linux- oder bestimmte
Application-Server gemeinsam betrachten. Über eine Hostgruppe können Sie
dann entsprechende [views|Ansichten] generieren, NagVis-Karten erstellen
sowie [notifications|Alarmierungen] und [alert_handlers|Alerthandler]
anpassen. Im Gegensatz zu [wato_rules#hosttags|Hostmerkmalen] tauchen
Hostgruppen nicht als Auswahlkriterien in Regeln auf: Hostgruppen dienen
den Ansichten, Hostmerkmale der Konfiguration. Sie finden die Hostgruppen
unter [.guihints]#WATO => Host & Service Groups}}:# 

image::bilder/hostgroups_list2.png[align=border]


=== Hostgruppen anlegen und editieren

Eine neue Hostgruppe legen Sie über ICON[button_new_hostgroup.png] an.
Das Anlegen ist trivial und beschränkt sich auf die Vergabe eines eindeutigen
Namens, welcher später nicht mehr geändert werden kann, sowie eines Alias:

image::bilder/hostgroups_config.png[]

Wie üblich müssen Sie die Änderungen anschließend noch über
[.guihints]#Activate Changes# aktivieren.


=== Hosts in Hostgruppe aufnehmen

Um Hosts in Hostgruppen aufzunehmen, bemühen Sie den
[wato_rules|Regelsatz] {{Assignment of hosts to host groups}}, den Sie
unter [.guihints]#WATO => Host & Service Parameters => Grouping# finden.  Legen Sie über
ICON[button_create_rule_in_folder.png] eine neue Regel im gewünschten Ordner
an. Zunächst bestimmen Sie im Bereich [.guihints]#Assignment of hosts to host groups}},# 
welcher Hostgruppe Hosts zugeordnet werden sollen; im Beispiel etwa der
Gruppe _myhostgroup_ beziehungsweise dessen Alias _My Host Group:_

image::bilder/hostgroups_rule_assignment.png[]

Anschließend kümmern Sie sich im Bereich [.guihints]#Conditions# um den oder
die Filter.  Sie können Hosts nach Hostmerkmalen und Ordner filtern oder
spezifische Hosts angeben. Filter lassen sich natürlich auch kombinieren,
um die Gruppe einzuschränken. Möchten Sie Hosts mit zwei Merkmalen aus ein
und derselben Merkmalsgruppe in die Hostgruppe aufnehmen, müssen Sie zwei
separate Regeln anlegen. Generell sind die Gruppenzuordnungen kumulativ. Hosts
können in mehreren Gruppen sein und Gruppen von mehreren Regeln gefüllt
werden. Sie können Hosts auch in Form von [regexes|Regulären Ausdrücken]
angeben, um etwa alle Hosts mit _backup_ und ohne _testing_ im
Namen mit einem Eintrag zu erwischen.

image::bilder/hostgroups_rule_conditions.png[]


=== Hostgruppen eines Hosts prüfen

Das Ergebnis Ihrer Zuordnungen können Sie auf der Statusseite eines Hosts
prüfen, die Sie über ICON[button_host_status.png] in den Hosteigenschaften
aufrufen. Hier finden Sie, standardmäßig weit unten, die Zeile
[.guihints]#Host groups the host is member of}}:# 

image::bilder/hostgroups_host_status.png[align=border]


=== Hostgruppen einsetzen

Wie oben bereits erwähnt, können Sie Hostgruppen an drei Stellen einsetzen:
Es lassen sich [views|Ansichten] erstellen, NagVis-Karten bauen und sie
lassen sich als Filter in Regeln für [notifications|Benachrichtigungen] und
[alert_handlers|Alerthandler] nutzen.  Wichtig ist dabei lediglich die Angabe
von [.guihints]#Hostgroups# als Datenquelle.  Im [.guihints]#Views}}-Widget# finden Sie freilich
auch fertige Ansichten, beispielsweise eine praktische Zusammenfassung:

image::bilder/hostgroups_view_summary.png[align=border]

Über einen Klick auf die Namen der Hostgruppen gelangen Sie zur vollständigen
Ansicht der Hosts dieser Gruppe.

Bei der Nutzung in NagVis-Karten bekommen Sie als Ergebnis beispielsweise
Zusammenfassungen von Hostgruppen per Hover-Menü über ein einzelnes Icon:

image::bilder/grouping_hostgroup_nagvis.png[]

Wenn Sie Hostgruppen in [notifications|Alarmierungen]
und [alert_handlers|Alerthandlern] nutzen, stehen sie als
[wato_rules#conditions|Bedingungen/Filter] zur Verfügung:

image::bilder/hostgroups_notifications_rule2.png[]


== Die Ordnerstruktur in der Monitoring-Ansicht

Die Baumstruktur, die sich durch die Folder ergibt, ist für Ihre Benutzer
auch im Monitoring sichtbar. Zum Einen gibt es in allen [views|Ansichten]
einen Filter [.guihints]#WATO Folder}},# mit dem Sie die aktuelle Ansicht auf die Hosts
unterhalb von einem bestimmten Ordner einschränken können:

image::bilder/filter_wato_folder.png[align=center,width=50%]

Zum anderen können Sie auch über das Seitenleistenelement [.guihints]#Folders}}# 
die Ansicht auf der rechten Seite auf einen Folder einschränken:

image::bilder/folders_snapin.png[align=center,width=50%]

Dieses Element arbeitet mit dem Element [.guihints]#Views# zusammen. Ein einmal
gewählter Order bleibt erhalten, auch wenn Sie eine andere Ansicht
wählen. Das klappt sogar für Dashboards. Probieren Sie es aus!
