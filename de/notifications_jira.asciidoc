include::global_attr.adoc[]
= Alarmierung per Jira (Notifications)
:revdate: 2019-11-20
:title: Alarmierung per Jira
:description: Die neue Jira-Integration von Checkmk ermöglicht das Erstellen und Schließen von Issues aus der Monitoring-Lösung heraus.

{related-start}
link:notifications.html[Alarmierung (Notifications)]
{related-end}

== Einleitung

[{image-left}]
image::jira_logo.png[width=7.5%]
Wenn Sie die Software Jira zur Fehlerverfolgung, Problemverfolgung oder zum
Projektmanagement verwenden, können Sie mit der {CMK} Enterprise Version ab
Version VERSION[1.6.0] Alarmierungen aus {CMK} heraus an Jira senden.

Unterstützt werden dabei folgende Optionen:

* [.guihint]#Issues# für Host- oder Service-Probleme erzeugen.
* Issues mit definierter [.guihint]#Priority# erstellen.
* Issues mit einem definierten [.guihint]#Label# erstellen.
* Links auf Host/Services in Checkmk aus den erzeugten Jira-Issues setzen.
* Eine [.guihint]#Resolution# im Issue bei eintretenden OK-Zuständen setzen.

== Konfiguration

Um die Anbindung von {CMK} an Jira einzurichten, legen Sie in Jira
zunächst zwei neue Felder (Fields) an und ermitteln bestimmte Jira-_IDs._
Außerdem konfigurieren Sie das Alarmierungsprogramm in {CMK}.

=== Einrichten der benutzerdefinierten Felder in Jira

{CMK} muss bei der Interaktion mit Jira wissen, welche Alarmierungen bereits
einen Issue erzeugt haben und welche nicht. Damit das möglich wird, müssen Sie
in Jira zwei sogenannte [.guihint]#Custom fields,# also benutzerdefinierte Felder,
anlegen.

Öffnen Sie dazu in Jira als administrativer Nutzer den Punkt [.guihint]#Administration#
in der Kopfleiste.

image::jira_admin_settings.png[width=300]

Wählen Sie nun [.guihint]#Issues# und navigieren Sie im Abschnitt [.guihint]#Fields# zu
[.guihint]#Custom Fields.# Über [.guihint]#Add Custom Field# können Sie ein neues,
benutzerdefiniertes Feld anlegen.

Wählen Sie im nächsten Fenster [.guihint]#All,# damit alle Feldarten
angezeigt werden.

image::jira_custom_field.png[]

Suchen Sie hier die Auswahlmöglichkeit [.guihint]#Number Field# und drücken
Sie den Button [.guihint]#Next.#

image::jira_custom_field_2.png[]

Im Abschnitt [.guihint]#Name# tragen Sie den gewünschten Namen ein, hier im Beispiel
`CMK_HOST_FIELD`. Die [.guihint]#Description# können Sie optional mit einer
Beschreibung des benutzerdefinierten Felds befüllen.

Da Sie auch für Service-Alarmierungen ein solches Feld benötigen, wiederholen
Sie das Anlegen mit einem entsprechenden Eintrag für Services, z.B. mit
dem Feldnamen `CMK_SVC_FIELD`.

Damit {CMK} Issues in Jira erzeugen kann, benötigen Sie noch folgende
Jira-IDs:

* Project ID
* Issuetype ID
* Priority ID
* Custom Host Field ID
* Custom Service Field ID

Es gibt zwei Wege, um diese IDs zu ermitteln.

==== IDs über [.guihint]#Jira GUI# ermitteln (benötigt administrativen Account in Jira)

Atlassian, der Hersteller von Jira, bietet für diesen Weg eine eigene
link:https://confluence.atlassian.com/jirakb/how-to-get-project-id-from-the-jira-user-interface-827341414.html[Anleitung].

==== IDs über externes Skript ermitteln

Sie können die IDs auch gesammelt mit einem Skript abfragen:

.example_script.py
[{file}]
----
#!/usr/bin/env python

import requests
import sys
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

user = "JIRA_USERNAME"
password = "JIRA_PASSWORD"
project_key = "PROJECT_KEY"
jira_instance = "https://jira.server.your-domain.de"
custom_field_1 = "CMK_HOST_FIELD"
custom_field_2 = "CMK_SVC_FIELD"

def handle_response(user, password, jira_instance, what):
    url = "%s/rest/api/2/%s" % (jira_instance, what)
    sess = requests.Session()
    sess.auth = (user, password)
    response = sess.get(url, verify=False)

    return response

sys.stdout.write("=== IDs for project %s ===\n" % project_key)
infotext = ""
for section, id_name in [ ("Project_ID", "project"),
                          ("Issue", "issuetype"),
                          ("Priority", "priority"),
                          ("Field", "field"),
                        ]:

    json_response = handle_response(user,password,jira_instance,id_name).json()
    if id_name == "project":
        infotext = ""
        for project in json_response:
            if project["key"] == project_key:
                infotext += "%s\n\n" % project.get("id", "Project ID not found")
        if not infotext:
            infotext += "Project ID not found, project name existing?\n\n"
    else:
        types = ""
        for line in json_response:
            if id_name == "field":
                if line["name"].lower() == custom_field_1.lower() or \
                    line["name"].lower() == custom_field_2.lower():
                    types += "%s: %s\n" % (line["name"], line["id"].split("_")[1])
            else:
                types += "%s: %s\n" % (line["name"], line["id"])

        infotext += "=== %s types\n%s\n" % (section, types)

sys.stdout.write(infotext)
----

Die Ausgabe des Skripts sieht dann so aus:

[{shell}]
----
=== IDs for project MY_PROJECT ===
Project ID: 10401

=== Issue types
Test case: 10600
Epic: 10000
Task: 10003
Sub-task: 10004
Bug: 10006
Story: 10001
Feedback: 10200
New Feature: 10005
Support: 10500
Improvement: 10002

=== Priority types
Blocker: 1
High: 2
Medium: 3
Low: 4
Lowest: 5
Informational: 10000
Critical impact: 10101
Significant impact: 10102
Limited impact: 10103
Minimal impact: 10104

=== Field types
CMK_HOST_FIELD: 10325
CMK_SVC_FIELD: 10000
----

Weitere Informationen zur Jira-API finden Sie
link:https://docs.atlassian.com/software/jira/docs/api/REST/7.12.0[hier.]

=== Einrichten der Alarmierung in {CMK}

Wie Sie Alarmierungen im Allgemeinen einrichten, haben Sie bereits im Artikel
link:notifications.html[Alarmierungen] erfahren. Um die Jira-Alarmierung zu nutzen,
wählen Sie die Alarmierungsmethode [.guihint]#Jira (Enterprise only).#

[{image-border}]
image::jira_notify_rule.png[]

Im Feld [.guihint]#JIRA URL# tragen Sie die URL Ihrer Jira-Instanz ein, also z.B.
`jira.server.your-domain.com`. Bei [.guihint]#User Name# und [.guihint]#Password# hinterlegen
Sie den Benutzernamen und das Passwort für den Zugriff.

Jetzt benötigen Sie die vorher ermittelten IDs für die Felder
[.guihint]#Project ID# und [.guihint]#Issue type ID.#
Die IDs der in Jira angelegten, benutzerdefinierten Felder tragen Sie
entsprechend unter [.guihint]#Host custom field ID# und [.guihint]#Service custom field ID#
ein.

Um in den erzeugten Issues direkt nach {CMK} verlinken zu können, tragen Sie
unter [.guihint]#Monitoring URL# die URL Ihrer {CMK}-Instanz ein, also z.B.
`https://cmkserver/site`.

Mit der Option [.guihint]#Priority ID# können Sie definieren, mit welcher Priorität die
Issues in Jira angelegt werden.

Die Beschreibungen, die in den Issues für Host-
und Service-Probleme erzeugt werden, können Sie über die Optionen
[.guihint]#Summary for host notifications# und [.guihint]#Summary for service notifications#
ändern.

Über den Punkt [.guihint]#Label# können Sie optional definieren, ob Sie bei der
Issue-Erzeugung in Jira Label mit übergeben möchten.

Wenn Sie bei OK-Alarmierungen eine [.guihint]#Resolution# in den Issue eintragen lassen
wollen, können Sie diese Resolution über
[.guihint]#Activate resolution with following resolution transition ID# definieren.
Jira hat dafür folgende Optionen:

* 11 - 'To Do'
* 21 - 'In Progress'
* 31 - 'Done'

Über [.guihint]#Set optional timeout for connections to JIRA# können Sie den
Timeout für Verbindungen zu Jira konfigurieren. Wenn Sie hier nichts
eintragen, gilt der Standard-Timeout von 10 Sekunden.
