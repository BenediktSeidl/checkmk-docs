include::global_attr.adoc[]
= Konfiguration der {CMK} Instanz analysieren
:revdate: draft
:title: Konfiguration der {CMK} Instanz analysieren
:description: Die Funktion "Analyze configuration" prüft die Konfiguration des {CMK} Servers Ihrer Instanz bezüglich Performance, Sicherheit, Prozessorauslastung usw..
// TK: Auf dem Server können Instanzen angelegt werden, nicht umgekehrt:
// TK: Mit der Funktion "Analyze configuration" können Sie die Instanz des {CMK} Servers überprüfen bezüglich Performance, Sicherheit, Prozessorauslastung und mehr.

{related-start}
xref:wato#[Die Konfiguration von Checkmk]
xref:intro_bestpractise#[Best Practices, Tipps & Tricks]
xref:security#[Sicherheit (Security)]
{related-end}

== Einleitung

Wenn Ihre {CMK} Instanz einmal eingerichtet und konfiguriert ist, kommen über kurz oder lang Fragen auf: 
// TK: Hier würde ich mit {CMK} Server statt {CMK} Instanz einsteigen. Instanz wird dann im nächsten Absatz eingeführt.
Geht das nicht schneller? Lässt 
sich das optimieren? Kann man das System sicherer machen?

Ein Ansatz zur Beantwortung dieser Fragen ist die Überprüfung und 
nachfolgende Optimierung der Instanz-Umgebung.
// TK: Optimierung der Instanz-Umgebung. > Optimierung der auf dem {CMK} Server eingerichteten Instanz.
// TK: Instanz-Umgebung würde ich nicht verwenden. Der Begriff ist unklar. Wenn die Instanz mit einer anderen verbunden ist, gehört diese Verbindung ja auch zur Instanz.
// TK: Hier könnte man sehr schön Instanz ins Glossar verlinken, ebenso wie das verteilte Monitoring unten.
// TK: Wie wir die Glossar-Links verwenden wollen, müssen wir besprechen...
Je performanter Ihr 
System ist, um so schneller und effektiver arbeitet es auch. Je verlässlicher Sie Ihre Instanz abgesichert haben, um so beruhigter können Sie damit arbeiten.

{CMK} analysiert schnell und übersichtlich die wesentlichen Parameter der aktuellen Instanz sowie eventuell vorhandener untergeordneter Instanzen, wenn es sich um ein xref:distributed_monitoring#[verteiltes Monitoring] handelt.
// TK: Bin echt kein Experte des verteilten Monitoring: Aber Unterordnung würde ich nicht verwenden, sondern: vorhandener verbundener Instanzen

Die Hosts und Services innerhalb Ihrer Instanz(en) sind von dieser Prüfung nicht betroffen, sie werden in den xref:views#[Ansichten der Hosts und Services] dargestellt. Die Ergebnisse der hier behandelten Instanz-Checks werden auf der Seite [.guihint]#Setup > Maintenance > Analyze configuration# angezeigt.

Hinweis: Beim Aufruf von [.guihint]#Analyze configuration# wird stets der aktuelle Zustand aller Checks geprüft und angezeigt. Daher kann es nach dem Aufruf des Menüeintrags ein wenig dauern, bis die Seite mit den Ergebnissen angezeigt wird.

image::analyze_config.png[alt="Übersicht der Konfigurationsanalyse"]
// TK: Bitte alle Alt-Texte mit Punkt abschließen.
// TK: Im Vergleich zum 2. Screenshot scheint mir die Schrift etwas klein zu sein.

== Die Anzeige interpretieren

Die analysierten Instanzdaten sind als sogenannte Checks in verschiedene Kästen unterteilt.
// TK: Ich würde Kategorie statt Kasten verwenden. Kasten ist ja eine (wenn auch nicht sonderlich gelungene) Beschreibung der GUI. Hier geht es um eine inhaltliche Beziehung.

Jeder Check hat eine farbige Zustandsanzeige.
Folgende Zustände kann ein Check in der Analyse haben:

[cols="11,8,~"]
|===
|Zustand |Farbe |Bedeutung 

|{OK} |grün |Der Check ist vollständig in Ordnung. Alle überprüften Werte werden als optimal eingestuft.
|{WARN} |gelb |Der Check ist prinzipiell in Ordnung, aber {CMK} hat Potential für Verbesserungen erkannt.
|{CRIT} |rot |Der Check hat kritische Werte erkannt. Diese sollten geprüft und gegebenenfalls behoben werden, um ein reibungsfreies Arbeiten von {CMK} zu gewährleisten.
|===

Betrachten wir den Check [.guihint]#Backup configured# in einem verteilten Monitoring mit zwei Instanzen:

image::analyze_config_backup.png[alt="Detailansicht 'Backup configured'"]
// TK: Obwohl ich es so vorgeschlagen habe, finde ich den Info-ausgeklappten Screenshot nun doch suboptimal, weil der ganze Text im Screenshot zu sehr von dem ablenkt, was Du beschreibst.
// TK: Außerdem wird das i erst im nächsten Kapitel kurz angerissen. Du könntest diesen Screenshot also ins nächste Kapitel schieben und hier einen eingeklappten Screenshot verwenden.

Dieser Check ist im Zustand {WARN}, daher wird hinter dem {Warn} ein icon:button_ackn_test[alt="Knopf zur Quittierung der Meldung."]-Knopf zur Quittierung angezeigt.
// TK: {Warn} scheint ja zu funktionieren. Trotzdem würde ich nur Großbuchstaben nehmen.
Auch für Checks im Zustand {CRIT} wird dieser Knopf angezeigt.
Durch die Quittierung verschwindet die gelbe bzw. rote Farbe des Zustands. Der Eintrag an sich bleibt erhalten, wird aber optisch dezenter. Ist die Quittierung deaktiviert, so wechselt der Knopf auf die Darstellung icon:button_unackn_test[alt="Knopf zur Rücknahme der Quittierung."]. Mit diesem Knopf heben Sie die Deaktivierung dann auch wieder auf.
// TK: Quittierung statt Deaktivierung

Generell ist die Prüfung der Systemumgebung auf alle Parameter sinnvoll. Wollen Sie jedoch einzelne Checks nicht (erneut) durchführen lassen, können Sie durch Klick auf den zugehörigen icon:button_disable_test[alt="Knopf zum Ausschalten eines Tests."]-Knopf jeden der Checks ausschalten. So schalten Sie zum Beispiel den Check [.guihint]#Backup configured# aus, wenn in Ihrem Unternehmen eine andere Lösung zur Backup-Erstellung genutzt wird.

== Die Checks im Detail

Zu jedem Check erhalten Sie mit einem Klick auf den zugehörigen icon:button_info[alt="Knopf zum Einblenden weiterer Informationen."]-Knopf weitere Details zu den festgestellten Werten, eine Einschätzung des Status sowie Hinweise zur Optimierung. Vieles lässt sich damit bereits verstehen und bearbeiten.
Für die folgenden Themen bietet das Handbuch zusätzlich ergänzende Artikel:

// TK: Hinweise zur Tabelle:
// TK: Mit [cols="15,28,~",options="header"] kannst Du die 1. Tabellenzeile explizit als Header definieren und kannst Dir dann die folgende Leerzeile schenken.
// TK: Du kannst die Einträge Performance und Security mit den darunterliegenden leeren Zellen verbinden (straddeln oder spanning). Asciidoc-Syntax ist schlimm:
// TK: https://docs.asciidoctor.org/asciidoc/latest/tables/span-cells/
// TK: Ich habs aber in meinem REST-API-Artikel geschafft:
// TK: https://docs.checkmk.com/latest/de/rest_api.html#rest-web-api
[cols="15,28,~"]
|===
|Kasten |Check |weiterführende Informationen / Handbuchreferenzen
// TK: weiterführende Informationen / Handbuchreferenzen > Weiterführende Informationen
|Connectivity |Site connectivity |Nutzen Sie das verteilte Monitoring, so basiert eine Meldung möglicherweise auf xref:distributed_monitoring#wan[instabilen oder langsamen Verbindungen].
|Deprecations |Flexible and plain email notifications |Standardmäßig sind in neuen {CMK} Installationen die xref:notifications#rules[Benachrichtigungen per Regeln] bereits aktiviert. Anderenfalls aktivieren Sie diese, indem Sie in den [.guihint]#xref:wato[Global settings]# die Einstellung [.guihint]#Notifications > Rule based notifications# auf *on* setzen.
// TK: Falsche Link-Syntax für wato. Der Link ist aber eh nicht wirklich hilfreich. Würd ich weglassen.
|Performance |Apache number of processes |xref:cmc_differences#numbers[Zahl der Hilfsprozesse richtig einstellen]
// TK: Der Link hat nix mit den Apache Prozessen zu tun.
| |Check helper usage |xref:cmc_differences#[Besonderheiten des CMC]
| |Checkmk checker count |xref:cmc_differences#fetcher_checker[{CMK} Fetcher und {CMK} Checker]
| |Checkmk checker usage |xref:cmc_differences#fetcher_checker[{CMK} Fetcher und {CMK} Checker]
| |Checkmk fetcher usage |xref:cmc_differences#fetcher_checker[{CMK} Fetcher und {CMK} Checker]
| |Checkmk helper usage |xref:cmc_differences#checkhelper[Checkmk helper usage]
// TK: Der letzte Link ist falsch weil Check helper und Checkmk helper verschiedene Dinge sind:
// TK: Checkmk helper gabs nur in der 1.6 und wurden in der 2.0 durch Checkmk checker und Checkmk fetcher ersetzt: update_20#fetcher_checker
// TK: Die Benamsung ist eh eine Katastrophe. Und die GUI schleppt den alten Begriff auch noch mit. Schlimmschlimm.
// TK: Ausweg wäre hinter Check helper usage einen Link nach cmc_differences.html#aux_processes einzutragen und die 4 Tabellenzellen darunter wegzustraddeln. Ist ja eh immer das gleiche Ziel.
| |Number of users |xref:ldap#[Benutzerverwaltung mit LDAP/Active Directory]
|Reliability |Backups configured |xref:backup#[Backups]
|Security |Encrypt backups |xref:backup#[Backups]
// TK: Hier wäre der Link zu backup#backup_config einen Tick treffender...
| |Secure GUI (HTTP) |xref:omd_https#[Weboberfläche mit HTTPS absichern]
|===

// TK: Anmerkungen zum Tabelleninhalt:
// TK: Die 5 CheckCheckmkcheckerfetcherhelper Einträge gibt es nur in der CEE (nicht in der CRE): bitte hinzufügen. dito der Alert handler Eintrag, aber da der eh nicht erwähnt wird, ist es egal.
// TK: Für Livestatus usage könnte livestatus#_verbindung_aufrecht_erhalten_keepalive hilfreich sein, der zumindest die Regel nennt, um die Anzahl zu erhöhen. Das Kapitel hat leider keinen Anker.

Ergänzend finden Sie im Artikel xref:security#[Sicherheit (Security)] einen Überblick über weitere sicherheitsrelevante Themen rund um {CMK}.
