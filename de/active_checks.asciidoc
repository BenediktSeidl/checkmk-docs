= Netzwerkdienste überwachen (Aktive Checks)
:revdate: draft
:title: Monitoring von HTTPS, TCP, SSH, FTP und weitere Diensten
:description: Bei vielen Diensten ist nur sinnvoll, diese von außen auf Funktion oder Antwortzeiten zu überwachen. Hier erfahren Sie, wie das in Checkmk funtioniert.

== Einleitung

### Sk: "über viele Möglichkeiten überwachen" finde ich sehr holprig.

In Checkmk können Sie Ihre Infrastruktur über viele Möglichkeiten überwachen. Die
Überwachung durch einen [wato_monitoringagents#agents|Agenten] oder [snmp|SNMP]
sind dabei nur zwei von [wato_monitoringagents|mehreren Methoden]. Beiden ist
gemein, dass sie einem nur Zustände mitteilen, wie sie der Host von innen heraus
sieht. Sie werden aber sicher einige Dienste kennen, die man nur von außen
sinnvoll überwachen kann. Ob der Webserver läuft lässt sich noch von innen
heraus beantworten. Wie jedoch die Erreichbarkeit und die Antwortzeiten bei dem
eigentlichen Benutzer aussehen, lässt sich auf diese Weise nicht herausfinden.

(CMK) bietet für diese Fälle die aktiven Checks ({{Active Checks}})# 
an. Über diese können Sie Netzwerkdienste direkt und bequem von
außen überwachen und die Daten auf ihrem Host anzeigen lassen. Aktive
Checks sind also kleine Programme oder Skripte, die eine Verbindung
zu einem Dienst im Netzwerk oder Internet aufbauen und dem Nutzer
dann die Monitoringdaten zur Verfügung stellen. Viele der Skripte
und Programme, die Sie in Checkmk finden, stammen ursprünglich von <a
href="https://www.monitoring-plugins.org">www.monitoring-plugins.org</a>. Da
(CMK) aber generell kompatibel zu Nagios ist, können Sie alle Plugins nutzen,
die auch unter Nagios funktionieren.

Die wichtigsten dieser Programme und Skripte sind in Checkmk direkt in der
Weboberfläche verfügbar. Hier eine kleine Auswahl:

### SK: Ich weiß, dass diese Checks in CMK mal so und mal so geschrieben werden, aber im Handbuch sollte das einheitlich sein. Ich schreibe jetzt mal service mit kleinem s.
### SK: Ich würde auch sehr gerne "Email" korrigieren. Nur weil es in CMK falsch geschrieben wird, muss es ja im Handbuch nicht auch falsch sein.

* [check_check_dns|Check DNS service]
* [check_check_smtp|Check access to SMTP services]
* [check_check_mail|Check Email]
* [check_check_sftp|Check SFTP service]
* [check_check_tcp|Check connecting to a TCP Port]
* [check_check_ssh|Check SSH service]
* [check_check_icmp|Check hosts with PING (ICMP Echo Request)]
* [check_check_http|Check HTTP service]
* [check_check_ldap|Check access to LDAP service]


== Aktive Checks einrichten

=== Reguläre aktive Checks einrichten

### SK: Bei "Active Checks {HTTP,TCP, etc.)" habe ich die geschweiften Klammern gegen _ ersetzt, weil das Makro wohl wegen den runden Klammern nicht funktioniert.
### SK: Regelsets vs. Regelsätze: In Checkmk steht "Regelsätze" sofern es auf "German" (hihi) eingestellt ist.

In WATO können Sie -- bereits weiter oben erwähnt -- die wichtigsten und am
häufigsten genutzten Checks direkt in der Weboberfläche einrichten. Gehen
Sie dazu über [.guihints]#WATO => Host & Service Parameters# zu dem Eintrag
[.guihints]#Active Checks (HTTP, TCP, etc.)}}.# Hier finden Sie die Regelsätze, mit denen
Sie diese Checks einrichten können:

image::bilder/active_checks_rulesets.png[]

Die meisten Optionen in den Regelsätzen sind selbsterklärend. Falls doch
einmal etwas unklar sein sollte, können Sie auch hier für viele Optionen
auf die ICON[icon_help.png] Onlinehilfe zurückgreifen.


=== Aktive Checks einem Host zuweisen

Bei manchen Regeln ist es in den Optionen notwendig, eine IP-Adresse oder
einen Hostnamen anzugeben. An vielen Stellen ist möglich diese Option
leer zu lassen, so dass der Hostname oder dessen IP genommen wird. Auf
diese Weise können Sie sehr leicht mit nur einer Regel eine ganze Gruppe
an Hosts mit einem aktiven Check versorgen. Achten Sie daher immer darauf
(auch mit Hilfe der bereits erwähnten ICON[icon_help.png] Onlinehilfe),
ob diese Möglichkeit in dem konkreten Regelsatz zur Verfügung steht. Sie
sparen sich damit unter Umständen eine Menge Konfigurationsarbeit.

Ein Beispiel, anhand des HTTP-Checks erklärt: Nehmen wir an, Sie möchten
die Gültigkeit der Zertifikate sämtlicher Webserver in Ihrer Infrastruktur
überwachen, dafür aber nicht dutzende oder gar hunderte Regeln anlegen:

image::bilder/active_checks_http_conf.png[]

### SK: Boah.... Conditions...
### Text-Bild-Schere: webprotocol:true vs. webprotocol:https. Ich habe den Text mal an den Screenshot angeglichen.

Um das mit einer einzigen Regel zu schaffen, machen Sie sich zunächst
Gedanken, wie Sie die [.guihints]#Conditions# am besten befüllen. In dem nachfolgenden
Beispiel nutzen wir dafür die Funktion der [labels|Labels] und setzen auf alle
unsere Webserver das Label `webprotocol:https`. Mit diesem Label können
wir nun eine Regel anlegen und die [.guihints]#Conditions# auf eben dieses Label setzen:

image::bilder/active_checks_http_conditions.png[]

Nachdem Sie die eben erstellte Regel aktiviert haben, suchen Sie in der
[.guihints]#Quicksearch# nach dem soeben gesetzten Servicenamen. Für das Beispiel hier
wurden vier Hosts angelegt und der Servicename auf `Certificate`
gesetzt. In den [.guihints]#Status Details# können Sie dann erkennen, dass auch
wirklich verschiedene Webseiten geprüft wurden, da die Ablaufdaten der
Zertifikate sich leicht unterscheiden:

image::bilder/active_checks_http_services.png[align=border]

*Wichtig*: Beachten Sie, dass bei den aktiven Checks nicht nur die
erste Regel ausgewertet wird, auf welche die Bedingungen zutreffen, sondern
vielmehr _alle_, für die die Bedingungen zu einem Host zutreffen! Nur
so ist es möglich, mehrere Services auf einem Host einzurichten.


=== Andere zu Nagios kompatible Plugins einbinden

In Checkmk stehen Ihnen natürlich nicht nur die aktiven Checks zur Verfügung, die
Sie in der Weboberfläche als Regelsätze vorfinden. Über diese Check-Plugins
hinaus, finden Sie noch viele weitere in Ihrer Instanz. Um die Übersicht zu
wahren, werden in der folgenden Ausgabe nur ausgewählte Zeilen angezeigt:

[source,bash]
----
OMD[mysite]:~$ ll ~/lib/nagios/plugins/
total 2466
-rwxr-xr-x 1 root root   56856 Feb  3 00:45 check_dig
-rwxr-xr-x 1 root root    6396 Feb  3 00:45 check_flexlm
-rwxr-xr-x 1 root root    6922 Feb  3 00:45 check_ircd
-rwxr-xr-x 1 root root   60984 Feb  3 00:45 check_ntp_peer
-rwxr-xr-x 1 root root   78136 Feb  3 00:45 check_snmp
----

Jedes dieser Check-Plugins bietet auch eine Hilfe-Option an (`-h`),
über die Sie mehr zur Nutzung des jeweiligen Plugins erfahren können,
ohne die Webseite von [.guihints]#monitoring-plugins# bemühen zu müssen.


(CMK) bietet den speziellen Regelsatz [.guihints]#Classical active and passive Monitoring checks}}# 
an, um diese Plugins bequem nutzen zu können. Die beiden wichtigsten Optionen
sind hier die Angabe einer Servicebeschreibung und die Kommandzeile. Letztere
kann so geschrieben werden, als würden Sie sich bereits im richtigen Verzeichnis
befinden:

image::bilder/active_checks_custom_config.png[]

Beachten Sie, dass Ihnen hier auch die oben erwähnten Makros,
wie `$HOSTNAME$` oder `$HOSTADDRESS$` zu Verfügung
stehen. Eine Liste von allen verfügbaren Makros finden Sie wie immer in der
ICON[icon_help.png] Onlinehilfe. Nachdem Sie die Änderungen aktiviert haben,
können Sie den neuen Service auf dem zugeordneten Host sehen:

image::bilder/active_checks_custom_service01.png[align=border]


==== Eigene Plugins verwenden

In manchen Fällen haben Sie bereits eigene Plugins geschrieben und möchten diese
nun in Checkmk verwenden. In diesem Fall ist das Vorgehen weitgehend identisch.
Voraussetzung ist lediglich, dass das Plugin kompatibel zu Nagios ist. Dazu
gehört eine einzeilige Ausgabe mit den Details des Status und ein Exit-Code,
welcher den Status beschreibt. Dieser muss entsprechend 0 für (OK), 1 für
(WARN), 2 für (CRIT) oder 3 für (UNKNOWN) sein. Ein kurzes Beispiel, um die sehr
einfache Syntax zu verstehen, finden Sie hier:

./omd/sites/mysite/myscript.sh

----#!/bin/bash
echo "I am a self written check and I feel well."
exit 0
----

Legen Sie das Plugin in dem lokalen Pfad ihrer Instanz ab:

[source,bash]
----
OMD[mysite]:~$ cp myscript.sh ~/local/lib/nagios/plugins/
----

Und machen Sie danach das Skript ausführbar:

[source,bash]
----
OMD:chmod 755 ~/local/lib/nagios/plugins/myscript.sh
----

Das weitere Vorgehen ist dann identisch zu anderen Plugins, die über den
Regelsatz [.guihints]#Classical active and passive Monitoring Checks# angelegt werden,
so dass Sie am Ende den neuen Service sehen können:

image::bilder/active_checks_custom_service02.png[]


== Besonderheiten bei aktiven Checks

Services, welche durch aktive Checks erstellt wurden, verhalten sich in
mancher Hinsicht anders, als andere Services. So wird der Service eines
aktiven Checks...

* ... auch dann weiter geprüft, wenn ein Host (DOWN) ist.
* ... unabhängig von anderen (passiven) Services ausgeführt. Das ermöglicht auch das Setzen eines eigenen Intervalls.
* ... immer vom Server der Checkmk-Instanz ausgeführt. Ausnahmen sind hier [active_checks#mrpe|MRPEs], welche direkt auf einem Host ausgeführt werden.
* ... nicht über die [wato_services#discovery|Service Discovery] aufgenommen, sondern automatisch erzeugt.


[#mrpe]
== Aktive Checks auf einem Host ausführen (MRPE)

Um ein klassisches Nagios-Plugin auf einem zu überwachenden Host
auszuführen, stellen wir _MK's Remote Plugin Executor_ (kurz: MRPE) zur
Verfügung. Je nachdem, ob Sie ein solches Plugin auf einem unixartigen System
oder auf einem Windows ausführen wollen, legen Sie es an unterschiedlichen
Stellen im Installationsverzeichnis des jeweiligen Agenten ab. Zusätzlich
benötigen Sie noch eine Konfigurationsdatei, welche bestimmt, in welcher Art und
Weise das Plugin ausgeführt werden soll und wie die konkrete Kommandzeile für
den Aufruf aussieht.

Ausführliche Anleitungen finden Sie in den jeweiligen Artikeln zu
[agent_windows#mrpe|Windows] und [agent_linux#mrpe|Linux].

== Dateien und Verzeichnisse

[cols=45, options="header"]
|===


|Pfad
|Bedeutung


|`~/lib/nagios/plugins/`
|Hier finden Sie alle Plugins, welche mit (CMK) mitgeliefert werden. Es wird dabei keine Unterscheidung zwischen Plugins gemacht, welche von <a href="https://www.monitoring-plugins.org">www.monitoring-plugins.org</a> und welche speziell für (CMK) geschrieben wurden.


|`~/local/lib/nagios/plugins/`
|Eigene Plugins legen Sie hier ab. Sie werden dann dynamisch eingelesen und überstehen auch ein Update der (CMK)-Instanz.

|===
