include::global_attr.adoc[]
= Host- und Serviceparameter
:revdate: 2018-04-26
:title: Regeln in (CMK) verstehen und nutzen
:description: Regeln in checkmk können Template oder Ausnahme sein. Dieser Artikel beschreibt die Nutzung von Regeln im Detail und wie sie ausgewertet werden.

[TIP]
.Related Articles:
====
link:wato.html[]

link:wato_hosts.html[]

link:wato_services.html[]

====

== Einleitung

In {CMK} konfigurieren Sie Parameter für Hosts und Services über
_Regeln_. Diese Besonderheit macht {CMK} in komplexen Umgebungen
sehr leistungsfähig und bringt auch in kleineren Installationen etliche
Vorteile. Um das Prinzip der regelbasierten Konfiguration anschaulich zu
machen, machen wir einen Vergleich mit der klassischen Methode:

=== Der klassiche Ansatz

Nehmen wir als Beispiel die Konfiguration von Schwellwerten für {WARN} und
{CRIT} bei der Überwachung von Dateisystemen. Bei einer an Daten&shy;banken
orientierten Konfiguration würde man in einer Tabelle für jedes Dateisystem
eine Zeile anlegen:

<table class=small>

<tr>
<th>Host</th>
<th>Filesystem</th>
<th>Warnung</th>
<th>Kritisch</th>
</tr>

<tr>
<td>mysrv123</td>
<td class=tt>/var</td>
<td>&nbsp;90%</td>
<td>&nbsp;95%</td>
</tr>

<tr>
<td>mysrv123</td>
<td class=tt>/sapdata</td>
<td>&nbsp;90%</td>
<td>&nbsp;95%</td>
</tr>

<tr>
<td>mysrv123</td>
<td class=tt>/var/log</td>
<td>&nbsp;90%</td>
<td>&nbsp;95%</td>
</tr>

<tr>
<td>mysrv124</td>
<td class=tt>/var</td>
<td>&nbsp;85%</td>
<td>&nbsp;90%</td>
</tr>

<tr>
<td>mysrv124</td>
<td class=tt>/opt</td>
<td>&nbsp;85%</td>
<td>&nbsp;90%</td>
</tr>

<tr>
<td>mysrv124</td>
<td class=tt>/sapdata</td>
<td>&nbsp;85%</td>
<td>&nbsp;95%</td>
</tr>

<tr>
<td>mysrv124</td>
<td class=tt>/var/trans</td>
<td>100%</td>
<td>100%</td>
</tr>


</table>

Das ist einigermaßen übersichtlich -- aber nur weil die Tabelle hier kurz ist. In der
Praxis haben Sie eher Hunderte oder Tausende von Dateisystemen. Werkzeuge
wie Copy & Paste und Bulk-Operationen können die Arbeit erleichtern, aber
es bleibt ein Grundproblem: Wie können Sie hier eine _Policy_ erkennen
und durchsetzen? Wie ist die generelle Regel? Wie sollen Schwellwerte für
zukünftige Hosts eingestellt werden?

=== Regelbasiert ist besser!

Eine regelbasierte Konfiguration hingegen *besteht* aus der Policy!
Die Logik der obigen Tabelle ersetzen wir durch einen Satz aus vier Regeln.
Wenn wir davon ausgehen, dass `mysrv123` ein Testsystem ist und dass
für jedes Dateisystem die jeweils _erste zutreffende Regel_ gilt, ergeben
sich die gleichen Schwellwerte wie in der Tabelle von oben:

. Dateisysteme mit dem Mountpunkt `/var/trans` haben die Schwellwerte 100/100%.
. Das Dateisystem `/sapdata` auf `mysrv124` hat die Schwellwerte 85/95%.
. Dateisysteme auf Testsystemen haben die Schwellwerte 90/95%.
. Alle (übrigen) Dateisysteme haben die Schwellwerte 85/90%.

Zugegeben -- bei nur zwei Hosts bringt das nicht viel. Aber wenn es nur ein
paar mehr sind, wird der Mehraufwand schnell sehr groß. Die Vorteile der
regel&shy;basierten Konfiguration liegen auf der Hand:

* Die Policy ist klar erkennbar und wird zuverlässig durchgesetzt.
* Sie können die Policy jederzeit ändern, ohne dass Sie Tausende Datensätze anfassen müssen.
* _Ausnahmen_ sind immer noch möglich, aber in Form von Regeln dokumentiert.
* Das Aufnehmen von neuen Hosts ist einfach und wenig fehleranfällig.

Zusammengefasst also: weniger Arbeit -- mehr Qualität! Und deswegen finden Sie Regeln bei {CMK}
an allen Stellen, wo es irgendwie um Hosts oder Services geht: bei Schwellwerten, Monitoringeinstellungen,
Zuständigkeiten, Alarmierungen, Agentenkonfiguration und vielem mehr.


=== Arten von Regelsätzen

WATO organisiert Regeln in _Regelsätzen_. Jeder Regelsatz hat die Aufgabe, einen
ganz bestimmten Parameter für Hosts oder Services festzulegen.
In der Version 1.2.8 von {CMK} gibt es über 700 Regelsätze! Hier einige Beispiele:

* [.guihint]#Host check command# -- legt fest, wie geprüft werden soll, ob Hosts {UP} sind.
* [.guihint]#Alternative display name for services# -- definiert für Services alternative Anzeigenamen.
* [.guihint]#JVM memory levels# -- legt Schwellwerte und andere Parameter für die Überwachung des Speicherverbrauchs von Java-VMs fest.

Jeder Regelsatz ist entweder für Hosts oder für Services zuständig
 -- nie für beides. Wenn Parameter sowohl für Hosts als auch für
Services einstellbar sind, gibt es jeweils ein Pärchen von Regelsätzen --
z.B. [.guihint]#Normal check interval for host checks# und
[.guihint]#Normal check interval for services checks#.

Einige Regelsätze legen genau genommen nicht Parameter fest, sondern erzeugen
Services. Ein Beispiel sind die Regeln in der Rubrik _Active checks_.
Damit können Sie z.B. einen HTTP-Check für bestimmte Hosts einrichten. Diese
Regeln gelten als Host-Regeln. Denn die Tatsache, dass so ein Check auf einem
Host existiert, gilt als eine Host-Eigenschaft des Hosts.

Ferner gibt es Regelsätze, welche die link:wato_services.html[Serviceerkennung]
steuern. So können Sie z.B. über [.guihint]#Windows service discovery# festlegen, für welche
Windows-Dienste automatisch Checks eingerichtet werden sollen, falls diese auf einem
System gefunden werden. Auch dies sind Host-Regeln.

Der Großteil der Regelsätze legt Parameter für bestimmte
Checksplugins fest. Ein Beispiel ist [.guihint]#Network interfaces and switch ports#.
Die Einstellungen in diesen Regeln sind sehr individuell auf das
jeweilge Plugin zugeschnitten. Solche Regelsätze finden grundsätzlich nur
bei denjenigen Services Anwendung, die auf diesem Check-Plugin basieren. Falls
Sie unsicher sind, welcher Regelsatz für welche Services zuständig ist,
navigieren Sie am besten direkt über den Service zur passenden Regel.
Wie das geht, erfahren Sie später.


=== Hostmerkmale

Eines haben wir bisher noch unterschlagen: In obigem Beispiel gibt es ein
Regel für alle _Testsysteme_. Wo ist eigentlich festgelegt, welcher
Host ein Testsystem ist?

So etwas wie _Testsystem_ heißt bei {CMK} _Hostmerkmal_ (englisch:
_Host tag_). Welche Merkmale es gibt, können Sie mit dem WATO-Modul
[.guihint]#Tags# frei definieren, und einige Merkmale sind bereits vordefiniert. Die
Zuordnung zu den Hosts geschieht entweder in der Detailmaske beim Host oder
per Vererbung über die Ordnerhierarchie. Wie das geht, erfahren Sie im
link:wato_hosts.html[Artikel über die Hosts]. Wie Sie eigene Merkmale anlegen können
und was es mit den bereits vordefinierten Merkmalen auf sich hat, lesen Sie
link:wato_rules.html#hosttags[weiter unten] in diesem Artikel.


== Auffinden der richtigen Regelsätze

=== Host-Regelsätze

Wenn Sie eine neue Regel anlegen möchten, die für einen oder mehrere
Hosts einen Parameter definiert, dann gibt es mehrere Wege zum Ziel. Der
direkte Weg geht über das WATO-Modul icon:icon_rulesets.png[]
[.guihint]#Host & service parameters#:

image::host_service_parameters.jpg[]

Am schnellsten geht es jetzt mit dem _Suchfeld_. Dazu müssen Sie
natürlich natürlich ungefähr wissen, wie der Regelsatz heißt. Hier ist
als Beispiel das Ergebnis einer Suche nach _host check_. Die Zahlen
zeigen die Anzahl der bereits vorhandenen Regeln in den jeweiligen Regelsätzen an:

image::search_host_ruleset.jpg[]

Ein anderer Weg geht über den Knopf icon:context_button_rulesets.png[]
in den Details eines vorhandenen Hosts in WATO oder über das Symbol
icon:icon_rulesets.png[] in der Liste der Hosts eines Ordners. Dort finden Sie
nicht nur alle Regelsätze, die den Host betreffen, sondern auch den jeweils
für diesen Host aktuell wirksamen Parameter. Im Beispiel von
[.guihint]#Host check command# greift für den gezeigten Host keine Regel und er steht deswegen
auf der Defaulteinstellung [.guihint]#PING (active check with ICMP echo request)#:

image::host_rule_sets.jpg[]

Klicken Sie auf _Host check command_, um den ganzen Regelsatz zu sehen.

Falls bereits eine Regel existiert, erscheint anstelle von _Default value_
die Nummer der Regel, welche diesen Parameter festlegt. Ein Klick darauf bringt
Sie direkt zu dieser Regel.

image::host_rule_sets2.jpg[]


=== Service-Regelsätze#checkparameters

Der Weg zu den Regelsätzen für Services ist ähnlich. Der allgemeine Zugang geht auch
hier über das WATO-Modul icon:icon_rulesets.png[] [.guihint]#Host & service parameters# und
zweckmäßigerweise über das Suchfeld.

Wenn Sie nicht schon sehr geübt mit den Namen der Regelsätze sind, dann
ist der Weg über den Service einfacher. Analog zu den Hosts gibt es auch
hier eine Seite, in der alle Parameter des Services dargestellt werden und
Sie die Möglichkeit haben, die passenden Regelsätze direkt anzusteuern.
Sie erreichen diese Parameterseite mit dem Symbol icon:icon_rulesets.png[]
in der Liste der Services eines Hosts in WATO.
Das Symbol icon:button_check_parameters.png[] bringt Sie direkt zu demjenigen
Regelsatz, der die link:wato_services.html#parameters[Parameter für das Check-Plugin] des Services festlegt.

image::wato_service_list.jpg[]

Das Symbol icon:icon_rulesets.png[] für die Parameterseite gibt es übrigens
auch in der Statusoberfläche im Kontextmenü jedes Services:

image::service_context_menu.png[center, width=550]


=== Manuelle Checks#manual_checks

Ein Teil der Regelsätze ist nicht im Modul icon:icon_rulesets.png[] [.guihint]#Host & Service Parameters#
eingeordnet, sondern im Modul icon:icon_static_checks.png[] [.guihint]#Manual Checks#. Hierbei handelt
es sich um Services, welche nicht durch die Serviceerkennung entstehen, sondern von
Ihnen manuell angelegt werden. Einzelheiten dazu finden Sie im link:wato_services.html#manual_checks[Artikel über die Services.]

=== Benutzte Regelsätze

In der Hauptansicht unter icon:icon_rulesets.png[] [.guihint]#Host & Service Parameters#
finden Sie den Knopf icon:button_used_rulesets.png[]. Dieser zeigt alle Regelsätze,
in denen Sie mindestens eine Regel definiert haben. Dies ist oft ein bequemer
Einstieg, wenn Sie Anpassungen an Ihren bestehenden Regeln vornehmen möchten.

Einige der Regeln entstehen übrigens schon beim Anlegen der {CMK}-Instanz
und sind Teil der WATO-Beispiel&shy;konfiguration. Auch diese werden hier angezeigt.


=== Wirkungslose Regeln

Monitoring ist eine komplexe Sache.
Da kann es schonmal vorkommen, dass es Regeln gibt, welche auf keinen einzigen
Host oder Service matchen -- entweder weil Sie einen Fehler gemacht haben oder
weil die passenden Hosts und Service verschwunden sind. Solche wirkungslosen
Regeln können Sie mit dem Knopf icon:button_ineffective_rulesets.png[] anzeigen
lassen.


=== Veraltete Regelsätze

{CMK} wird ständig weiterentwickelt. Gelegentlich werden dabei Dinge
vereinheitlicht und es kommt dazu, dass manche Regelsätze durch andere
ersetzt werden. Ein Beispiel ist die Vereinheitlichung von allen Check-Plugins,
welche Temperaturen überwachen. Seit der Version 1.2.8 von {CMK} werden
diese ausnahmslos mit einem einzigen Regelsatz konfiguriert. Etliche der bisherigen
Regelsätze sind in diesem Zuge wirkungslos geworden. Soche Regelsätze finden
Sie dann unter icon:button_deprecated_rulesets.png[]. Dort können Sie auch sehen,
ob Sie Regeln definiert haben, damit Sie diese dann nach Bedarf in den jeweils
neuen Regelsätzen nachbilden können.



== Regeln erstellen und editieren#create_rules

Folgende Abbilung zeigt den Regelsatz [.guihint]#Filesystems (used space and growth)#, wobei
exakt die vier Beispielregeln aus der Einleitung konfiguriert sind:

image::rules_filesystem.jpg[]

*Neue Regeln* erzeugen Sie entweder über den Knopf [.guihint]#Create rule in folder#
oder über das icon:button_clone.png[] Klonen einer bestehenden
Regel. Das Klonen erzeugt eine identische Kopie einer Regel, die Sie anschließend
mit icon:button_edit.png[] bearbeiten können. Eine über den Knopf [.guihint]#Create rule in folder#
erzeugte neue Regel wird immer am Ende der Liste der Regeln erzeugt, während eine
geklonte Regel als Kopie unterhalb des Originals erzeugt wird.

Die *Reihenfolge* von Regeln können Sie mit den Knöpfen
icon:button_top.png], ICON[button_bottom.png], ICON[button_up.png[], und
icon:button_down.png[] ändern. Die Reihenfolge ist wichtig, weil immer
weiter oben stehende Regeln *Vorrang* vor späteren haben.

Die Regeln sind dabei in den *link:wato_hosts.html#folder[Ordnern]* abgelegt,
in denen Sie auch die Hosts verwalten. Der Wirkungs&shy;bereich von Regeln ist
auf die Hosts eingeschränkt, die in diesem Ordner oder in Unterordnern
liegen. Falls sich Regeln widersprechen, so hat immer die Regel in einem
Unterordner Vorrang. So können z.B. Benutzer, die nur für manche Ordner
link:wato_user.html#wato_permissions[berechtigt] sind, für Ihre Hosts Regeln anlegen, ohne
dass diese Einfluss auf den Rest des Systems haben. In den Eigenschaften
einer Regel können Sie deren Ordner ändern und sie somit „umziehen“.

=== Analyse mit der Ampel

Wenn Sie einen Regelsatz über einen Host oder Service ansteuern -- also
z.B. über die Symbole icon:icon_rulesets.png] oder ICON[button_check_parameters.png[]
bei einem Host oder Service -- zeigt WATO Ihnen den Regelsatz im *Analysemodus:*

image::rules_filesystem_analyze.jpg[]

Dies bewirkt zwei Dinge: Zum einen taucht ein zweiter Knopf zum Anlegen von
Regeln auf -- hier im Beispiel [.guihint]#Create mount point specific rule for#.
Damit können Sie eine neue Regel erzeugen, welche als Bedingung direkt den
aktuellen Host bzw. Service voreingetragen hat. So können Sie sehr einfach
direkt eine Ausnahmeregel erzeugen. Zum anderen taucht in jeder Zeile ein
Kugelsymbol auf, welches Ihnen anzeigt, ob diese Regel für den aktuellen
Host bzw. Service greift. Dabei gibt es folgende mögliche Fälle:


|===




|===


Der letzte Fall -- das icon:icon_rulepmatch.png[] partielle Matchen einer
Regel -- kann nur bei solchen Regelsätzen auftreten, in denen eine Regel
*mehrere Parameter* festlegt, welche durch Checkboxen einzeln angewählt
werden können. Hier kann theoretisch jeder einzelne der Parameter von einer
anderen Regel festgelegt werden. Dazu später mehr.

== Eigenschaften einer Regel

=== Allgemeine Optionen

Jede Regel ist in drei Blöcken aufgebaut. Alles im ersten Block [.guihint]#Rule options# ist optional und dient
vor allem der Dokumentation:

image::edit_rule_1.jpg[]

* Die [.guihint]#Description# wird in der Tabelle aller Regeln eines Regelsatzes angezeigt.
* Das Feld [.guihint]#Comment# können Sie für eine längere Beschreibung verwenden. Es erscheint nur im Editiermodus einer Regel. Über das Symbol icon:button_insertdate.png[] können Sie einen Zeitstempel und Ihren Loginnamen in den Text einfügen lassen (hier im Beispiel `2016-05-06 mk:`).
* Die [.guihint]#Documentation-URL# ist für einen Link auf interne Dokumentation gedacht, die Sie in einem anderen System (z.B. einer CMDB) pflegen.  Sie wird in der Regeltabelle über das Symbol icon:button_url.png[] anklickbar dargestellt.
* Mit der Checkbox [.guihint]#Do not apply this rule# können Sie die Regel vorrübergehend abschalten. Sie wird dann in der Tabelle mit icon:icon_disabled.png[] dargestellt und hat keine Wirkung.

=== Die festgelegten Parameter

Der zweite Abschnitt ist bei jeder Regel anders. Folgende Abbildung zeigt einen weit verbreiteten
Typ von Regel ([.guihint]#DB2 Tablespaces#). Über Checkboxen können Sie bestimmen, welche Einzelparameter die Regel definieren
soll. Wie weiter oben beschrieben, wird von {CMK} für jeden einzelnen Parameter getrennt ermittelt,
welche Regel diesen setzt. Die Regel aus der Abbildung deaktiviert also einfach nur das Überprüfen
von Autoextend und lässt alle anderen Einstellungen unbeeinflusst.

image::edit_rule_2.jpg[]

Manche Regelsätze legen keinen Parameter fest, sondern entscheiden
nur, welche Hosts _drin_ sind und welche nicht. Ein Beispiel ist der
Regelsatz [.guihint]#Hosts to be monitored#, mit welchem Sie manche Hosts ganz
aus dem Monitoring entfernen können. Der Parameterbereich sieht dann so
aus:

image::binary_rules.png[]

Wählen Sie hier [.guihint]#Make the outcome of the rule *positive*#, so heißt das,
dass die betroffenen Hosts in die Menge aufgenommen -- in unserem
Beispiel also gemonitort werden sollen.

=== Bedingungen#conditions

Im dritten Abschnitt [.guihint]#Conditions# legen Sie fest, für welche Hosts bzw. Services die Regel
greifen soll. Dabei gibt es vier verschiedene Arten von Bedingungen, die alle erfüllt sein
müssen, damit die Regel greift. Die Bedingungen werden also quasi logisch UND-verknüpft:

image::edit_rule_3.jpg[]

==== Ordner

Mit der Bedingung [.guihint]#Folder# legen Sie fest, dass die Regel nur für Hosts gelten soll,
die in diesem Ordner (oder einem Unterordner) enthalten sind. Ist die Einstellung auf
[.guihint]#Main Directory#, so gilt diese Bedingung also für alle Hosts. Wie weiter oben beschrieben, haben
die Ordner auch einen Einfluss auf die Reihenfolge der Regeln. Regeln in tieferen Ordnern
haben immer Vorrang vor höher liegenden.

==== Hostmerkmale (vor Version 1.6.0)

Die [.guihint]#Host tags# schränken die Regel auf solche Host ein, die bestimmte Hostmerkmale
haben oder nicht haben. Auch hier wird immer mit UND verknüpft. Jede weitere Hosttagbedingung
in einer Regel verringert also die Menge der Hosts, auf die diese wirkt.

Wenn Sie eine Regel für zwei mögliche Ausprägungen eines Merkmals gelten
lassen möchten (z.B. bei [.guihint]#Criticality}} sowohl {{Productive system# als
auch [.guihint]#Business critical#), so geht das nicht mit einer
einzelnen Regel. Sie benötigen dann eine Kopie der Regel für jede Variante.
Manchmal hilft hier aber auch die Negation. Sie können als Bedingung auch
festlegen, dass ein Merkmal *nicht* vorhanden ist (z.B. nicht [.guihint]#Testsystem#).
Eine andere Möglichkeit sind sogenannte link:wato_rules.html#auxtags[Hilfsmerkmale].

==== Explizite Hosts

Diese Art von Bedingung ist für Ausnahmeregeln vorgesehen. Hier können Sie einen
oder mehrere Hostnamen auflisten. Die Regel gilt dann nur für diese Hosts.
Bitte beachten Sie, dass wenn Sie [.guihint]#Specify explicit host names# angekreuzt haben
und *keinen* Host eintragen, die Regel überhaupt nicht greifen wird.

Über die Option [.guihint]#Negate# können Sie eine umgekehrte Ausnahme definieren. Damit
schließen Sie bestimmte explizit genannte Hosts von der Regel aus.

image::edit_rule_4.png[]

Wichtig: Alle hier eingetippten Hostnamen werden auf *genaue Übereinstimmung*
geprüft. Groß-/Klein&shy;schreibung wird von {CMK} in Hostnamen grundsätzlich unterschieden!

Sie können dieses Verhalten auf link:regexes.html[reguläre Ausdrücke] umstellen, indem Sie dem Hostnamen
eine Tilde (`~`) voranstellen. In diesem Fall gilt wie immer in WATO:

* Der Match geht auf den *Anfang* des Hostnamens.
* Der Match ignoriert Groß-/Klein&shy;schreibung.

Punkt-Stern (`.*`) bedeutet bei link:regexes.html[regulären Ausdrücken] eine beliebige Folge von Zeichen.
Folgendes Beispiel zeigt eine Bedingung, die auf alle Hosts matcht, deren Namen die
Zeichenfolge `test` (oder `Test`, `TEST`, `tEsT` usw.) *enthält*:

image::edit_rule_5.png[]


==== Explizite Services

Bei Regeln, die sich auf Services beziehen, gibt es als vierte und letzte
Bedingungsart noch einen Match auf den Namen des Services, bzw. bei Regeln,
die Checkparameter festlegen, auf den Namen des *Check&shy;items*. Auf was
genau gematcht wird, sehen Sie in der Beschriftung. In unserem Beispiel ist
das der Name eines [.guihint]#Tablespaces#:

image::edit_rule_6.png[]

Hier gilt grundsätzlich ein Match mit link:regexes.html[regulären Ausdrücken]. Die
Folge `.*temp` matcht alle Tablespaces, die `temp`
*enthalten,* denn der Match geht immer auf den Anfang des Namens. Das Dollarzeichen am
Ende von `transfer$` steht für das Ende und erzwingt somit einen exakten
Match. Ein Tablespace mit dem Namen `transfer2` würde daher
*nicht* matchen.

Bitte vergessen Sie nicht: Bei Regeln wo es um [.guihint]#Explicit services#
geht, benötigen Sie einen Match auf den Servicenamen (z.B. `Tablespace
transfer`). Bei Checkparameter-Regeln geht es um einen Match auf das
Item (z.B. `transfer`). Das Item ist quasi der variable Teil des
Servicenamens und legt fest, um _welchen_ Tablespace es
sich handelt.

Es gibt übrigens auch Services ohne Item. Ein Beispiel ist die
_CPU load_. Diese gibt es pro Host nur einmal, also ist kein Item
notwendig. Regeln für solche Checktypen haben folglich auch keine Bedingung
dafür.

=== Regelbedingungen ab Version 1.6.0#labels

Ab Version 1.6.0 von {CMK} hat sich die Eingabemaske für Bedingungen etwas
geändert. Das hat zwei Gründe: zum einen gibt es Anwender mit sehr vielen
Hostmerkmalen, wo die aktuelle Maske unübersichtlich wird. Zum anderen bietet
die neue Maske flexiblere Möglichkeiten als die bisherige und sie unterstützt
natürlich auch die neuen link:wato_hosts.html#labels[Labels]. Die Maske sieht so aus:

image::rule_conditions_160.png[]

[.guihint]#Folder}}, {{Explicit hosts}} und {{Explicit services# sind unverändert
und wie oben besprochen. Neu sind die folgenden drei Eingabefelder:

==== Condition type

Hier haben Sie die Möglichkeit, neben einer normalen Bedingungen auch
auf _vordefinierte Bedingungen_ ([.guihint]#Predefined Conditions#) zurückzugreifen.
Die werden mit dem WATO-Module [.guihint]#Predefined Conditions# verwaltet. Geben
Sie hier einfach Regelbedingungen, die Sie immer wieder brauchen, einen
festen Namen und verweisen in den Regeln einfach darauf. Sie können sogar
später den Inhalt dieser Bedingungen zentral ändern und alle Regeln werden
automatisch angepasst. In folgendem Beispiel wird die vordefinierte Bedingung [.guihint]#No VM#
ausgewählt:

image::use_predefined_condition.png[]


==== Hostmerkmale

Weil eine Anwender wirklich sehr viele Hostmerkmale verwenden, haben wir den
Dialog nun so gestaltet, dass nicht mehr alle Merkmalsgruppen angezeigt werden, sondern
Sie gezielt welche für die Bedingung auswählen. Das geht so:

. Wählen Sie in der Auswahlbox eine Merkmalsgruppe
. Klicken Sie [.guihint]#Add tag condition#. Dadurch wird darüber ein Eingtrag für diese Gruppe hinzugefügt.
. Wählen Sie [.guihint]#is}} oder {{is not#.
. Wählen Sie den gewünschten Vergleichswert.

image::rule_conditions_160_2.png[]


==== Labels

Auch die ab Version VERSION[1.6.0] eingeführten _Labels_ können Sie
für Bedingungen in Regeln verwenden. Fügen Sie Bedingungen mit
[.guihint]#Add label condition}} hinzu. Wählen Sie nun entweder {{has}} oder {{has not#
um ein positive oder negative Bedingung zu formuieren und geben Sie dann
das Label in der gewohnten Form _Schlüssel_`:`_Wert_ ein.
Achten Sie hier bitte auf ganz exakte Schreibung, auch was Groß-/Kleinschreibung
betrifft. Sonst wird die Bedingung nicht korrekt funktionieren.

image::rule_conditions_labels.png[]

== Arten der Regelauswertung#matching

In der Einleitung in das Prinzip der Regeln haben wir gesehen, dass immer
die erste zutreffende Regel den Ergebniswert festlegt. Das ist nicht die ganze
Wahrheit. Es gibt insgesamt drei verschiedene Arten der Auswertung:

[options="header"]
|===

|Auswertung
|Verhalten

|Erste Regel
|Die erste Regel, die zutrifft, legt den Wert fest. Weitere Regeln werden nicht mehr ausgewertet. Dies ist der Normalfall für Regeln, die einfache Parameter festlegen.

|Erste Regel pro Parameter
|Jeder Einzelparameter wird von der ersten Regel festgelegt, bei der dieser Parameter definiert ist (Checkbox angekreuzt). Dies ist der Normalfall für alle Regeln mit Unterparametern, die mit Checkboxen aktiviert werden.

|Alle Regeln
|Alle zutreffenden Regeln fügen Elemente zum Ergebnis hinzu. Dieser Typ kommt z.B. bei der Zuordnung von Hosts und Services zu Host-, Service- und Kontaktgruppen zum Einsatz.

|===


Ab Version VERSION[1.2.8p1] von {CMK} wird diese Information bei jedem Regelsatz
oben angezeigt.

[.border]
image::wato_rules_matching_strategy.png[]


== Hostmerkmale im Detail#hosttags

Wie wir gesehen haben, sind die Hostmerkmale eine wichtige Grundlage für die
Definition von Regeln. Sie sind aber auch an anderen Stellen nützlich.
Zum Beispiel gibt es in link:views.html[Views] einen Filter für Hosttags. Das Seiten&shy;leisten&shy;element
[.guihint]#Virtual host tree# kann Ihre Ordner anhand von Hostmerkmalen in einem Baum
anordnen. Und auf der Kommandozeile können Sie bei vielen Befehlen mit der Syntax
`@foo` alle Hosts mit dem Tag `foo` auswählen.

Damit alles richtig Sinn ergibt, sollten Sie Ihr eigenes Schema für
Hosttags einrichten, welches für Ihre Umgebung optimal passt. Aber bevor wir
Ihnen zeigen, wie Sie mit WATO eigene Hosttags definieren können, sollten
wir zunächst einige Begriffe klären.

=== Taggruppen, Checkboxtags, Themen und Hilfsmerkmale#auxtags

Hosttags sind in *Gruppen* organisiert. Dabei kann ein Host aus jeder
Gruppe maximal ein Merkmal haben! Ein gutes Beispiel für eine eigene Gruppe
wäre z.B. _Datacenter_ mit den möglichen Merkmalen _DC 1_ und
_DC 2_. Damit wäre dann jeder Host genau einem der beiden Rechenzentren
zugeordnet. Möchten Sie Hosts anlegen, die in keinem der beiden Rechenzentren
stehen, so brauchen Sie eine dritte Auswahlmöglichkeit -- z.B. _Not in a datacenter_.

Manche Anwender haben versucht, die _Anwendung_, die auf einem Host
läuft, in einer Taggruppe abzubilden. Die Gruppe hieß z.B. _Anwendung_
und hatte die Ausprägungen _ORACLE_, _SAP_, _MS Exchange_, usw. Das geht
solange gut, bis der Tag kommt, an dem ein Host _zwei_ Anwendungen hat -- und
der kommt gewiss!

Die richtige Lösung ist hier daher eine andere: Erzeugen Sie pro Anwendung
eine eigene Taggruppe, welche nur zwei Möglichkeiten hat: _ja_
oder _nein_. {CMK} vereinfacht dies, indem es Ihnen erlaubt,
Taggruppen mit nur einem _einzigen_ Tag anzulegen. Diese werden dann in
der Hostmaske nicht als Auswahlfeld, sondern als Checkbox dargestellt. Ein
Ankreuzen der Checkbox setzt das Tag, andernfalls entfällt das Tag. Solche
Taggruppen heißen auch *Checkboxtags.*

Damit das Ganze nicht unübersichtlich wird, wenn Sie sehr viele Taggruppen haben
(z.B. weil Sie viele verschieden Anwendungen abbilden), können Sie die Taggruppen
zu *Themen* (Englisch: _Topics_) zusammen&shy;fassen. Alle Taggruppen
des gleichen Themas sind dann

* in den Hostdetails in einem eigenen Kasten zusammengefasst und
* bei den Bedingungen der Regel über ein kleine Dreieck auf- und zuklappbar dargestellt.

Die Themen haben also „nur“ eine optische Funktion und keine Auswirkung auf die
eigentliche Konfi&shy;guration.

*Hilfsmerkmale* (_Englisch: Auxiliary tags_) lösen folgendes Problem:
Stellen Sie sich vor, dass Sie eine Taggruppe _Betriebssystem_ definieren, mit
den Ausprägungen _Linux_, _AIX_, _Windows 2008_ und _Windows 2012_.
Nun möchten Sie eine Regel definieren, welche für alle Windows-Hosts gelten soll.
Das geht so überhaupt nicht, da Sie in einer Bedingung wie oben gezeigt pro Gruppe
immer nur ein Tag auswählen können.

Um das Problem zu lösen, können Sie das Hilfstag _Windows_
definieren. Dann ordnen Sie den beiden Merkmalen _Windows 2008_ und
_Windows 2012_ dieses Hilfsmerkmal zu. Ein Host, der eines der beiden
Merkmale hat, erhält dann von WATO _automatisch_ immer auch das Hilftstag _Windows_.
In den Regeln erscheint _Windows_ als eigenes Tag für die Formulierung
von Bedingungen.

=== Vordefinierte Merkmale

{CMK} richtet bei der Installation mehrere Taggruppen für Sie ein:


|===




|===



==== Ändern von vordefinierten Taggruppen

Theoretisch können Sie die vordefinierten Taggruppen anpassen, solange diese
nicht als [.guihint]#builtin}} markiert sind. Änderungen in {{Criticality# oder
[.guihint]#Network Segment# sind unkritisch. Diese sind nur als Beispiel vorgesehen.
Die Gruppe [.guihint]#Agent Type# jedoch sollten Sie auf keinen Fall ändern oder
erweitern -- auch wenn diese nicht als [.guihint]#builtin# gekennzeichnet ist! Die
Tags dieser Gruppe werden intern von {CMK} referenziert.

=== Taggruppen über WATO erstellen

Das Erzeugen von eigenen Merkmalen geschieht im
WATO-Modul icon:icon_hosttag.png[] [.guihint]#Host tags#. Dieses sieht bei einem
frisch aufgesetzten System je nach {CMK}-Version etwa so aus:

image::wato_host_tags.jpg[]

Das Anlegen einer neuen Taggruppe geschieht mit dem Knopf
icon:button_new_taggroup.png[] und bringt Sie zu folgender Eingabemaske:

image::edit_tags_1.jpg[]

Die *[.guihint]#Internal ID#* wird intern als ID für die Taggruppe verwendet. Diese
muss eindeutig sein und kann später nicht geändert werden. Es gelten die üblichen
Regeln für erlaubte Zeichen (nur Buchstaben, Ziffern, Unterstrich).

Der *[.guihint]#Title#* wird überall in der GUI verwendet, wo es um die Taggruppe
geht. Da dies ein reiner Anzeigetext ist, kann er jederzeit geändert werden, ohne
dass das einen Einfluss auf die bestehende Konfiguration hat.

Das *[.guihint]#Topic#* können Sie leer lassen. Dann wird Ihre Taggruppe zusammen mit
den mitgelieferten Gruppen angezeigt. Sie können aber auch eigene Themen anlegen und damit
Ihre Tags übersichtlich zusammen&shy;fassen.

Am wichtigsten sind natürlich die *[.guihint]#Choices#*. Wichtig ist, dass
auch hier die *[.guihint]#Tag ID#* jeweils eindeutig sein muss -- und zwar nicht nur
innerhalb der Gruppe, sondern über alle Gruppen hinweg!  Im Zweifelsfall
können Sie einfach mit Präfixen arbeiten, z.B. `loc_dc1` anstelle
von nur `dc1`.

Die Reihenfolge, welche Sie wie gewohnt mit den Knöpfen
icon:button_top.png], ICON[button_bottom.png], ICON[button_up.png[] und
icon:button_down.png[] ändern können, hat nicht nur eine optische Funktion:
*Das erste Tag in der Liste gilt als Defaultwert*! Das bedeutet, dass
alle Hosts, die keine explizite Einstellung für diese Taggruppe haben, automatisch
auf diesen Wert gesetzt werden.

Unter *[.guihint]#Auxiliary tags#* können Sie dem Merkmal Hilfsmerkmale zuordnen,
die automatisch von WATO dem Host hinzugefügt werden sollen, wenn dieses Tag
gewählt ist.

=== Hilfsmerkmale erstellen

Neue Hilfsmerkmale (Auxiliary Tags) können Sie über icon:button_auxtag_new.png[] erstellen. Im folgenden
Dialog vergeben Sie wieder eine unveränderliche ID und einen aussagekräftigen Titel. Wie schon
bei den Taggruppen lässt sich hier zudem ein [.guihint]#Topic# angeben.

image::wato_auxiliary_tag_new.png[]

Die Zuordnung/Nutzung dieser Hilfsmerkmale erfolgt dann direkt in den
Taggruppen bei den einzelnen Auswahlmöglichkeiten.


=== Löschen und Ändern von bestehenden Tags und Taggruppen

Das Ändern der bestehenden Taggruppenkonfiguration mag auf den ersten Blick
wie eine einfache Operation aussehen. Das ist aber leider nicht immer so, da es
größere Auswirkungen auf Ihre bestehende Konfiguration haben kann.
Änderungen, die lediglich die Anzeige betreffen oder nur neue Auswahlen
hinzufügt, sind unproblematisch und haben keine Auswirkung auf die
bestehenden Hosts und Regeln:

* Änderung im Titel oder Thema von Tags und Taggruppen
* Hinzufügen eines weiteren Merkmals zu einer Taggruppe

Alle anderen Änderungen können Auswirkungen auf bestehende Hosts oder Regeln
haben, die die betroffenen Tags verwenden. WATO verbietet dabei nicht einfach
solche Änderungen, sondern versucht für Sie, Ihre bestehende Konfiguration
so anzupassen, dass alles wieder Sinn ergibt. Was das genau bedeutet, hängt
von der Art der Operation ab.

==== Löschen von Taggruppen

Von allen Hosts wird die Information über die betroffenen Tags entfernt.
Falls die Taggruppe in vorhan&shy;denen Regeln als Bedingung verwendet wird,
bekommen Sie folgende Warnung:

image::delete_taggroup.jpg[]

Sie müssen sich hier entscheiden, ob Sie aus den bestehenden Regeln
die _Bedingungen entfernen_ möchten oder ob Sie die ganzen Regeln
löschen möchten. Beides kann sinnvoll sein und WATO kann nicht für Sie
entscheiden, was hier besser ist. Wenn Sie sich nicht sicher sind, sollten
Sie die Regelsätze (hier in der Warnung verlinkt) von Hand durchgehen und
alle Bedingungen der betroffene Gruppe von Hand entfernen oder abändern.


==== Löschen von einzelnen Tags

Das Löschen von Tags erreichen Sie durch Editieren der Gruppe, Entfernen
des Tags und anschließendes Speichern.  Dabei kann es zu einer ähnlichen
Warnung wie beim Entfernen einer Taggruppe kommen.

Hosts, die das betroffen Tag gesetzt hatten, werden automatisch auf den Defaultwert
gesetzt. Dies ist (wie oben beschrieben) stets das oberste Tag in der Liste.

Regeln, die eine _negative_ Bedingung auf das Tag haben, verlieren
einfach diese Bedingung -- ohne Rückfrage. Wenn Sie z.B. eine Regel haben
für alle Hosts, die *nicht* das Tag `loc_dc2` haben und Sie entfernen
das Tag `loc_dc2` komplett aus der Konfiguration, dann ist augenscheinlich
auch diese Beding&shy;ung überflüssig.

Falls jedoch eine _positive_ Bedingung mit dem Tag existiert, kommt es
wieder zu obiger Warnung und Sie müssen entscheiden, wie die Konfiguration
angepasst werden soll.


==== Umbenennen von Tag-IDs

Anders als bei den Taggruppen können Sie die IDs von Tags tatsächlich nachträglich
ändern. Dies ist sozusagen eine Ausnahme vom {CMK}-Prinzip, nach der IDs, wenn
einmal vergeben, unveränderlich sind. Es kann aber nützlich sein, wenn Sie z.B. einen
Datenimport von einem bestehenden System vorbereiten wollen, und sich dafür an ein
vorhandenes, unterschiedliches Tagschema anpassen müssen.

Um Tag-IDs umzubenennen, gehen Sie in den Editiermodus der Taggruppe und ändern Sie
dort einfach die IDs, wobei Sie *die Titel unverändert lassen.* Letzteres
ist wichtig, damit {CMK} überhaupt erkennt, dass es sich um eine Umbenennung
handelt und nicht einfach eine Tag-ID entfernt und eine neue hinzugefügt
wurde.

Bevor {CMK} mit der Anpassung der Konfiguration zu Werke geht, werden Sie
nochmal über die Konse&shy;quenzen aufgeklärt:

image::rename_tag.jpg[]

WATO wird nun alle betroffenen Hosts, Folder und Regeln entsprechend anpassen.

Bitte beachten Sie, dass es trotzdem noch Situtation geben kann, in denen
Sie an anderen Stellen manuell nacharbeiten müssen. So sind z.B. Tag-IDs
Bestandteile von URLs, welche Views aufrufen, die nach Tags filtern. WATO kann
diese URLs nicht für Sie anpassen. Auch Filter-Konfigurationen in Reports
und Dashboards können nicht automatisch angepasst werden. Es ist also sicher
eine gute Idee, sich über das Tagschema am Anfang genügend Gedanken zu
machen, so dass Sie Umbenennungen später nach Möglichkeit vermeiden können.

COMMENT[ML:Alternativ könnte man das Thema auch in den Views-Artikel nehmen,rein technisch scheint's mir aber hier am besten zu passen.]

=== Baumansicht aus Hostmerkmalen erstellen
Hosts werden in {CMK} in der Regel in Ordnern organisiert, woraus sich
eine natürliche Hierarchie ergibt. Diese können Sie als Baumansicht über das
Seitenleisten-Snapin [.guihint]#Folders# darstellen und von dort die Standardansicht
für die pro Verzweigung gefilterten Hosts aufrufen. Das Snapin [.guihint]#Tree of Folders#
ergänzt diesen Baum noch um Filtermöglichkeiten für Themen und Optionen für
unterschiedliche Ansichten. Eine solche Baumansicht können Sie aber auch aus
link:wato_rules.html#hosttags[Hostmerkmalen] erstellen und so eine „virtuelle“ Hierarchie
abbilden -- und zwar über das Snapin [.guihint]#Virtual Host Tree#. Neben den
Hostmerkmalen dürfen Sie auch die Ordnerstruktur in derlei Bäume einbauen, wobei
sowohl die Anzahl der virtuellen Bäume als auch der jeweiligen Verzweigungen
unbeschränkt ist.

Angenommen, Sie haben für Ihre Hosts die drei Taggruppen _Ort_,
_Geräteklasse_ und _Betriebssystem_ angelegt. Dann bekommen Sie auf
der obersten Baumebene eine Auswahl der Orte zu sehen, darunter der Geräteklassen
und letzlich der Betriebssysteme. Jede Hierarchieebene bringt Sie direkt zur
Ansicht aller Hosts mit eben diesen Merkmalen.

Zum Anlegen eines Virtual Host Tree fügen Sie zunächst das Snapin über
icon:button_sidebar_addsnapin.png[] unten links in der Seitenleiste zu dieser hinzu.

image::virtual_host_tree_snapin_modern.png[center, width=280]

Rufen Sie dann die Einstellungen über
[.guihint]#WATO|Global Settings|User Interface|Virtual Host Trees#
auf und erstellen Sie einen neuen Baum über
[.guihint]#Create new virtual host tree configuration#. Vergeben Sie anschließend ID und
Titel des Baums und schließen Sie optional leere Baumzweige über ein Häkchen bei
[.guihint]#Exclude empty tag choices}} aus. Anschließend fügen Sie über {{Add new element#
die gewünschten Taggruppen in der gewünschten Reihenfolge hinzu. Wenn Sie die
Ordnerhierarchie als oberste Ordnung übernehmen wollen, beginnen Sie einfach
mit [.guihint]#WATO folder tree#. Die Reihenfolge/Hierarchie können Sie freilich wie
üblich über die Anfasser nachträglich ändern.

image::virtual_host_tree_config_modern.png[]

Speichern Sie noch und übernehmen Sie die Änderungen -- und schon liefert die
Baumstruktur etliche neue Ansichten.

image::virtual_host_tree_view_modern.png[]
