// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#test]
== Test und Fehlerdiagnose

Sobald Sie den Agent installiert und registriert haben, stellen Sie sich sicher die Frage, wie Sie ausprobieren können, ob Sie alles richtig gemacht haben.
Alle Möglichkeiten, die es vom {CMK} Server aus gibt, sind im allgemeinen Kapitel über die Agenten xref:wato_monitoringagents#diagnostics[beschrieben].
Aber natürlich gibt es noch weitere Diagnosemöglichkeiten, wenn man direkt auf dem überwachten Host selbst eingeloggt ist.

Da der neue Agent die beiden Komponenten Agent Controller auf dem Host und Agent Receiver auf dem {CMK} Server einführt, steigt die Zahl der Stellen, an denen etwas schief gehen kann.
Wir arbeiten uns im folgenden vom Agentenskript über den Agent Controller zur {CMK} Instanz durch.


[#script_output]
=== Ausgabe des Agentenskripts

Das Agentenskript ist ein einfaches Shellskript, welches Daten über Ihr System beschafft und als lose formatierten Text ausgibt.
Sie können es direkt auf der Kommandozeile aufrufen.
Da die Ausgabe etwas länger sein kann, ist `less` hier sehr praktisch, das Sie in der Ausgabe mit der Taste Q verlassen können:

[{shell-raw}]
----
{c-root} check_mk_agent | less
<<<check_mk>>>
Version: 2.1.0b1
AgentOS: linux
Hostname: mynewhost
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
LocalDirectory: /usr/lib/check_mk_agent/local
AgentController: cmk-agent-ctl 0.1.0
----

So können Sie testen, ob in der Ausgabe alle gewünschten Daten enthalten sind – beispielsweise, ob alle installierten Plugins Daten liefern.

Sie müssen übrigens nicht unbedingt `root` sein, um den Agenten aufzurufen.
Allerdings werden dann in der Ausgabe eventuell einige Informationen fehlen, zu deren Beschaffung `root`-Rechte erforderlich sind (z.B. Multipath-Informationen und die Ausgaben von `ethtool`).


=== Agentenskript im Debug-Modus

Damit eventuelle Fehlerausgaben von nicht funktionierenden Plugins oder Befehlen nicht die eigentlichen Daten „verunreinigen“, unterdrückt das Agentenskript generell den Standardfehlerkanal.
Sind Sie auf der Suche nach einem bestimmten Problem, können Sie diesen wieder aktivieren, indem Sie das Agentenskript in einem speziellen Debug-Modus aufrufen.
Das machen Sie mit der Option `-d`.
Dabei werden auch sämtliche Shellbefehle ausgegeben, die das Skript ausführt.

Damit Sie hier mit `less` arbeiten können, müssen Sie Standardausgabe und Fehlerkanal mit `2>&1` zusammenfassen:

[{shell}]
----
{c-root} check_mk_agent -d 2>&1 | less
----


=== Agent Controller im Dump-Modus

Der Agent Controller stellt ein eigenes Subkommando `dump` bereit, das die vollständige Agentenausgabe anzeigt, wie sie im Monitoring ankommt:

[{shell-raw}]
----
{c-root} cmk-agent-ctl dump | less
<<<check_mk>>>
Version: 2.1.0b1
AgentOS: linux
Hostname: mynewhost
----

So können Sie überprüfen, ob die Daten vom Agentenskript beim Agent Controller angekommen sind. 
Diese Ausgabe beweist noch nicht, dass der Agent auch über das Netzwerk erreichbar ist.


=== Verbindungstest von außen

Ist sichergestellt, dass lokal das Agentenskript und die asynchronen Plugins korrekt ausgeführt werden, können Sie als nächstes vom {CMK} Server per `netcat` (oder `nc`) prüfen, ob Port 6556 erreichbar ist:
// TK: Die asynchronen Plugins kommen aber bisher (?) nicht vor. 

[{shell}]
----
{c-omd} echo | nc 10.76.23.189 6556
16
----
// TK: "echo -n -e "\x10" | nc 10.76.23.189 6556" geändert zu "echo | nc 10.76.23.189 6556" (keine Ahnung wofür echo -n -e "\x10" gut war...)

Die Ausgabe `16` zeigt an, dass die Verbindungsaufnahme erfolgreich war und nun der TLS-Handshake stattfinden kann.
// TK: Was hat die 16 mit der Verbindungsaufnahme zu tun? Bitte erklären.
Da alles weitere hier TLS verschlüsselt stattfindet, ist keine detaillierte Prüfung möglich.

*Hinweis:* Falls die Kommunikation zwischen Agent und {CMK} Server _noch_ unverschlüsselt ist (wie im Legacy-Pull-Modus) oder unverschlüsselt ist und auch bleibt (wie im xref:agent_linux_legacy#[Legacy-Modus]), erhalten Sie mit diesem Kommando statt der `16` die komplette unverschlüsselte Agentenausgabe.


=== Test mit der {CMK} Kommandozeile

Statt mit `nc` können Sie mit dem {CMK} Kommandozeilentool die komplette Agentenausgabe anfordern und sich anzeigen lassen.
Der folgende Befehl fügt noch einige Debugging-Informationen hinzu. 

[{shell-raw}]
----
{c-omd} cmk --debug -v -d  mynewhost
----

// REMOVE-AFTER-BETA
Eventuell enthält die Ausgabe lediglich einen Debug Trace wie folgt:

[{shell-raw}]
----
[TCPFetcher] Execute data source
Traceback (most recent call last):
  File "/omd/sites/mysite/lib/python3/cmk/core_helpers/tcp.py", line 194, in _wrap_tls
    return ctx.wrap_socket(self._socket, server_hostname=str(controller_uuid))
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 500, in wrap_socket
    return self.sslsocket_class._create(
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 1040, in _create
    self.do_handshake()
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 1309, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: TLSV1_ALERT_ACCESS_DENIED] tlsv1 alert access denied (_ssl.c:1129)
[...]
cmk.utils.exceptions.MKFetcherError: Error establishing TLS connection
----

In diesem Fall sollten Sie zunächst mit `root`-Rechten auf dem neuen Host den Status der Verbindung ermitteln:

[{shell-raw}]
----
{c-root} cmk-agent-ctl status
----
// TK: "systemctl cmk-agent-ctl-daemon status" geändert zu "cmk-agent-ctl status"

// REMOVE-AFTER-BETA
Zeigt dieses Kommando eine korrekte Registrierung am {CMK} Server, genügt in vielen Fällen ein einfacher Neustart des Agent Controller Daemons:
// TK: Warum soll ich neustarten, wenn eine korrekte Registrierung angezeigt wird?

[{shell-raw}]
----
{c-root} systemctl restart cmk-agent-ctl-daemon
----
// TK: "systemctl cmk-agent-ctl-daemon restart" geändert zu "systemctl restart cmk-agent-ctl-daemon"
