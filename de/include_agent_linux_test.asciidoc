// -*- coding: utf-8 -*-
include::global_attr.adoc[]

[#test]
== Test und Fehlerdiagnose

=== Übersicht

Da der neue Agent die beiden Komponenten Agent Controller auf dem überwachten Host und den Agent Receiver auf dem {CMK}-Server einführt, steigt die Zahl der Stellen, an denen etwas schief gehen kann.
Zunächst ist das Agentenskript weiterhin ein einfaches Shellskript, welches Daten über Ihr System beschafft und als lose formatierten Text ausgibt.
Sie können es direkt auf der Kommandozeile aufrufen:

[{shell-raw}]
----
{c-root} check_mk_agent | head -n10
<<<check_mk>>>
Version: 2022.02.21
AgentOS: linux
Hostname: mynewhost
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
LocalDirectory: /usr/lib/check_mk_agent/local
AgentController: cmk-agent-ctl 0.1.0
----


=== Debug-Modus

Damit eventuelle Fehlerausgaben von nicht funktionierenden Plugins oder Befehlen nicht die eigentlichen Daten „verunreinigen“, unterdrückt der Agent generell den Standardfehlerkanal.
Sind Sie auf der Suche nach einem bestimmten Problem, können Sie diesen wieder aktivieren, indem Sie den Agenten in einem speziellen Debug-Modus aufrufen.
Das machen Sie mit der Option `-d`.
Dabei werden auch sämtliche Shellbefehle ausgegeben, die der Agent ausführt.

Damit Sie hier mit `less` arbeiten können, müssen Sie Standardausgabe und Fehlerkanal mit `2>&1` zusammenfassen:

[{shell}]
----
{c-root} check_mk_agent -d 2>&1 | less
----


=== Agent Controller im Dump-Modus

Der Agent Controller stellt ein eigenes Subkommando `dump` bereit, das die vollständige Agentenausgabe anzeigt, wie sie im Monitoring ankommt:

[{shell-raw}]
----
{c-root} cmk-agent-ctl dump
<<<check_mk>>>
Version: 2022.02.21
AgentOS: linux
Hostname: mynewhost
----

Da die Ausgabe etwas länger sein kann, ist `less` hier sehr praktisch (Sie können es mit der Taste Q verlassen):

[{shell}]
----
{c-root} cmk-agent-ctl dump | less
----


=== Verbindungstest von außen

// TK: Die asynchronen Plugins kommen aber bisher (?) nicht vor. 
Ist sichergestellt, dass lokal das Agentenskript und die asynchronen Plugins korrekt ausgeführt werden, können Sie als nächstes vom {CMK}-Server aus zunächst per `netcat` (oder `nc`) prüfen, ob Port 6556 erreichbar ist:

// TK: Kannst Du hier bitte beschreiben, was Du mit echo -n -e "\x10" machst?
[{shell}]
----
{c-omd} echo -n -e "\x10" | nc 10.76.23.189 6556
16
----

Die Ausgabe `16` zeigt an, dass die Verbindungsaufnahme erfolgreich war.
Da alles weitere hier TLS verschlüsselt stattfindet, ist so keine detaillierte Prüfung möglich.


=== Test mit der {CMK}-Kommandozeile

Stattdessen können Sie mit dem {CMK}-Kommandozeilentool die komplette Agentenausgabe anfordern und sich anzeigen lassen.
Der folgende Befehl fügt noch einige Debugging-Informationen hinzu. 

[{shell-raw}]
----
{c-omd} cmk --debug  -v -d  mynewhost
----

// REMOVE-AFTER-BETA
Eventuell enthält die Ausgabe lediglich einen Debug Trace wie folgt:

[{shell-raw}]
----
[TCPFetcher] Execute data source
Traceback (most recent call last):
  File "/omd/sites/mysite/lib/python3/cmk/core_helpers/tcp.py", line 194, in _wrap_tls
    return ctx.wrap_socket(self._socket, server_hostname=str(controller_uuid))
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 500, in wrap_socket
    return self.sslsocket_class._create(
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 1040, in _create
    self.do_handshake()
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 1309, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: TLSV1_ALERT_ACCESS_DENIED] tlsv1 alert access denied (_ssl.c:1129)
[...]
cmk.utils.exceptions.MKFetcherError: Error establishing TLS connection
----

In diesem Fall sollten Sie zunächst mit `root`-Rechten auf dem neuen Host den Status der Verbindung ermitteln:

// TK: Warum jetzt mit systemctl und nicht mehr cmk-agent-ctl status?
// TK: Bei mir krieg ich nur die Ausgabe: Unknown operation cmk-agent-ctl-daemon
[{shell-raw}]
----
{c-root} systemctl cmk-agent-ctl-daemon status 
----

// REMOVE-AFTER-BETA
Zeigt dieses Kommando eine korrekte Registrierung am {CMK}-Server, genügt in vielen Fällen ein einfacher Neustart des Agent Controller Daemons:

[{shell-raw}]
----
{c-root} systemctl cmk-agent-ctl-daemon restart
----
