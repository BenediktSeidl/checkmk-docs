include::global_attr.adoc[]
= Ansichten von Hosts und Services (Views)
:revdate: 2016-04-15
:title: Ansichten und deren Möglichkeiten im Detail
:description: Ansichten sind in der checkmk sehr mächtig und können indiviuell erstellt oder angepasst werden. Wie Sie Ansichten effektiv nutzen, erfahren Sie hier.

[TIP]
.Related Articles:
====
link:user_interface.html[]

link:dashboards.html[]

link:graphing.html[]

====

== Einleitung

Die wichtigste Aufgabe der link:user_interface.html[Benutzeroberfläche] von {CMK} ist das Anzeigen
des aktuellen Status von Hosts und Services. Dies geschieht größtenteils in
tabellarischen [.guihint]#Ansichten#, welche in der englischen Oberfläche mit [.guihint]#Views#
bezeichnet werden.  Damit das tägliche Arbeiten mit {CMK} so effizient
wie möglich abläuft, bieten diese Tabellenansichten zahlreiche nützliche Funktionen
und Sie können sie an Ihre Anforderungen anpassen.

Wir unterscheiden zwischen *globalen* Views und solchen, die einen
*Kontext* benötigen. Globale Views können immer direkt aufgerufen
werden. Ein Beispiel ist die Liste aller aktuellen Service-Probleme. Einen
Kontext benötigt z.B. die Ansicht [.guihint]#Status of Host ...#  --  nämlich die Angabe
desjenigen Hosts, dessen Status angezeigt werden soll. Solche Views können nur
in Situationen aufgerufen werden, in denen es um einen bestimmten Host geht.

Die globalen Ansichten erreichen Sie am einfachsten über die
Seitenleistenelemente [.guihint]#Tactical Overview# und [.guihint]#Views#. In der Tactical
Overview ist jede der Zahlen anklickbar und bringt Sie zu einer globalen
Ansicht, die die jeweils gezählten Hosts oder Services einzeln auflistet.

image::tactical_overview.png[align=center, width=42%]

Im [.guihint]#Views#-Element sind alle globalen Ansichten erreichbar  --  gruppiert nach
Thema. Zudem finden Sie einige Einträge, die eigentlich keine [.guihint]#Views# sind  --
wie z.B. die link:dashboards.html[Dashboards], welche unter dem Thema [.guihint]#Overview# einsortiert sind.
Dashboards können aber Views _enthalten_.

image::snapin_views.png[align=center, width=42%]

Von einer globalen Ansicht aus gelangen Sie zu den Einzelheiten eines
bestimmten Hosts oder Services in einem weiteren Schritt. Zum einen sind
die Namen von Hosts und Services und auch andere Spalten in den einzelnen
Zellen anklickbar und bringen Sie zu Detailansichten:

[.border]
image::views_all_hosts.png[]

Zum anderen finden Sie in Ansichten, _die einen bestimmten Host
oder Service betreffen_, oben eine Reihe von Knöpfen, die Sie mit
icon:context_button_dots[] aufklappen können.  Diese Knöpfe zeigen
dann weitere Ansichten mit dem gleichen Kontext  --  also vom gleichen Host
oder Service.

[.border]
image::views_context_buttons.png[]

Ein weiterer Weg zu Detailansichten ist die Schnellsuche in der Seitenleiste:

image::snapin_quicksearch.png[align=center, width=42%]

Zu welcher Ansicht Sie damit gelangen, hängt vom Ergebnis der Suche ab. Wenn
die Suche einen Host eindeutig ermittelt, dann gelangen Sie direkt zur
Seite [.guihint]#Services of host ...# dieses Hosts. Dort finden Sie dann wieder die
Knöpfe zu den anderen Ansichten des gleichen Hosts. Ein Klick auf den Namen des
Hosts bringt Sie beispielsweise zur Ansicht [.guihint]#Status of host#.

//SK: Wann auch immer das mal so war. Inzwischen kann ich das über Edit View noch nicht mal mehr so einstellen.
//Besonders praktisch: Ein Klick auf den Namen des Hosts bringt Sie zur Detailansicht über die Erreichbarkeit des Hosts:

[.border]
image::views_services_of_host.png[]


== Ansichten verwenden

=== Optionen, Filter und Kommandos

Jede Ansicht hat links oben sechs Symbole, mit denen Sie die Darstellung beeinflussen
und Aktionen auslösen können:

[#filter]

[cols="8,~"]
|===

|icon:icon_filter[] |Öffnet den Dialog mit den [.guihint]#Filtern#. Damit können Sie die gezeigten Daten weiter einschränken. Sobald Sie einen Filter gesetzt haben, ändert sich das Symbol auf icon:button_filters_set_lo[], damit klar ist, dass unter Umständen nicht alle Daten angezeigt werden.  Umgekehrt haben manche Views schon Filter vorbelegt (z.B. die Liste alle Problem). Hier können Sie durch Entfernen der Filter auch mehr Daten anzeigen lassen.  Änderungen der Filter werden nicht gespeichert, sondern wieder zurückgesetzt, sobald Sie die Ansicht verlassen.
|icon:view_button_options[] |Öffnet die _Anzeigeoptionen_, mit denen Sie z.B. das Format von Zeitangaben (relativ oder absolut) einstellen können. Welche Optionen Ihnen angeboten werden, hängt von den jeweils in der Ansicht angezeigten Information ab.
|icon:icon_commands[] |Hier können Sie link:commands.html[Kommandos] auf den gezeigten Objekten ausführen (z.B. Eintragen von Wartungszeiten). Die Kommandos sind detailliert in einem link:commands.html[eigenen Artikel] beschrieben.
|icon:icon_checkbox[] |Damit schalten Sie Checkboxen ein oder aus. Mit den Checkboxen können Sie die Kommandos auf ausgewählte Datensätze einschränken.
|icon:view_button_columns[] |Dieses Rädchen können Sie durch Klicken oder mit dem Mausrad drehen. Es legt die Anzahl der Spalten für die gewählte Ansicht fest. Mehrspaltige Ansichten helfen, auf breiten Monitoren den verfügbaren Platz auszunutzen. Bei Ansichten, die nur einen Datensatz anzeigen, ist diese Einstellung wirkungslos.
|icon:view_button_refresh[] |Dieses Rädchen legt fest, in welchem Intervall die Ansicht neu geladen wird. Sie können damit das automatische Neuladen auch ganz abschalten. Bitte beachten Sie, dass es in diesem Fall sein kann, dass Sie über ein inzwischen aufgetretenes Problem nicht informiert werden!
|===


=== Zeit- und Datumsangaben

{CMK} zeigt in seinen Statusansichten alle Zeitangaben, die weniger als
24 Stunden in der Vergangenheit oder Zukunft liegen, als relative Angaben  --
also z.B. [.guihint]#16 hrs#. Sie können das auf absolute Zeitangaben umstellen, indem
Sie die icon:view_button_options[] Anzeigeoption [.guihint]#Time stamp format# auf
[.guihint]#Absolute# stellen.


=== Sortierung

Die tabellarischen Ansichten können Sie durch ein Klicken auf die
Spaltenüberschriften sortieren.  Dabei gibt es drei Zustände einer Spalte,
die durch mehrfaches Klicken im Kreis herum der Reihe nach ausgewählt werden:

* Aufsteigend sortieren
* Absteigend sortieren
* Nicht mehr nach dieser Spalte sortieren

Zunächst wird eine Ansicht immer auf eine natürliche Art sortiert, die in
der Ansicht selbst festgelegt ist. Bei den Servicelisten ist die Sortierung
immer alphabetisch nach dem Namen des Services  --  mit der Ausnahme, dass die
_Check_MK_-Services immer oben stehen. Neben dem Service [.guihint]#Check_MK#,
der für die Abfrage des Monitoring-Agenten zuständig ist, sind das noch
[.guihint]#Check_MK Discovery# und [.guihint]#Check_MK HW/SW Inventory#. Um eine solche Liste
nach dem aktuellen Status der Services zu sortieren genügt ein Klick auf
[.guihint]#STATE#.

[.border]
image::views_sort_by_state.png[]

Die Sortierung nach der Spalte [.guihint]#Perf-O-Meter# führt manchmal zu
überraschenden Ergebnissen. Das liegt daran, dass die grafische Darstellung
der link:graphing.html[Messwerte] teilweise eine prozentuale Zusammenfassung der eigentlichen
Werte zeigt. Die Sortierung geschieht aber nach den absoluten Werten  --
und zwar immer nach der _ersten Metrik_, die ein Service ausgibt.


[#export]
=== Export

Sie können die in einer Ansicht gezeigten Daten in verschiedenen Formaten exportieren:

[cols=2]
|===
|Format |Vorgehen 

|PDF |Nur {EE}: Den Knopf für den PDF-Export icon:button_export_as_pdf[] finden Sie am Kopf der Ansicht  --  evtl. versteckt unter icon:context_button_dots[].   Hierbei wird ein sogenannter _Instant-Report_ erzeugt. Das ist quasi ein auf die Schnelle erzeugter Bericht mit nur einem   Element. Das Aussehen können Sie über spezielle Schablonen im link:reporting.html[Berichtsmodul] anpassen.
|CSV |Das Symbol icon:button_download_csv[] zum CSV-Export finden Sie ganz unten am Fuß der Seite. Als Trennzeichen wird ein   Semicolon verwendet. Die einzelnen Zellen sind in Anführungszeichen eingeschlossen. In der ersten Zeile sind die   internen Kürzel für die einzelnen Spalten eingetragen.   Manche der Spalten können nicht sinnvoll in CSV umgewandelt werden. Ein Beispiel dafür   sind die [.guihint]#Icons#. Diese Spalten sind in der CSV-Datei trotzdem enthalten aber leer.
|JSON |Weil ein JSON-Export in der Regel für automatische Skripten benutzt wird,   gibt es dafür kein Symbol. Sie erhalten den Export durch ein Hinzufügen von `&output_format=json` an die   URL der Ansicht. Sie können das einfach ausprobieren, indem Sie zunächst das Frameset mit der Seitenleiste   verlassen und nur den Frame mit der Ansicht anzeigen. Das geht z.B. über das Symbol icon:button_frameurl[]   am Ende der Seite. Dann können Sie im Browser die URL ergänzen.
|JSONP |   JSONP ist fast das Gleiche wie JSON, aber syntaktisch wird der Aufruf einer Javascript-Prozedur realisiert.   Geben Sie dazu als Format `jsonp` an sowie den Namen der   JSON-Prozedur in der Variable `jsonp`. Beispiel: ...`&output_format=jsonp&jsonp=myfunc`.
|Python |Der Export als Python-Datenstruktur geschieht analog zu JSON, wobei Sie als Format `output_format=python` angeben.   Dies ist besonders praktisch, wenn Sie die Daten direkt in einem Python-Skript weiterverarbeiten möchten.
|===



[#limit]
=== Das Anzeigelimit

Bei einer größeren Monitoringumgebung sind nicht mehr alle Ansichten sinnvoll.
Wenn Sie 50.000 Services überwachen und die Ansicht [.guihint]#All Services# anwählen,
würde die Darstellung nicht nur sehr lange brauchen  --  sie wäre auch wenig
nützlich.

Um den Benutzer in solchen Situationen vor langen Wartezeiten zu schützen
und das System nicht durch absurde Datenmengen in die Knie zu zwingen,
sind Ansichten auf die Anzeige von 1000 Einträgen begrenzt. Bei einer
Über&shy;schreitung erhalten Sie folgenden Hinweis:

image::views_limit1.png[align=center, width=80%]

Wie Sie sehen, werden Sie darauf hingewiesen, dass die gezeigten Datensätze
nicht unbedingt die ersten 1000 gemäß der gewählten Sortierung sind! Das
hat einen technischen Hintergrund: Die Limitierung wird nämlich bereits an
der Quelle der Daten durchgesetzt: in den Monitoringkernen der angebundenen Instanzen.
Das ist sehr wichtig: Denn wenn wir erst eine Million
Datensätze aus Ihrer weltweit verteilten Umgebung zusammensammeln würden, um
gleich danach 99,9% der Daten wieder wegzuwerfen, dann wäre das Kind ja schon in den Brunnen
gefallen. Die Sortierung übernimmt erst am Ende die Oberfläche  --   es geschieht also
_nach_ der Limitierung. Denn die Daten von allen Instanzen müssen ja
gemeinsam sortiert werden.

Sofern Sie wirklich der Meinung sind, mehr als 1000  Datensätze sehen zu
wollen, können Sie durch einen Klick auf [.guihint]#Repeat query and allow more results#
ins nächste Level kommen. Hier greift eine Begrenzung auf 5000 Datensätze.
Ist diese wieder überschritten, so können Sie _ganz ohne Limit_ fortfahren.
Da dies eine gefährliche Operation sein kann, benötigt sie _Administratorrechte_.
Sie wurden gewarnt!

image::views_limit2.png[align=center, width=80%]

Sie können die beiden Stufen unter [.guihint]#WATO|Glboal Settings# unter [.guihint]#User interface#
anpassen:

image::views_limit3.png[]


[#edit]
== Ansichten anpassen


=== Grundsätzliches

{CMK} erlaubt Ihnen, die mitgelieferten Ansichten anzupassen und sogar
ganz Neue zu erzeugen, welche Sie dann auch in link:reporting.html[Berichte]
und link:dashboards.html[Dashboards] einbauen können. Dabei können Sie bei jeder
Ansicht eine Menge verschiedener Aspekte bestimmen:

* *Allgemeine Dinge* wie Titel, Thema, usw.
* Welche *Datenquelle* wird dargestellt (z.B., Hosts, Services, Events der Event Console, etc.)?
* Welche Auswahl an Datensätzen wird dargestellt (*Filterung*)?
* Welche *Spalten* werden dargestellt?
* Zu welchen anderen Ansichten *verlinken* die Texte in den Spalten?
* Wie wird standardmäßig *sortiert*?
* Gibt es eine *Gruppierung,* und falls ja, wie sieht diese aus?
* Wo und für welche Benutzer soll die Ansicht *sichtbar* sein?
* Welche Art von *Tabellenlayout* soll verwendet werden?

Den Editiermodus für Views erreichen Sie auf zwei Arten:

. Bei einer bestehenden View über den Knopf icon:context_button_edit_view[] (welcher evtl. hinter icon:context_button_dots[] versteckt ist).
. Im Seitenleistenelement [.guihint]#Views# über den Knopf icon:button_view_snapin_edit[]. Dort können Sie mit icon:context_button_new[] ganz neue Ansichten erzeugen oder mit icon:button_clone[] bestehende anpassen:

[.border]
image::views_edit_views.png[]


=== Erst klonen,  dann verändern

Da die mitgelieferten Ansichten Teil der Software sind und somit nicht
verändert werden können, kennt {CMK} das Konzept vom _Klonen_. Beim
ersten Anpassen einer View (egal ob mit icon:context_button_edit_view[] oder
über die Liste) wird automatisch eine Kopie der Ansicht für Sie erzeugt.
Diese Kopie ist dabei Ihrem Benutzerprofil zugeordnet.

Die Kopie können Sie dann so anpassen, wie Sie es möchten. Die urpsrüngliche
Ansicht bleibt erhalten, wird aber _verschattet_  --  also durch Ihre Kopie
verdeckt. Sie können später einfach zur Standardansicht zurückkehren,
indem Sie Ihren Klon löschen (das geht dann in Tabelle der Views wie erwartet
mit icon:icon_delete[]).

Dieses Konzept hat noch einen weiteren Vorteil: Sie können nämlich bestimmen, ob
die Ansicht _für alle Benutzer_ geändert sein soll, oder nur für Sie
selbst. Dies legen Sie in den [.guihint]#General Properties# der Ansicht mit der
Checkbox [.guihint]#Make this view available for all users# fest. Es überrascht
wohl nicht, dass Sie diese Checkbox nur dann setzen können, wenn
Sie link:wato_user.html#roles[Administratorrechte] haben (genau genommen gibt es dafür eine eigene
Berechtigung mit dem Namen [.guihint]#Publish views#). Zusätzlich können einzelne
Ansichten  in den link:wato_user.html#roles[Rollendefinitionen] gesperrt werden.

Was ist nun, wenn eine Ansicht von mehreren Benutzern angepasst und
freigegeben wurde?  Jeder der Benutzer hat dann nämlich eine eigene Variante
der View. Welche davon wird für wen sichtbar? Dies wird durch folgende
Regeln bestimmt:

. Wenn ein Benutzer für sich selbst eine Ansicht erzeugt hat, hat diese für ihn immer Vorrang.
. Danach gelten Ansichten, die ein Adminbenutzer angepasst und freigegeben hat (genau gesagt jemand mit dem Recht [.guihint]#Modify builtin views#).
. Gibt es hier keine, so gelten Ansichten, die ein anderer normaler Benutzer mit dem Recht [.guihint]#Publish views# freigegeben hat.
. Und wenn es hier auch keine gibt, dann wird die ausgelieferte Variante sichtbar.

Wie können Sie nun aber eine _echte Kopie_ einer Ansicht erstellen,
also am Ende beide Ansichten sehen  --  die mitgelieferte und
Ihre Version? Dies wird über die [.guihint]#Unique ID# in den [.guihint]#General Properties#
gesteuert. Ändern Sie einfach die ID Ihrer View auf einen anderen Wert. Damit gilt die
View nicht mehr als Klon der mitgelieferten View sondern beginnt ein eigenes
Leben.

Die ID ist übrigens auch die entscheidende Angabe in der URL, über die
Views aufgerufen werden. Das Schema ist ganz einfach. So wird z.B. die
globale View mit der ID `allhosts` wie folgt aufgerufen:

`/mysite/check_mk/view.py?view_name=allhosts`

Das Konzept mit dem Klonen und Anpassen und der Sichtbarkeit finden Sie
übrigens auch an vielen anderen Stellen von {CMK}, nämlich bei:

* link:dashboards.html[Dashboards]
* link:reporting.html[Berichten]
* link:graphing.html#graph_collections[Graphensammlungen]
* link:graphing.html#custom_graphs[Freiformgraphen]
* link:user_interface.html#bookmarks[Lesezeichenlisten]

=== Integration einer View in die Seitenleiste

Wie und ob eine View in der Seitenleiste im Element [.guihint]#Views# angezeigt wird,
legen folgende Eigen&shy;schaften unter [.guihint]#General Properties# fest:

image::views_edit_view_general_properties.png[]

* [.guihint]#Title#  --  dies wird der Name des Eintrags.
* [.guihint]#Topic#  --  unter diesem Thema wird die View einsortiert. Sie können auch eigene Themen definieren.
* [.guihint]#Hide this view from the sidebar#  --  damit können Sie den Eintrag unterdrücken.

=== Kontextknöpfe zu einer View

Ein [.guihint]#Context Button# ist ein Knopf, der nur bei Views sinnvoll ist, die einen
Kontext haben. Ein Beispiel ist der Knopf icon:button_host_services[], welcher
zur Ansicht `host` verlinkt (und immer dann angezeigt wird, wenn ein
Host bekannt ist). Dies ist in den Eigenschaften dieser View festgelegt:

* Die View hat einen *Kontext*, nämlich [.guihint]#Show information of single... host#.
* Als [.guihint]#Icon# für den Knopf ist icon:icon_status[] ausgewählt.
* Der [.guihint]#Button Text# ist auf `Services` eingestellt.
* Die Checkbox [.guihint]#Do not show a context button to this view# ist *deaktiviert*.

Damit sind alle Bedingungen erfüllt und wann immer wir uns im Kontext eines Hosts
bewegen, wird der Knopf zu dieser View erscheinen (wie immer möglicherweise hinter icon:context_button_dots[]).


=== Grundlegendes Layout

Der nächste Block [.guihint]#View Properties# bestimmt das generelle Aussehen der View:

image::views_edit_view_view_properties.png[]

Die Einstellung [.guihint]#Number of columns# gilt als Vorbelegung für
das icon:view_button_columns[] Rädchen zum Einstellen der
Spaltenzahl. Analog ist [.guihint]#Automatic page reload# die Vorbelegung für das
icon:view_button_refresh[] Refresh-Rädchen.

Unter [.guihint]#Basic Layout# gibt es verschiedene Arten, wie die Daten in Tabellen
dargestellt werden. Die meisten Ansichten verwenden [.guihint]#Table#  --  eine normale
Tabelle, die nach Spalten sortierbar ist  --  oder [.guihint]#Single dataset#  --
welches die Legende links hat und meist für einzelne Datensätze verwendet wird.
Sie können [.guihint]#Single dataset# aber auch für Ansichten mit mehr als einem Objekt
verwenden. Die Ansicht [.guihint]#All hosts# sieht nach einer Umstellung auf
[.guihint]#Single dataset# etwa so aus:

image::views_layout_single_dataset.png[]

=== Spalten und Gruppierung

Der Kasten [.guihint]#Columns# legt fest, welche Spalten Sie sehen. Die
mögliche Auswahl von Spalten hängt von der gewählten Datenquelle ab. Am
meisten Spalten finden Sie bei den Services, denn hier sind natürlich auch
alle Informationen über den jeweiligen Host verfügbar. Die Liste kann hier
schon recht lang werden und wenn Sie nicht sicher sind, welche Spalte die
richtige ist, hilft nur eins: Ausprobieren.

image::views_edit_view_columns.png[]

Das Feld [.guihint]#Link# bietet eine eine Auswahl von allen Ansichten.
Ist hier eine Ansicht ausgewählt, dann ist die jeweilige Zelle dieser
Spalte _anklickbar_ und bringt den Benutzer zur gewählten Ansicht.
Wirklich sinnvoll ist das natürlich nur, wenn die Zielansicht einen Kontext
hat. Bestes Beispiel ist die Ansicht [.guihint]#All hosts#. Die Spalte [.guihint]#Hostname#
ist hier anklickbar und bringt den Benutzer dann zu [.guihint]#Services of host#  --
von diesem Host. Seit {CMK} VERSION[1.6.0] ist es an dieser Stelle auch möglich
den Hostnamen entsprechend seines Status farblich zu hinterlegen.

Unter [.guihint]#Tooltip# werden Sie wiederum die Liste aller Spalten finden.
So können Sie eine weitere Information zu dem Host oder Service
einblenden, sobald der Benutzer mit der Maus über die jeweilige
Zelle fährt (wie hier im Beispiel die IP-Adresse).

[.border]
image::views_hover_address.png[]

=== Information über Services in einer Host-Ansicht

Stellen Sie sich vor, Sie möchten gerne Informationen zu bestimmten Services
in einer Tabelle von Hosts anzeigen. Das folgende Beispiel zeigt ein sehr schönes
Beispiel für so etwas: Zu jedem Host werden die aktuelle Uptime, die CPU-Last,
der Speicherverbrauch und die NTP-Synchronisation ausgegeben:

[.border]
image::views_joined_columns_example.png[]

Hier wurde eine Tabelle von Hosts erstellt, in der für jeden Host die *Servicespalte*
[.guihint]#Perf-O-Meter# von je vier verschiedenen Services angezeigt wird. Man sieht auch,
dass bei einem der drei Hosts die Services [.guihint]#CPU load# und [.guihint]#Memory# nicht
existieren und die Spalten dort konsequenterweise leer ist.

Die Konfiguration dieser Ansicht geschah über das Hinzufügen von Spalten vom Typ [.guihint]#Joined column#.
Hier erscheinen dann unter [.guihint]#Column:# die Spalten für Services und es wurde [.guihint]#Perf-O-Meter# ausgewählt.
Der Eintrag [.guihint]#Titel# bestimmt dann die Überschrift der Spalte. Unter [.guihint]#Of Service# ist der
*exakte* Name des Services eingetragen (Groß-/Kleinschreibung beachten!):

image::view_service_column_2.png[]

So eine Darstellung ist natürlich nur dann nützlich, wenn die Ansicht eine Liste von ähnlichen
Hosts anzeigt, welche auch alle über die gewählten Services verfügen. Das ist auch der Grund,
warum {CMK} keine derartigen Ansichten mit ausliefert: Welche Spalten hier sinnvoll sind,
hängt absolut von der Art der gewählten Hosts ab. Bei Linux-Servern interessieren sicherlich
völlig andere Informationen als z.B. bei USVs.


=== Sortierung

Die Sortierung einer Ansicht konfigurieren Sie im vierten Block. Es handelt
sich dabei nur um die voreingestellte Sortierung: Der Benutzer kann wie
oben beschrieben über einen Klick auf die Spaltentitel die Sortierung
für sich anpassen. In der Konfiguration der View haben Sie aber mehr
Möglichkeiten: Sie können eine _mehrstufige_ Sortierung einstellen,
z.B. zuerst nach dem Service-Status, und bei gleichem Status nach dem Namen
des Services. Die so eingestellte Reihenfolge bleibt auch als nachrangige
Sortierung erhalten, wenn der Benutzer nach einer bestimmten Spalte
umsortiert.

image::edit_view_sorting.png[]

=== Gruppierung

Durch Gruppierung zerteilen Sie eine Tabelle in mehrere Abschnitte  --  wobei
jeder Abschnitt Daten anzeigt, die irgendwie zusammengehören. Das beste
Beispiel ist die Ansicht [.guihint]#Service problems#, welche Sie bequem über die
[.guihint]#Tactical overview# erreichen.  Wie Sie sehen können, ist diese Tabelle
gruppiert nach dem _Servicestatus_ (zuerst alle {CRIT}, dann {UNKNOWN},
dann {WARN}):

[.border]
image::edit_view_grouping.png[]

Die Gruppierung in einer View konfigurieren Sie analog zu den Spalten.
Legen Sie einfach fest, nach welchen Spalten gruppiert werden
soll. Meist ist das nur eine einzige, aber es können auch mehrere sein. Alle
Datensätze mit dem gleichen Wert für alle gewählten Spalten werden dann in einer Gruppe
angezeigt. Und die Spalteninformation wird jeweils als Gruppentitel
anzeigt.

Es ist wichtig, dass Sie die Datensätze auch vorranging nach der gewählten
Gruppeneigenschaft *sortieren*! Andernfalls kann es sein, dass die gleiche
Gruppe mehrfach auftaucht (in Einzelfällen kann dies sogar gewünscht sein).
Übrigens: Ein Umsortieren nach einer Spalte durch den Benutzer hat keinen
Einfluss auf die Gruppierung: In diesem Fall wird nur die Reihenfolge der
Gruppen bestimmt und die Datensätze werden innerhalb der Gruppen sortiert. Die
Gruppen selbst bleiben erhalten.


=== Filter, Kontext und Suche

Ein wichtiger Aspekt von Views ist die _Selektion_ der Daten. Welche Hosts oder
Services sollen in der Tabelle angezeigt werden? {CMK} verwendet hierfür
das Konzept der *Filter.* Hier sind ein paar Beispiele für Host-Filter:

image::views_filter.png[]

Jeder Filter kann vom Benutzer mit Suchbegriffen oder anderen Kriterien
gefüllt werden und reduziert dann die Liste der Ergebnisse auf diejenigen
Datensätze, die die Kriterien erfüllen. Die Filter werden dabei
UND-verknüpft. Die Filterkriterien, die bei einer View dann tatsächlich
zum Einsatz kommen, werden aus drei Quellen zusammengestellt:

. Filter, die direkt in der View hinterlegt und mit Kriterien gefüllt sind
. Filter, die der Benutzer interaktiv in der View mit icon:view_button_filters[] gesetzt hat
. Filter, die per Variablen über die URL gesetzt werden

Die Filter, die Sie beim Editieren einer View im Kasten [.guihint]#Context / Search filters# zusammenstellen,
haben dabei zwei Funktionen. Zum einen legen Sie so fest, welche Filter dem Benutzer beim Klick
auf icon:view_button_filters[] angeboten werden. Zum anderen können Sie Filter bereits
mit Kriterien vorbelegen und so die in der View gezeigten Daten einschränken (Punkt 1 von oben).

Falls Sie eine View mit *Kontext* anlegen oder editieren, so tritt anstelle der Filter
des entsprechenden Objekts nur ein optionales Eingabefeld. In diesem gilt dann immer
ein _exakter_ Vergleich (Groß-/Klein&shy;schreibung beachten). Nehmen wir als Beispiel die View
`host`, welche alle Services eines _bestimmten_ Hosts anzeigt. Der Hostname wird
der View über einen Kontext mit auf den Weg gegeben. Sie können sich aber eine Ansicht bauen,
welche den gezeigten Host quasi *hart kodiert* direkt in der View festlegt:

image::view_filter_context.png[]

Damit können Sie diese View wieder ohne Kontext aufrufen und auf Wunsch
auch problemlos in das Seitenleistenelement [.guihint]#Views# einbinden.


=== Spezielle Such-Ansichten

Die mitgelieferten Ansichten [.guihint]#Host search# und [.guihint]#Service search# (und
auch andere) verhalten sich im Bezug auf die Filter auf eine spezielle Art: Wenn
Sie so eine Ansicht anwählen, so startet diese mit einem geöffnetem
Filter-Formular und zeigt erst dann Hosts oder Services an, wenn dieses
abgeschickt wurde.

Warum? Es wäre einfach sehr unpraktisch, wenn Sie erst auf [.guihint]#All services# gehen
müssten  --  dann warten bis viele tausend Services dargestellt würden  --
und erst dann durch eine Sucheingabe das Ergebnis filtern könnten. Dieses
Verhalten legt die Option [.guihint]#Show data only on search# fest:

image::view_search_only.png[]


[#new]
== Neue Ansichten erstellen

Das Erzeugen einer neuen View mit icon:context_button_new[] geht im Prinzip genauso wie
das Editieren einer bestehenden View  --  mit einem kleinen Unterschied: Sie müssen vorher
noch eine *Datenquelle* und einen *spezifischen Objekttyp* auswählen.

=== Datenquelle

image::new_view_1.png[]

Die Datenquelle ist das, was man in Datenbanken vielleicht als Tabelle oder Datenbank-View
bezeichnen würde. {CMK} verwendet zwar keine SQL-Datenbank, ist intern aber ähnlich
aufgebaut. In den meisten Fällen liegen Sie mit [.guihint]#All services# oder [.guihint]#All hosts# richtig.
Es gibt aber einige spezielle Datenquellen, die hier kurz aufgelistet werden sollen:

COMMENT[ML: Ab hier neue Tabelle und Absatz]
[cols=2]
|===
|Datenquelle |Bedeutung 

|Host- und Servicegruppen |siehe unten
|[.guihint]#Alert Statistics# |link:livestatus.html#Statistiken abrufen (Stats)[Statusstatistiken]
|BI, diverse |link:bi.html[Business Intelligence]
|[.guihint]#Event Console#, Host- und Service-Events |link:ec.html[Event Console]
|[.guihint]#Inventory#, diverse |link:inventory.html[Inventory]
|[.guihint]#The Logfile# |link:livestatus.html#logs[Livestatus-Daten]
|===


==== Host- und Servicegruppen
Die Datenquellen
[.guihint]#Hostgroups# und [.guihint]#Servicegroups# liefern je Zeile die
Informationen über die Gruppe selbst -- Filter für einzelne Hosts
oder Services gibt es entsprechend nicht. Ein Beispiel für diese
Datenquelle ist die Standardansicht [.guihint]#Host groups (Summary)#.
In verteilten Umgebungen erledigen die Datenquellen
[.guihint]#Hostgroups, merged# und [.guihint]#Servicegroups, merged# genau das Gleiche.

[.border]
image::views_hostgroups_summary.png[]

Wenn Sie hingegen Informationen zu einzelnen Hosts wünschen, lediglich
gruppiert nach Hostgruppen, können Sie
[.guihint]#Hosts grouped by host groups# verwenden. Hier wird jeder Host pro
Gruppenzugehörigkeit einmal aufgeführt; zu sehen in der Standardansicht
[.guihint]#Host groups#. In der Welt der Datenbanken würde man hier von einem
_Join_ der Tabelle [.guihint]#Hosts# mit der Tabelle [.guihint]#Hostgroups# sprechen. 

[.border]
image::views_hostgroups.png[]

Auf dieselbe Weise können Sie auch mit Services verfahren:
[.guihint]#Services grouped by host groups# entspricht einem Join der
Tabelle [.guihint]#Services# mit der Tabelle [.guihint]#Hostgroups# und
[.guihint]#Services grouped by service groups# entsprechend mit der Tabelle
[.guihint]#Servicegroups#.

Je nach ausgewählter Datenquelle stehen Ihnen unterschiedliche Spalten
zum Aufbau der Ansicht zur Verfügung.

=== Objekttyp: Global oder mit Kontext

image::new_view_2.png[]

Hier entscheidet sich, ob Ihre neue View einen Kontext haben oder ob es
eine globale Ansicht werden soll. Welche Auswahlmöglichkeiten Sie haben, hängt
von der gewählten Datenquelle ab. Der mit Abstand häufigste Kontext ist Host.
Die Abbildung von oben erscheint nach der Auswahl der Datenquelle [.guihint]#All services#.

Durch das Setzen der Checkbox [.guihint]#Show information of a single host# legen Sie fest,
dass die neue Ansicht genau einen Host beschreibt. So haben Sie die Grundlage
dafür geschaffen, dass die Ansicht nicht global, sondern verlinkt sichtbar wird:

* Bei einer Hostansicht mit einem Kontextknopf (evtl. hinter icon:context_button_dots[])
* Als Verknüpfung in einer Spalte (siehe oben, z.B. Klick auf Hostname in einer Ansicht)

Bei dem Kontexttyp [.guihint]#Service# gibt es zwei Möglichkeiten: Wenn Sie nur
[.guihint]#Show information of a single service# anwählen, können Sie eine Ansicht bauen,
die alle Services mit dem gleichen Namen aber auf _verschie&shy;denen Hosts_
anzeigt. Wenn es um einen ganz bestimmten Service von einem einzigen Host gehen
sollen, dann kreuzen Sie zusätzlich [.guihint]#Show information of a single host# an.

== Die Matrix

Wenn Sie das Layout [.guihint]#Matrix# bei einer Ihrer Ansichten einstellen, werden Sie
wahrscheinlich erstmal seltsame Dinge erleben und sich fragen, was das Ganze
soll. Die Matrix ist sicher nicht auf den ersten Blick einleuchtend, aber Sie können
damit tolle Dinge machen.

In den ausgelieferten Views gibt es eine, die dieses Layout verwendet  --
und zwar [.guihint]#Metrics|Search peformance data#. Folgende Abbildung zeigt eine Suche nach dem Serviceausdruck
`CPU|Memory|Filesystem`:

image::service_filter_cpumemfs.png[align=center, width=300]

Das Ergebnis ist eine hübsche Tabelle des Hosts, in denen die Metriken
all dieser Services gegenübergestellt sind.
Nicht alle Hosts haben die gleichen Services, so dass bei den anderen Hosts
dann die entsprechenden Zellen einfach leer bleiben:

[.border]
image::matrix_view_1.jpg[]


Das Ganze sieht jetzt erstmal sehr ähnlich aus wie die weiter oben
beschriebene [.guihint]#Information über Services in einer Host-Ansicht#. Es gibt
aber ein paar wesentliche Unterschiede:

. Die Liste der Services ist dynamisch und nicht fest konfiguriert.
. Die Hosts sind hier die Spalten  --  nicht die Zeilen.
. Sie können mit der Matrix noch viel mehr anstellen.

Wenn Sie in die Definition der View gucken, können Sie sehen, wie diese konstruiert ist:

* Als [.guihint]#Basic layout# ist [.guihint]#Matrix# eingetragen.
* Bei [.guihint]#Grouping# ist als einzige Spalte der [.guihint]#Hostname# eingetragen.
* Bei [.guihint]#Columns# sind die [.guihint]#Service description# und das [.guihint]#Service Perf-O-Meter# eingetragen.

Die Regel für das Matrix-Layout ist so:

* Die *[.guihint]#Grouping Columns#* werden als Köpfe für die senkrechten Spalten verwendet.
* Die *erste normale [.guihint]#Column#* bildet die linke Spalte mit der Beschriftung der Zeilen.
* Alle *weiteren normalen [.guihint]#Columns#* werden in den Zellen angezeigt.

Wenn Sie z.B. mehr Informationen über den Host anzeigen möchten, fügen Sie einfach
weitere Spalten im Bereich [.guihint]#Grouping# hinzu. So sieht z.B. die Tabelle von
oben aus, wenn Sie die Spalten
[.guihint]#Host icons# und [.guihint]#WATO folder - just folder name# hinzufügen:

[.border]
image::matrix_view_2.jpg[]

Weitere normale Spalten landen dann direkt in den Zellen. Folgendes Beispiel (gekürzt) zeigt
die Matrix mit der zusätzlichen Spalte [.guihint]#Output of check plugin#:

[.border]
image::matrix_view_3.jpg[]

=== Erkennen von Ausreißern

Warum sind eigentlich manche Zellen farbig hinterlegt? Nun -- hier werden Sie
hingewiesen auf Werte, die sich *abheben von der Mehrheit*. Das ist wohl
bei Messdaten nicht so sinnvoll. Aber es gibt Anwender, die mit einer speziell
konstruierten Matrixansicht auf einen Blick feststellen können, ob z.B. bei
gewissen Hosts oder Services eine falsche Kontaktgruppe eingetragen ist!


[#alarm_sounds]
== Alarm-Sounds

Eine Ansicht kann über den Browser Alarmtöne abspielen, wenn sich in der Tabelle
mindestens ein Problem befindet (also ein Host der nicht {UP} oder ein Service
der nicht {OK} ist). Diese primitive Art der Alarmierung ist z.B. interessant
für Leitstände, wo die Liste der Probleme ständig auf einem Schirm sichtbar ist,
aber der Operator nicht ständig auf diesen starren möchte.

Die Alarmsounds sind per Default ausgeschaltet. Über den globalen Schalter
[.guihint]#Global settings|User interface|Enable sounds in views# können Sie diese
einschalten. Wie immer hilft hier das Suchfeld:

image::sounds_in_views.png[]

Sounds werden aber nicht in allen Views abgespielt, sondern nur, wo dies
in den [.guihint]#View Properties# aktiviert ist:

image::view_properties_sounds.png[]


[#embed_views]
==  Views in fremde Webseiten einbetten

Da jede Ansicht über eine URL erreichbar ist, können Sie diese auch in
andere Webseiten einbetten  --  z.B. über einen `&lt;iframe&gt;`.
Etliche Elemente der View machen allerdings in so einem Kontext keinen Sinn
oder sind sogar störend. In so einem Fall können Sie an die URL die
Variable `display_options=...` anhängen, über die Sie genau
steuern können, welche Bestandteile der View im HTML-Code generiert
werden sollen.

Jeder Bestandteil wird durch einen Buchstaben kodiert. Wenn Sie
Kleinbuchstaben verwenden, schalten Sie dadurch die angegebenen
Elemente aus und lassen alle übrigen erzeugen (quasi ein „opt-out“).
Bei Großbuchstaben ist es umgekehrt: Hier geben Sie nur die Elemente
an, die erzeugt werden sollen („opt-in“). Eine Mischung von klein
und groß ist nicht sinnvoll.

Folgende Buchstaben sind definiert:

[cols="5,5,~"]
|===
|Ein |Aus |Was wird angezeigt? 

|H | h |HTML-Header und -Footer inkl. der Tags `<HTML>`, `<HEAD>` und `<BODY>`
|T | t |Titelzeile mit Überschrift und angemeldetem Benutzer
|B | b |Kontext-Knöpfe, die zu anderen Ansichten verlinken
|F | f |Knopf, der die icon:view_button_filters[] Filter öffnet
|C | c |Knopf, der die icon:view_button_commands[] Kommandobox öffnet sowie Icons zum Ausführen von Kommandos
|O | o |Die Rädchen für die icon:view_button_columns[] Spaltenzahl und das icon:view_button_refresh[] Aktualisieren
|D | d |Knopf für die icon:view_button_options[] Anzeigeoptionen
|E | e |Knopf zum icon:context_button_edit_view[] Editieren der View
|Z | z |Die Fusszeile, in der _refresh: 30s_ angezeigt wird
|R | r |Javascript-Code für das automatische Aktualisieren
|S | s |Abspielen von link:views.html#alarm_sounds[Alarmtönen] bei den Service-Zuständen WARN und CRIT
|I | i |Links, die auf andere Ansichten zeigen
|X | x |Alle anderen Links
|M | m |Mit dieser Option bekommen Links als Ziel den HTML-Frame `main`. Dies verwendet {CMK} selbst beim Einbetten von Views in link:dashboards.html[Dashboards].
|L | l |Links in Spaltentiteln
|W | w |Limitierung und Livestatus-Fehlermeldungen
|===


Wenn Sie also die z.B. alle Bedienelemente und Knöpfe abschalten und nur die eigentliche
Tabelle darstellen möchten, so sieht ein Link auf die View `allhosts` so aus:

`http://myserver/mysite/check_mk/view.py?view_name=allhosts&display_options=tbdezocf`

==  Eigene Icons und Aktionen einfügen
In Ansichten von Hosts und Services sehen Sie auch eine Spalte für Icons und darin
das icon:icon_menu[] [.guihint]#Action menu#, aus dem Sie Host- beziehungsweise Service-Aktionen
auswählen können. Sie dürfen Ansichten aber auch um eigene Icons erweitern. Diese können
wahlweise schlicht zur Visualisierung genutzt oder mit eigenen Aktionen belegt werden.

So ließen sich zum Beispiel Hosts, die über eine grafische Web-Oberfläche verfügen,
über solch ein individuelles Icon schnell identifizieren und über einen Link auch
direkt ansteuern.

Das Prozedere für eigene Icons und Aktionen gliedert sich in drei Schritte:

* Icons hochladen
* Icons/Actions definieren
* Icons Hosts/Services zuordnen

Starten Sie über [.guihint]#WATO|Custom Icons# und laden Sie eine lokale Datei
mit einer maximalen Größe von 80x80 Pixeln hoch. Damit ist das Icon im
System, findet aber noch keinerlei Verwendung.

//BI:custom_icons_upload_classic3.png hilite:50,90,100,20
image::custom_icons_upload_modern.png[]

Nun müssen Sie das Icon noch als über link:wato_rules.html[Regeln] ansprechbares
Objekt und optional eine zugehörige Aktion definieren. Die Einstellungen
finden Sie unter [.guihint]#WATO|Global Settings|User Interface|Custom icons and actions#.
Erstellen Sie hier über [.guihint]#Add new element# einen neuen Eintrag und legen
Sie [.guihint]#ID#, [.guihint]#Icon# und einen [.guihint]#Titel# fest; der Titel wird übrigens später
per On-Mouse-Over-Effekt als Tooltip direkt am Icon angezeigt und ist
für die Nutzer damit unerläßlich.

Interessant wird es nun beim Punkt [.guihint]#Action#: Aktion ist hier gleichzusetzen
mit einer URL und für diese dürfen Sie einige Variablen wie `$HOSTNAME$`
oder `$SERVICEDESC$` (Service-Beschreibung) nutzen -- weitere Hinweise
bekommen Sie über die Online-Hilfe. Eine gültige Aktion wäre beispielsweise
`view.py?host=$HOSTNAME$&site=mysite&view_name=host`, die schlicht
die Standard-Host-Ansicht für den jeweiligen Host auf der Seite _mysite_ aufruft.

Über ein Häkchen bei [.guihint]#Show in column# können Sie das Icon dann als
eigenständiges Bildchen neben icon:icon_menu[] anzeigen lassen, andernfalls
landet Ihre Aktion in diesem Aktionsmenü.

//BI:custom_icons_config_classic.png
image::custom_icons_config_modern.png[]

Im letzten Schritt bestimmen Sie nun, bei welchen Hosts oder Services
das neue Icon angezeigt werden soll -- und das natürlich über Regeln.
Sie finden die beiden Regeln [.guihint]#Custom icons or actions for hosts in status GUI#
und [.guihint]#Custom icons or actions for services in status GUI# unter
[.guihint]#WATO|Host & Service Parameters|User Interface#.
Legen Sie eine neue Regel im gewünschten Ordner an und setzen Sie darin
mindestens zwei Optionen: Zum einen wählen Sie unter
[.guihint]#Custom icons or actions for hosts in status GUI# das just angelegte Icon.
Zum anderen filtern Sie im [.guihint]#Conditions#-Bereich wie üblich auf die gewünschten
Hosts/Services. Speichern und bestätigen Sie anschließend die Änderungen.

//BI:custom_icons_host-rule_classic.png
image::custom_icons_host-rule_modern.png[]

In Host- und Service-Ansichten sehen Sie ab sofort bei den gefilterten
Hosts und Services Ihr neues Icon neben oder im Aktionsmenü.

//BI:custom_icons_host-view_classic2.png hilite:63,41.2,11,12
image::custom_icons_host-view_modern.png[]
