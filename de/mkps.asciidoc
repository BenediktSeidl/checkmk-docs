// -*- coding: utf-8 -*-

include::global_attr.adoc[]
= {CMK} Erweiterungspakete (MKPs)
:revdate: draft
:title: {CMK} Erweiterungspakete (MKPs)- Erweiterungen der Community in {CMK} integrieren
:description: Von der {CMK} Community erstellte Erweiterungen können über Pakete einfach erstellt und mit anderen geteilt werden. 

{related-start}
link:check_plugins_catalog.html[Katalog der Checkplugins]
link:localchecks.html[Lokale Checks]
link:devel_check_plugins.html[Programmierung eigener Check-Plugins]
link:dev_guidelines.html[Richtlinien für Check-Plugins]
link:bakery_api.html[API der Agentenbäckerei]
{related-end}

// include::include_disclaimer_20gui.asciidoc[]

== Einleitung

//// 
MFS: Wie besprochen stellen wir hier den Anwender in den Mittelpunkt,
der sich primär aus der CMK Exchange bedient, für die Programmierung von
Erweiterungen wird die Struktur des Artikels angepasst und auf die
Programmierung verwiesen. Es gibt Lücken beim Packaging, wie bspw. die 
Komponenten verpackt werden, die beim Client ausgerollt werden. Hinweise
auf Best Practises zu "maxversion" hinzufügen.
////

{CMK} ist sehr modular aufgebaut und kann an vielen Stellen mit 
Python-Programmierkenntnissen erweitert werden. Unter anderem ist es möglich,
{CMK} um folgende Elemente ausbauen:

* Eigene Checks und Agentenplugins inklusive Eingabemasken für die Konfigurationsoberfläche
* Eigene Plugins für link:inventory.html[{CMK} Inventory]
* Erweiterungen für die GUI (Ansichten, Dashboards, Spalten, Icons, etc.)
* Definitionen von Graphen oder Perf-O-Metern
* Alarmierungs- und Alert Handler-Skripte (auch in Shell oder anderen Skriptsprachen)

All diese Erweiterungen werden durch Ablage von zusätzlichen Dateien unterhalb
des Verzeichnisses `~/local` innerhalb der {CMK}-Instanz realisiert. Um diese
Erweiterungen sinnvoll zu verwalten, innerhalb von verteilten Umgebungen auszurollen
und auch mit anderen Anwendern auszutauschen, stellt {CMK} ein eigenes Paketformat
bereit: das *{CMK} Erweiterungspaket* -- kurz *MKP*.

Ein MKP sammelt eine beliebige Menge von Erweiterungen -- z.B. einen Satz Check-Plugins
inklusive zugehöriger Handbuchseiten, der Konfigurationsoberfläche für Schwellwerte und
zugehörigen Metrikdefinitionen. Es kann darüber hinaus Einstellungen für die Verteilung via 
Agentenbäckerei enthalten. Das MKP hat einen Namen, eine Versionsnummer und kann mit einer 
einfachen Aktion installiert oder auch wieder
entfernt werden.


[#exchange]
=== Die {CMK} Exchange

Auf der link:https://exchange.checkmk.com[{CMK} Exchange] können
Plugin-Programmierer Pakete für die andere {CMK}-Nutzer bereitstellen und untereinander
austauschen. Von dort können Sie kostenlos Erweiterungen herunterladen und
verwenden. Bitte beachten Sie bei Paketen von der Exchange, dass diese durch
andere Benutzern freiwillig und ohne jede Garantie bereitgestellt werden. 

//// 
MFS: Dieser Abschnitt muss überarbeitet werden. Welche Sicherheitsmaßnahmen
seitens CMK sind implementiert? Bspw. dürfen Plugins nur auf eigene Daten 
schreibend zugreifen? Erfolgt ein Check hochgeladener MKPs? Ist Datenverlust
ein theoretisches Risiko oder nur bei Malware-MKPs zu befürchten. Ansonsten
schlage ich vor, wie folgt zu formulieren:
////

Unsauber programmierte Plugins können zu erhöhter Last und erhöhtem
Arbeitsspeicherbedarf führen. Zudem ist es möglich, dass MKPs für ältere
Versionen von CMK entwickelt wurden und so keine vollständige Kompatibilität
vorhanden ist (von Version 1.6.0 auf 2.0.0 wechselte {CMK} von Python 2 auf
Python 3). In Extremfällen droht Datenverlust. Wir empfehlen daher vor dem
produktiven Einsatz fremder MKPs die Installation in einer Testinstanz.

//// 
MFS: Alt als Referenz
Es
kann sein, dass diese unsauber programmiert sind und mit Ihrer {CMK}-Version
Probleme verursachen können. Natürlich können MKPs auch allgemeine Programmierehler enthalten,
die zu allen möglichen weiteren Fehlern oder sogar Datenverlust führen können.
Zum Ausprobieren fremder Pakete empfiehlt sich daher auf jeden Fall
zuerst eine Installation auf einem Testsystem.
////

=== Werkzeuge für MKPs

Zur Verwaltung von MKPs gibt es zwei Werkzeuge:

* Den link:#commandline[Kommandozeilenbefehl] `mkp`
* Den Setup-Menü-Eintrag icon:icon_mkps[] [.guihint]#Extension Packages# (nur {CEE})

Beide Verwaltungswerkzeuge stellen wir Ihnen nun näher vor. Sie sind miteinander
kompatibel, so dass Sie mal den Kommandozeilenbefehl und mal das Setup-Menü-Modul
verwenden können, ohne dass dabei etwas „durcheinandergerät“.


[#wato]
== Erweiterungspakete über das Setup-Menü verwalten

{cee-only}
Im Setup-Menü finden Sie das Modul icon:icon_mkps[] [.guihint]#Maintenance > Extension Packages#,
mit dem Sie MKPs verwalten und sogar ändern oder neu erstellen können. Sie
erreichen das Modul wie üblich über das Menü-Element in der Seitenleiste:

// MFS: Screenshot neu
image::mkp_manager_sidebar.png[width=300]


=== Installation eines MKPs

Ein MKP, das Sie z.B. von der Exchange heruntergeladen haben, können Sie
mit dem Knopf [.guihint]#Upload Package# in {CMK} hochladen und installieren. Dazu benötigen
Sie die Datei auf dem Rechner, auf dem auch Ihr Webbrowser läuft. Die
Dateiendung des Pakets muss `.mkp` sein.

image::mkp_manager_upload.png[]

Bei der Installation werden die Dateien in einer Ordnerhierarchie unterhalb
von `~/local/` installiert. Außerdem wird eine Paketbeschreibungsdatei
in `~/var/check_mk/packages/` abgelegt.  Nach dem Hochladen erscheint
das Paket dann in der Liste der installierten MKPs:

image::mkp_manager_list.png[]

Nun benötigen Sie nur noch ein [.guihint]#Activate Changes# und alle Funktionen
aus dem Paket sind im System verankert und stehen Ihnen bereit.

=== Pakete deinstallieren

Über die entsprechenden Symbole in der Liste der Pakete, können
Sie installierte Pakete wieder icon:icon_delete[] löschen. Beim Löschen
wird das Paket mitsamt den installierten Dateien gelöscht und somit die
Erweiterung komplett entfernt – also das Gegenteil der Installation.

[#distr_wato]
=== MKPs in verteilten Umgebungen

Bei einem link:distributed_monitoring.html#livestatus[verteilten Monitoring] reicht
es, wenn Sie die Pakete auf der Zentralinstanz installieren. Bei jeder Verbindung zu
einer Remote-Instanz können Sie dann bestimmen, ob die Anpassungen an diese Instanz
übertragen werden sollen. Sie müssen dazu lediglich die Option [.guihint]#Extensions#
aktivieren. Danach werden bei der Synchronisation auch die MKPs und alle
anderen Änderungen unterhalb des Verzeichnisses `~/local` übertragen.

image::mkp_distr_wato.png[]

Ist die Übertragung nicht gewünscht, schalten Sie die Option für diese
oder alle Instanzen einfach ab.

*Wichtig*: Die Anpassungen werden nur übertragen, wenn die Option
[.guihint]#Enable replication# auf [.guihint]#Push configuration to this site# eingestellt ist.

[#feature_packs]
=== Feature Packs installieren

// MFS: Hinweise für den Übersetzer: Nur gekürzt
Neben Plugins kennt {CMK} _Feature-Packs_. Diese Erweiterungen
stellen neue Funktionalitäten bereit, welche eigentlich erst in der nächsten
stabilen Version enthalten sind. Solche Funktionalitäten können zum
Beispiel Erweiterungen bestehender link:https://checkmk.de/cms_check_plugins_catalog.html[Checks] oder
link:datasource_programs.html#specialagents[Spezialagenten] sein. Sie sind in der
jeweiligen Version direkt enthalten und müssen lediglich aktiviert -- oder
wieder deaktiviert werden. 

Für {CMK} 2.0.0 sind derzeit keine Feature-Packs geplant.

////
Um ein solches optionales MKP in der {CEE} zu
aktivieren, klicken Sie in dem Modul [.guihint]#Extension Packages# auf den Stecker
links von dem Paket:

image::mkp_activate_feature.png[]

Um ein Paket in der {CRE} zu installieren, können Sie wie
gewohnt die link:#commandline[Kommandozeile] nutzen. Sie finden die MKPs unter
`~share/check_mk/optional_packages/`. Um zum Beispiel das Paket
_azure_ad_ zu installieren, führen Sie folgendes Kommando aus:
//// 

[{shell}]
----
{c-omd} mkp install ~/share/check_mk/optional_packages/azure_ad-1.0.mkp
----


== MKPs für Entwickler

Wenn Sie selbst Plugins für {CMK} programmieren oder modifizieren, beachten Sie
bitte die Artikel zu den vorhandenen
link:devel_check_plugins.html[Programmierschnittstellen und der
Dateisystemstruktur], der link:bakery_api.html[Integration in die Agent-Bakery] sowie die
link:dev_guidelines.html[Richtlinien für Check-Plugins]. 

=== Pakete auflösen 

Das icon:icon_release_mkp[] Auflösen eines Paketes hingegen entlässt
die paketierten Dateien unter `~/local/` sozusagen "in die Freiheit" und
entfernt nur die Paketbeschreibung. Als Ergebnis sind die Dateien dann
unpaketiert und die Erweiterungen weiterhin aktiv. Dies ist das Gegenteil
des Erzeugens eines Pakets aus bisher unpaketierten Dateien.

In der Praxis werden Sie das Auflösen von Paketen am ehesten benötigen, wenn
Sie eine Erweiterung anpassen und später mit Änderungen neu paketieren wollen.
Zum Beispiel können Sie mit unserem link:https://exchange.checkmk.com/p/hello-world["Hello world!"] Beispiel, welches nichts
sinnvolles tut, aber als Vorlage für das erste eigene Paket dienen kann,
loslegen.  

=== Pakete erstellen

// MFS: IMHO besser: 
Das Erstellen eines eigenen MKPs ist sehr einfach, wenn die
link:devel_check_plugins.html[Programmierarbeit] abgeschlossen ist.
// alt: Das Erstellen eines eigenen MKPs ist sehr einfach (wenn man mal von der Kleinigkeit absieht, dass die Erweiterungen natürlich vorher programmiert werden müssen). 
Ausgangspunkt ist, dass Sie unter
`~/local/` in den entsprechenden Verzeichnissen eigene Dateien
angelegt haben. Für eigene Agenten basierte Check-Plugins ist das richtige Verzeichnis
z.B. `~/local/lib/check_mk/base/plugins/agent_based`. Diese Dateien gehören zunächst
zu keinem Paket und werden daher unter [.guihint]#Unpackaged Files# aufgelistet:

image::mkps_unpackaged.png[]

Über das Symbol icon:icon_new_mkp[] gelangen Sie zum Dialog zum Erstellen
eines neuen Pakets:

image::mkps_create.png[]

Neben den offensichtlichen Angaben ist es wichtig, dass Sie mindestens eine
Datei auswählen, die eingepackt werden soll. Durch das Erstellen wird
eine Paketbeschreibung unter `~/var/check_mk/packages/` angelegt,
welche neben den allgemeinen Angaben auch die Liste der enthaltenen Dateien
beinhaltet. Die maximal unterstützte {CMK}-Version ist natürlich ohne Glaskugel
schwer vorherzusagen. Als Faustregel kann angenommen werden: Was für 2.0 ohne 
Verwendung alter APIs programmiert wurde, läuft auch mit 2.1. Daher dient die 
maximale {CMK}-Version vor allem bei Verteilung über die Exchange, ältere Pakete
zu identifizieren, die intensivere Tests und möglicherweise Anpassungen benötigen.

Dieses Paket können Sie nun -- z.B. um es auf ein anderes System zu übertragen
oder auf die Exchange hochzuladen -- in der Paketliste mit dem Symbol
icon:button_download[] als MKP-Datei herunterladen.

Bei Änderungen an paketierten Dateien muss das Paket _nicht_ neu erstellt werden. Benutzen Sie den icon:button_edit[], um die Versionsnummer zu ändern,
speichern Sie das geänderte Paket und laden Sie es gegebenenfalls neu herunter.


// MFS: Hinweise für den Übersetzer: Diesen Abschnitt mit Referenzcharakter habe ich nur verschoben und Versionsnummern angepasst
[#commandline]
== MKP auf der Kommandozeile

Alle oben genannten Aktionen können Sie auch auf der Kommandozeile ausführen.
Dazu dient der Befehl `mkp` (der eigentlich eine Abkürzung für
`cmk -P` ist):

[{shell}]
----
{c-omd} mkp
Usage: check_mk [-v] -P|--package COMMAND [ARGS]

Available commands are:
   create NAME      ...  Collect unpackaged files into new package NAME
   pack NAME        ...  Create package file from installed package
   release NAME     ...  Drop installed package NAME, release packaged files
   find             ...  Find and display unpackaged files
   list             ...  List all installed packages
   list NAME        ...  List files of installed package
   list PACK.mkp    ...  List files of uninstalled package file
   show NAME        ...  Show information about installed package
   show PACK.mkp    ...  Show information about uninstalled package file
   install PACK.mkp ...  Install or update package from file PACK.mkp
   remove NAME      ...  Uninstall package NAME

   -v  enables verbose output

Package files are located in /omd/sites/mysite/var/check_mk/packages/.
----


=== Installation eines MKPs

Die Installation eines Pakets geschieht mit `mkp install`. Dazu müssen
Sie die MKP-Datei natürlich zunächst auf den Monitoringserver bringen
(z.B. mit `scp`).  Anschließend geht die Installation mit einem Befehl:

[{shell}]
----
{c-omd} mkp install /tmp/mypackage-1.0.mkp
----

Die Liste der installierten Pakete rufen Sie mit `mkp list` ab:
[{shell}]
----
{c-omd} mkp list
mypackage
----

Details über ein einzelnes Paket erfahren Sie mit `mkp show`:

[{shell}]
----
{c-omd} mkp show myPackage
Package file:                  /omd/sites/mysite/var/check_mk/packages/myPackage
Name:                          myPackage
Version:                       1.0
Packaged on Check_MK Version:  2.0.0p23
Required Check_MK Version:     2.0.0
Title:                         My own check plugin
Author:                        myName
Download-URL:                  http://www.example.com
Files:                         checkman(1) checks(1)
Description:
  This package contains a cool check plugin
----


=== Pakete deinstallieren oder auflösen

Die Deinstallation eines Pakets geschieht mit `mkp remove`. Dieser
Befehl löscht sowohl die Paketbeschreibung, als auch alle enthaltenen Dateien!

[{shell}]
----
{c-omd} mkp remove mypackage
----

Und auflösen können Sie ein Paket mit `mkp release`. Dabei bleiben die
Erweiterungsdateien erhalten und nur die Paketbeschreibung wird gelöscht:

[{shell}]
----
{c-omd} mkp release mypackage
----


=== Pakete erstellen

Die Vorgehensweise zum Erstellen von MKPs auf der Kommandozeile ist analog zum
Setup-Menü. Zunächst erstellen Sie Ihre Erweiterungen
in den passenden Verzeichnissen unterhalb von `~/local/`. Alle
unpaketierten Dateien listen Sie dann mit `mkp find` auf:

[{shell}]
----
{c-omd} mkp find
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/mycheck
/omd/sites/mysite/local/lib/check_mk/base/plugins/agent_based/mycheck_manpage
----

Jetzt erzeugen Sie mit dem Befehl `mkp create` eine Paketkonfiguration, 
welche (vorerst) all diese Dateien beinhaltet. Geben Sie dabei den gewünschten
Namen des neuen Pakets an:

[{shell}]
----
{c-omd} mkp create mypackage
----

Die Eigenschaften des Pakets editieren Sie nun mit einem Texteditor.
Die Datei dazu liegt in `var/check_mk/packages/mypackage`:

.var/check_mk/packages/mypackage
[{file}]
----
{'author': u'*myName*',
 'description': u'*This package contains a check plugin*',
 'download_url': 'http://www.example.com',
 'files': {'agents': [],
           'checkman': ['mycheck'],
           'checks': ['mycheck'],
           'doc': [],
           'inventory': [],
           'notifications': [],
           'pnp-templates': [],
           'web': []},
 'name': 'myPackage',
 'title': u'*My own check plugin*',
 'version': '1.0',
 'version.min_required': '*2.0.0*',
 'version.packaged': '2.0.0p23'}
----

Bearbeiten Sie diese Datei nach Ihren Wünschen. Achten Sie auf korrekte
Python-Syntax. Unicode-Zeichenketten (Texte, die nicht-Ascii-Zeichen wie
Umlaute enthalten) müssen mit einem kleinen vorangestellten `u` gekennzeichnet
werden.

Unter dem Eintrag `files` können Sie Dateien entfernen, welche nicht
paketiert werden sollen. Tragen Sie unter `version.min_required` die
Mindestversion von {CMK} ein, die erforderlich ist, um das Paket zu verwenden.

Anschließend können Sie mit `mkp pack` eine MKP-Datei erzeugen:

[{shell}]
----
{c-omd} mkp pack mypackage
{c-omd} ll *.mkp
-rw-rw-r-- 1 mysite mysite 495 Dez 22 13:36 mypackage-1.0.mkp
----



