// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= FreeBSD überwachen
:revdate: draft
:title: FreeBSD überwachen - Der Agent für FreeBSD im Detail
:description: Der FreeBSD-Agent ist ein einfaches Shell-Skript und damit maximal transparent. Wie Sie den Agenten nutzen, erweitern und konfigurieren, erfahren Sie hier.

////
MFS:
Reviewer, bitte darauf prüfen, ob die Zielgruppe hinreichend erfasst ist.
Ich habe Redundanz weitgehend erspart, Einrichtung von lokalen Checks und MRP primär im Kontext des Tests der Funktionalität, gerade da andere Pfade und andere Defaults (Bourne Shell statt Bourne Again als Default) auch für erfahrene Linuxer Fallstricke sind, wenn sie auf ein vorhandenes FreeBSD losgelassen werden:

* Wurden alle Voraussetzungen korrekt installiert?
* Stimmen Pfade und Zugriffsrechte?
* Sind alle Shebangs korrekt?

Für alles weitere wird auf die Artikel zum Linux-Agenten, MRPE und der Entwicklung eigener Check-Plugins verwiesen.

TK: Alles erfolgreich durchgetestet - bis auf die Zugriffsbeschränkung (siehe unten). Allerlei Zuegs direkt im Text korrigiert.
Rest als Kommentare wie gewohnt.
////

{related-start}
xref:wato_monitoringagents.html[Monitoring-Agenten]
link:agent_linux.html[Linux überwachen]
link:datasource_programs.html[Datenquellenprogramme]
{related-end}

== Einleitung

Es gibt viele gute Gründe, statt Linux oder anderen unixoiden Systemen link:https://www.freebsd.org/de/[FreeBSD^] zu verwenden:
Sei es das seit 2000 vorhandene Container-Feature „Jails“, die hohe Performance auch bei großer I/O-Last, die Robustheit des Dateisystems UFS2 oder die hervorragende Unterstützung des modernen transaktionalen Dateisystems ZFS.
{CMK} stellt einen Agenten für FreeBSD bereit, der auf dem Agenten für Linux basiert, aber für FreeBSD-Feinheiten angepasst wurde, wie z.B.  unterschiedliche Ausgabeformate der Kommandozeilen-Tools und abweichende Pfad-Konventionen.
Die Installation und die Funktionsprüfung muss allerdings weitgehend manuell erfolgen, denn eine Paketierung oder Bereitstellung per Agentenbäckerei ist nicht vorgesehen.

*Hinweis zu anderen BSD-Systemen:* Dieser Artikel erklärt Installation und Einrichtung des Agenten für _FreeBSD_,
link:https://github.com/tribe29/checkmk/tree/master/agents[Agenten für _OpenBSD_ und _NetBSD_^]
stehen ebenso zur Verfügung. Die Installation ähnelt der hier beschriebenen. Sollten Sie DragonFly BSD nutzen, freuen wir uns über Tests und gegebenenfalls Patches für den FreeBSD-Agenten.

Zum grundsätzlichen Aufbau des FreeBSD-Agenten gilt das zum
xref:agent_linux#[Linux-Agenten] beschriebene: Es handelt sich um ein reines
Shell-Skript, welches über einen Internet-Superserver (`inetd` oder `xinetd`)
oder einen SSH-Tunnel aufgerufen wird, was es leicht und sicher macht. Generell
setzen wir in diesem Artikel voraus, dass Sie bereits eine gewisse Erfahrung
mit Linux oder Solaris haben und arbeiten in diesem Artikel vor allem die Unterschiede heraus.

== Installation

=== Voraussetzungen

Damit der {CMK}-Agent alle fürs Monitoring sinnvollen Informationen auslesen kann, ist die Installation zusätzlicher Tools erforderlich:
// TK: Kurze Erklärung, wofür die Tools gut sind?

* `sysutils/ipmitool`
* `devel/libstatgrab`
* `shells/bash`
* `lang/python3`
* `ftp/wget`

Python ist an dieser Stelle optional, wird aber spätestens für viele Agentenplugins benötigt.
Eine Besonderheit ist `bash`, denn tatsächlich verwendet das Agentenskript eine Syntax, die nicht mit der FreeBSD Bourne Shell kompatibel ist. Das _ipmitoool_ wird zum Auslesen von Hardwareinformationen benötigt.

All diese Tools installieren Sie mit dem folgenden Kommando:

[{shell}]
----
root@bsd:/root # *pkg install ipmitool libstatgrab bash python3 wget*
----

=== Installation aus den Ports

// MFS: Neu, wegen Deiner Kritik zu nicht ganz passenden Versionen
Die FreeBSD-Ports enthalten einen von Mark Peek gepflegten href:https://cgit.freebsd.org/ports/tree/net-mgmt/check_mk_agent[Port des {CMK}-Agenten^], der ggf. Patches enthält, um den Agenten mit neueren FreeBSD-STABLE Versionen kompatibel zu machen. Wenn dessen Major-Version Ihrer {CMK}-Version entspricht oder etwas höher liegt, können Sie diese installieren.

[{shell}]
----
root@bsd:/root # *cd /usr/ports/net-mgmt/check_mk_agent*
root@bsd:/usr/ports/net-mgmt/check_mk_agent # *make install*
----

=== Manuelle Installation

Ist die Version im Portstree älter als Ihr {CMK}-Server, installieren Sie den aktuellen Agenten aus dem GitHub-Repository. Da Anpassungen an neue FreeBSD-Versionen nicht immer auf Agenten für ältere {CMK}-Versionen zurückportiert werden, ist es in der Regel sinnvoll, aus dem aktuellsten Entwicklungszweig zu installieren: 

[{shell}]
----
root@bsd:/root # *wget -O /usr/local/bin/check_mk_agent \https://checkmk.io/3EjKJlt*
root@bsd:/root # *chmod 0700 /usr/local/bin/check_mk_agent*
----

Falls Sie die Agenten für andere BSD-Systeme suchen oder den Entwicklungszweig auf eine bestimmte {CMK}-Version festlegen wollen, suchen Sie den link:https://github.com/tribe29/checkmk/tree/master/agents[Agentenordner in Github^] auf.
// TK: Hier etwas ausführlicher? Da Dein Link ja den Agenten vom master installiert - und man da die V2.1.0i1 bekommt, wie man unten auch in der Ausgabe sieht. Zu sowas raten wir ja sonst nicht - sondern immer zur passenden Version.
// MFS: Im Fall des FreeBSD Agents ist nicht garantiert, dass Anpassungen für FreeBSD 13.0 auf CMK 2.0 zurückportiert wurden, daher ist es in diesem Fall sinnvoller, aus "master" zu nehmen. Erklärung hinzugefügt.

=== Test auf der Kommandozeile

Rufen Sie nun den Agenten auf der Kommandozeile auf und überfliegen Sie die Ausgabe im Pager:

[{shell-raw}]
----
root@bsd:/root # check_mk_agent | more
<<<check_mk>>>
Version: 2.1.0i1
AgentOS: freebsd
Hostname: fbsd13
AgentDirectory: /etc/check_mk
DataDirectory: 
SpoolDirectory: /var/spool/check_mk_agent
PluginsDirectory: /usr/local/lib/check_mk_agent/plugins
LocalDirectory: /usr/local/lib/check_mk_agent/local
----

Falls gar nichts ausgegeben wird, überprüfen Sie bitte noch einmal die Voraussetzungen, insbesondere, dass die Bash unter `/usr/local/bin` installiert ist.

== Zugriff über das Netzwerk einrichten 

=== FreeBSD inetd

Die einfachste Möglichkeit, auf den Agenten zuzugreifen, ist der bei FreeBSD mitgelieferte `inetd`. Alternativ steht der von Linux bekannte `xinetd` aus der Section `security` zur Verfügung. Dessen Konfiguration entspricht exakt der im xref:agent_linux#manual[Artikel zum Linux-Agenten] beschriebenen.
// TK: Hilfreich wäre hier eine kurze High-Level-Zusammenfassung in einem Satz, was Du in diesem Kapitel tust.
Mit dem `inetd` wird die Ausgabe des Agenten an TCP-Port 6556 gebunden und – falls erforderlich – der Zugriff auf bestimmte {CMK}-Hosts eingeschränkt.

// TK: Die folgende Info kommt zu spät. Dass es eine Alternative zu inetd gibt, sollte am Anfang des Kapitels stehen.
// Alternativ zum FreeBSD `inetd` können Sie den `xinetd` aus der Section `security` installieren.
// TK: Section `security`? Wo finde ich die denn?
// MFS: Sections hat man, wenn man Programme über die Ports installiert und nicht über fertige Pakete. Meist nutzt man Ports, wenn einige Pakete mit besonderen Einstellungen kompiliert werden sollen. https://www.freebsd.org/de/ports/

// Prüfen Sie zunächst, ob Ihre `/etc/services` bereits einen Eintrag für Port 6556 enthält:
// TK: Das ist zu kurz. Die /etc/services muss ich doch nur dann NICHT editieren, wenn es bereits einen check_mk Eintrag für Port 6556 gibt. Wo soll der herkommen?
// TK: Ist nicht der Fall wahrscheinlicher, dass Port 6556 von einem andere Dienst belegt ist? Und was mach ich dann?
// MFS: Soweit ich weiss, war 6556 eine Weile in den Services drin, ist es nach Upgrades immer noch. Da FreeBSD aber irgendwann dazu gewechselt hat, nur die IANA-Services drin zu haben, ist er in Neuinstallationen wieder rausgefallen, kommt aber in FreeBSD 14 dank Alex Wilms wieder rein: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=6556 Ich habe unten den Namen des Services auf das zu erwartende korrigiert:

[{shell}]
----
root@bsd:/root # *grep 6556/ /etc/services*
----

Ist dies nicht der Fall, muss {CMK} als Dienst bekannt gemacht werden. Fügen Sie dafür folgende Zeile hinzu:

./etc/services
[{file}]
----
checkmk-agent        6556/tcp   #Checkmk monitoring agent
----

Jetzt ergänzen Sie die Konfigurationsdatei `/etc/inetd.conf` um folgende Zeile:
// TK: Analog zu oben: Jetzt prüfst Du ja auch nicht zuerst, ob die Zeile schon vorhanden ist.

./etc/inetd.conf
[{file}]
----
checkmk-agent stream	tcp nowait root /usr/local/bin/check_mk_agent
----

Der `inetd` muss grundsätzlich aktiviert werden. Dazu hängen Sie folgende Zeile an die Datei `/etc/rc.conf` an:

./etc/rc.conf
[{file}]
----
inetd_enable="YES"
----

Ist eine Zugriffsbeschränkung notwendig, editieren Sie die Datei `/etc/hosts.allow`.
Kommentieren Sie zunächst die Zeile aus, die Zugriffe von überall erlaubt, fügen Sie dann eine Zeile ein, die nur dem {CMK}-Server – hier mit der IP-Adresse `10.2.3.4` – den Zugriff erlaubt:

./etc/hosts.allow
[{file}]
----
# ALL : ALL : allow
checkmk-agent : 10.2.3.4 : allow
----

Sind die Konfigurationsänderungen vorgenommen, starten Sie neu:

[{shell}]
----
root@bsd:/root # *reboot*
----

Jetzt sollte vom Monitoring-Server aus der Zugriff auf den Agenten funktionieren.
// TK: Zugriffsbeschränkung hat bei mir nicht funktioniert. Mit einkommentierter und neuer Zeile werde ich mit der letzten Zeile aus /etc/hosts.allow abgespeist: You are not welcome to use check_mk_agent from klappkis...
// TK: Mit "ALL : 192.168.178.34 : allow" funktioniert es, mit "check_mk : 192.168.178.34 : allow" nicht.
// MFS: Ich habe auf Reboot geändert, wahrscheinlich war da die geänderte NIS Datenbank nicht eingelesen

Am einfachsten ist der Test mit `netcat` oder `nc`.
Führen Sie folgendes Kommando als Instanzbenutzer auf dem {CMK}-Server aus, um die Netzwerkverbindung zum Agenten zu testen (im Beispiel zum Host mit der IP-Adresse `10.2.3.5`).
Die Kommandoausgabe zeigt nur die ersten Zeilen:

[{shell-raw}]
----
{c-omd} nc 10.2.3.5 6556
<<<check_mk>>>
Version: 2.1.0i1
AgentOS: freebsd
----



=== Sicherheit 

Da der FreeBSD Agent zum gegenwärtigen Zeitpunkt keine Verschlüsselung unterstützt, raten wir in Fällen, in denen die Absicherung der übertragenen Daten notwendig ist, zur Verwendung eines SSH-Tunnels.
Dessen Einrichtung erklären wir im Artikel zum xref:agent_linux#ssh[Linux-Agenten].
// TK: In dem verlinkten Artikel finde ich aber weder was zu SSH noch zu Tunnel. Schreibst Du das noch?
// MFS: Fixed. Link muss zum Linux-Artikel.

== Aufnahme ins Monitoring

Die xref:checkmk_getting_started.html#add_server[Aufnahme ins Monitoring] verläuft wie bei allen anderen Systemen über die automatische Service-Erkennung. Bei einem „nackten“ FreeBSD, auf dem noch keine Server-Dienste konfiguriert sind, sollten mindestens 12 Dienste erkannt werden, bei Installation auf ZFS zehn zusätzliche für Dateisysteminformationen:
// TK: Info: Bei meiner Installation in VirtualBox waren es 23: 10 zusätzliche Fileystem-Services, ZFS arc cache, zpool status. Dafür fehlt "Mount options of /""
// MFS: Ah, Du hast auf ZFS installiert, das wird den MaSl freuen! Ergänzt.

.Die Service-Erkennung in {CMK} findet mindestens 12 Services
image::agent_freebsd_discovery.png[alt="Liste mit 12 automatisch erkannten Services."]


== Plugins

Wegen der komplett manuellen Konfiguration, dem Fehlen einer automatischen Verteilung und den im Vergleich mit Linux unterschiedlichen Pfaden, empfiehlt sich ein Test der wichtigsten Plugin-Mechanismen. Den Anfang macht xref:agent_linux.html#mrpe[MRPE.] 

=== MRPE

Erstellen Sie eine Konfigurationsdatei `/etc/check_mk/mrpe.cfg` mit folgendem Inhalt:

./etc/check_mk/mrpe.cfg
[{file}]
----
Flux_Comp /bin/echo 'OK - Flux compensator up and running'
----

In der Ausgabe des Agenten sollte nun eine MRPE-Sektion enthalten sein:

[{shell-raw}]
----
root@bsd:/root # check_mk_agent | grep -A1 '^...mrpe'
<<<mrpe>>>
(echo) Flux_Comp 0 OK - Flux compensator up and running
----

In der Service-Erkennung taucht nun [.guihint]#Flux_Comp# als neuer Service auf:

.Das MRPE-Plugin wurde erfolgreich konfiguriert
image::agent_freebsd_mrpe.png[alt="Liste mit dem neu erkannten Service Flux_Comp."]

=== Agentenplugins

Die Installation von Agentenplugins entspricht der im xref:agent_linux#manualplugins[Artikel zum Linux-Agenten] beschriebenen. Achten Sie bei der Installation von Plugins auf den korrekten Shebang. Perl und Python sind bei FreeBSD in `/usr/local/bin` installiert und so manches Shell-Skript, das unter Linux mit `/bin/sh` funktioniert, setzt eigentlich die unter FreeBSD in `/usr/local/bin/bash` installierte Bourne Again Shell voraus.

Zum Testen eignet sich ein simpler xref:localchecks#[lokaler Check], bei dem die Auswertung, ob der überwachte Dienst {OK}, {WARN} oder {CRIT} ist, direkt auf dem überwachten Host stattfindet. Wenn wir schon dabei sind, einen Zweizeiler zu schreiben, nutzen wir diesen gleich für einen Test des Python-Interpreters. Beachten Sie auch hier die zu Linux unterschiedlichen Standardpfade:

./usr/local/lib/check_mk_agent/local/hello.py
[{python}]
----
#!/usr/local/bin/python3
print("0 \"Hello Beastie\" - Just check paths and Python interpreter!")
----

Vergessen Sie nicht, das Skript ausführbar zu machen:

[{shell}]
----
root@bsd:/root # chmod 0755 /usr/local/lib/check_mk_agent/local/hello.py
----

Auch in diesem Fall wird der Dienst sofort gefunden:

.Der neue Service "Hello Beastie" wurde gefunden
image::agent_freebsd_local.png[alt="Liste mit dem neu erkannten Service Hello Beastie."]

== Dateien und Verzeichnisse

=== Pfade auf dem überwachten Host

[cols="45,~"]
|===
|Pfad |Bedeutung

|`/usr/local/bin/check_mk_agent` |Installationsort des {CMK}-Agenten auf dem Ziel-Host.
|`/usr/local/lib/check_mk_agent` |Basisverzeichnis für Erweiterungen des Agenten.
|`/usr/local/lib/check_mk_agent/plugins` |Plugins, welche den Agenten um zusätzliche Überwachungsdaten erweitern. Plugins können in jeder verfügbaren Programmiersprache geschrieben werden.
|`/usr/local/lib/check_mk_agent/local` |Ablageort für eigene xref:localchecks#[lokale Checks.]
|`/var/spool/check_mk_agent` |Enthält Daten, die z.B. von Cronjobs erstellt werden und eine eigene Sektion beinhalten. Diese werden ebenfalls der Agentenausgabe angehängt.
|`/etc/check_mk` |Ablage von Konfigurationsdateien für den Agenten.
|`/etc/check_mk/mrpe.cfg` |Konfigurationsdatei für xref:agent_linux#mrpe[MRPE] -- für die Ausführung von klassischen Nagios-kompatiblen Check-Plugins.
|`/etc/check_mk/exclude_sections.cfg` |Konfigurationsdatei für die link:agent_linux.html#disabled_sections[Deaktivierung bestimmter Sektionen] des Agenten
|===

*Achtung:* Für FreeBSD sind keine Standardpfade hinterlegt, wie für Linux unterhalb von `/var/lib/check_mk_agent`.
Wählen Sie einen passenden Ablageort und tragen Sie diesen im Agentenskript ein.
