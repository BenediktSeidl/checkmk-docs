= Dateien und Verzeichnisse des CMC
:revdate: 2016-03-10
:title: Vom CMC benutzte Dateien und Verzeichnisse
:description: Diese Übersicht beschreibt alles wichtigen Dateien und Verzeichnisse, die den Checkmk Micro Core (CMC) betreffen.


Folgende Übersicht zeigt Ihnen alle wichtigen Dateien und Verzeichnisse,
die den Checkmk Micro Core betreffen. Alle Pfade vestehen sich relativ
vom Homeverzeichnis der Instanz aus. Heißt die Instanz z.B. `mysite`,
so sind alle Pfade von `/omd/sites/mysite` aus zu verstehen.


=== 1. Laufzeitdaten

[cols=45, options="header"]
|===


|Pfad
|Bedeutung

<td class=tt>var/log/cmc.log</td><td>Hier finden Sie Meldungen
zum Start und Stop des CMC und evtl. Warnungen oder Fehler genereller Art.
Die Historie von Hosts und Services (bei Nagios beides in `nagios.log`)
ist in eine eigene Datei ausgelagert und hier nicht enthalten.</tr>

<td class=tt>var/check_mk/core/</td><td>Verzeichnis mit allen Laufzeitdaten
des CMC.</tr>

<td class=tt>var/check_mk/core/config</td><td>Konfiguration für den Core. Diese
Datei entspricht bei Nagios den Dateien unter `etc/nagios/conf.d` und
enthält alle statischen Daten zu Hosts, Services, Gruppen, Benutzern und
globalen Einstellungen.</tr>

<td class=tt>var/check_mk/core/state</td><td>Aktueller Laufzeitzustand
des Cores. Die Datei speichert Informationen über den aktuellen Status von Hosts
und Services sowie über Downtimes, Acknowledgements und Kommentare. 
Die Datei entspricht der Datei `retention.dat` von
Nagios, ist aber binär kodiert. Die Datei wird regelmäßig und beim Anhalten
des Cores aktualisiert. Wenn sie beim Start des Cores
nicht vorhanden oder nicht kompatibel ist, beginnt der Core mit einem
leeren Zustand.</tr>

<td class=tt>var/check_mk/core/state-*</td>

|Sicherheitskopien des Status nach Migration von einer alten CMC-Version
oder wenn der CMC feststellt, dass die Zahl der Hosts in der Konfiguration
stark gesunken ist. So können Sie zum alten Status zurückkehren (und
Ihre Downtimes und Quittierungen wiederbekommen), wenn Sie z.B. durch eine
Fehlkonfiguration alle Hosts vorübergehend aus dem Monitoring entfernt hatten.</tr>

<td class=tt>var/check_mk/core/core</td><td>Die `core`-Datei ist
normalerweise nicht vorhanden. Falls doch, deutet sie auf einen früheren Absturz
des Cores hin und hilft den Entwicklern beim Finden der Fehlerursache.</tr>

<td class=tt>var/check_mk/core/history</td><td>Die Historie aller Hosts
und Services ist in dieser Datei im Textformat gespeichert. Sie entspricht
vom Inhalt und Aufbau der Datei `nagios.log` von Nagios und ist mit
ihr weitgehend kompatibel.</tr>

<td class=tt>var/check_mk/core/archive/</td><td>In dieses Verzeichnis
werden alte Versionen von `history` bei der Logfilerotation verschoben.
Nur wenn diese Dateien unkomprimiert vorhanden sind, kann man mit Livestatus
und Multisite auf historische Daten zugreifen (Events, Verfügbarkeit).</tr>

<td class=tt>tmp/run/live</td><td>Livestatus-Socket des CMC. Dies liegt
an der gleichen Stelle, wie das von Nagios. Da der CMC Livestatus-kompatibel
zu Nagios und Icinga ist, können so alle Erweiterungen, die auf Livestatus
basieren, ohne Anpassung genutzt werden (z.B. NagVis).</tr>

<td class=tt>tmp/run/cmc.pid</td><td>Aktuelle Prozess-ID des CMC.</td>
|===

=== 2. Konfiguration
Der CMC hat keine eigene Konfigurationsdatei. Alle Einstellungen für den CMC
finden Sie im WATO-Modul ICON[icon_configuration.png] [.guihints]#Global Settings# unter
[.guihints]#Monitoring Core# und werden zusammen mit den anderen globalen Optionen unter
`etc/check_mk/conf.d/wato/global.mk` gespeichern.

=== 3. Software
[cols=45, options="header"]
|===


|Pfad
|Bedeutung

<td class=tt>bin/cmc</td><td>Ausführbares Programm für den CMC selbst. Dieser
ist in C++ entwickelt und benötigt außer der Standard-C++-Bibliothek keine weiteren
Bibliotheken (insbesondere kein Boost). Zu Testzwecken kann man den CMC auch
von Hand aufrufen (probieren Sie `cmc --help`).</tr>

<td class=tt>lib/cmc/checkhelper</td><td>Hilfsprozess, der vom CMC mehrfach
gestartet wird und das effiziente Ausführen von aktiven Checks übernimmt.</tr>

<td class=tt>lib/cmc/icmpsender</td><td>Hilfsprozess, der vom CMC
gestartet wird und das Senden ICMP-Paketen für das Smart-Ping übernimmt.
Dieser muss unbedingt mit SUID-root installiert sein.</tr>

<td class=tt>lib/cmc/icmpreceiver</td><td>Hilfsprozess, der vom CMC
gestartet wird und das Empfangen von ICMP- und TCP-Connection-Paketen
für das Smart-Ping übernimmt.
Dieser muss unbedingt mit SUID-root installiert sein.</tr>

<td class=tt>etc/init.d/cmc</td><td>Startskript des Micro Core.</td>
<td class=tt>share/check_mk/web/plugins/wato/cmc.py</td><td>WATO-Erweiterungen mit
globalen Einstellungen und Regelsätzen für den CMC.</tr>

<td class=tt>share/check_mk/web/plugins/sidebar/cmc.py</td><td>Ein Sidebarplugin für Multisite mit Performancedaten zum CMC.</td>
<td class=tt>share/check_mk/modules/cmc.py</td><td>(CMK)-Modul, das die
Konfiguration für den CMC erzeugt.</tr>

<td class=tt>share/check_mk/modules/rrd.py</td><td>(CMK)-Modul für das Anlegen von RRD-Dateien.</td>|===
