include::global_attr.adoc[]
= Dateien und Verzeichnisse des CMC
:revdate: 2016-03-10
:title: Vom CMC benutzte Dateien und Verzeichnisse
:description: Diese Übersicht beschreibt alles wichtigen Dateien und Verzeichnisse, die den Checkmk Micro Core (CMC) betreffen.

[TIP]
.Related Articles:
====
link:cmc.html[]

link:cmc_migration.html[]

link:cmc_differences.html[]

====


Folgende Übersicht zeigt Ihnen alle wichtigen Dateien und Verzeichnisse,
die den {CMK} Micro Core betreffen. Alle Pfade vestehen sich relativ
vom Homeverzeichnis der Instanz aus. Heißt die Instanz z.B. `mysite`,
so sind alle Pfade von `/omd/sites/mysite` aus zu verstehen.


==  Laufzeitdaten

[cols="<th style="width: 45%">Pfad</th>,~",options="header"]
|===

|Pfad
|Bedeutung






|Sicherheitskopien des Status nach Migration von einer alten CMC-Version oder wenn der CMC feststellt, dass die Zahl der Hosts in der Konfiguration stark gesunken ist. So können Sie zum alten Status zurückkehren (und Ihre Downtimes und Quittierungen wiederbekommen), wenn Sie z.B. durch eine Fehlkonfiguration alle Hosts vorübergehend aus dem Monitoring entfernt hatten.</td></tr>
 <tr><td class=tt>var/check_mk/core/core</td><td>Die `core`-Datei ist normalerweise nicht vorhanden. Falls doch, deutet sie auf einen früheren Absturz des Cores hin und hilft den Entwicklern beim Finden der Fehlerursache.</td></tr>
 <tr><td class=tt>var/check_mk/core/history</td><td>Die Historie aller Hosts und Services ist in dieser Datei im Textformat gespeichert. Sie entspricht vom Inhalt und Aufbau der Datei `nagios.log` von Nagios und ist mit ihr weitgehend kompatibel.</td></tr>
 <tr><td class=tt>var/check_mk/core/archive/</td><td>In dieses Verzeichnis werden alte Versionen von `history` bei der Logfilerotation verschoben. Nur wenn diese Dateien unkomprimiert vorhanden sind, kann man mit Livestatus und Multisite auf historische Daten zugreifen (Events, Verfügbarkeit).</td></tr>
 <tr><td class=tt>tmp/run/live</td><td>Livestatus-Socket des CMC. Dies liegt an der gleichen Stelle, wie das von Nagios. Da der CMC Livestatus-kompatibel zu Nagios und Icinga ist, können so alle Erweiterungen, die auf Livestatus basieren, ohne Anpassung genutzt werden (z.B. NagVis).</td></tr>
 <tr><td class=tt>tmp/run/cmc.pid</td><td>Aktuelle Prozess-ID des CMC.</td></tr>

|===


==  Konfiguration

Der CMC hat keine eigene Konfigurationsdatei. Alle Einstellungen für den CMC
finden Sie im WATO-Modul icon:icon_configuration[] [.guihint]#Global Settings# unter
[.guihint]#Monitoring Core# und werden zusammen mit den anderen globalen Optionen unter
`etc/check_mk/conf.d/wato/global.mk` gespeichern.

==  Software
[cols="<th style="width: 45%">Pfad</th>,~",options="header"]
[cols="<th style="width: 45%">Pfad</th>,~",options="header"]
|===

|Pfad
|Bedeutung






|Sicherheitskopien des Status nach Migration von einer alten CMC-Version oder wenn der CMC feststellt, dass die Zahl der Hosts in der Konfiguration stark gesunken ist. So können Sie zum alten Status zurückkehren (und Ihre Downtimes und Quittierungen wiederbekommen), wenn Sie z.B. durch eine Fehlkonfiguration alle Hosts vorübergehend aus dem Monitoring entfernt hatten.</td></tr>
 <tr><td class=tt>var/check_mk/core/core</td><td>Die `core`-Datei ist normalerweise nicht vorhanden. Falls doch, deutet sie auf einen früheren Absturz des Cores hin und hilft den Entwicklern beim Finden der Fehlerursache.</td></tr>
 <tr><td class=tt>var/check_mk/core/history</td><td>Die Historie aller Hosts und Services ist in dieser Datei im Textformat gespeichert. Sie entspricht vom Inhalt und Aufbau der Datei `nagios.log` von Nagios und ist mit ihr weitgehend kompatibel.</td></tr>
 <tr><td class=tt>var/check_mk/core/archive/</td><td>In dieses Verzeichnis werden alte Versionen von `history` bei der Logfilerotation verschoben. Nur wenn diese Dateien unkomprimiert vorhanden sind, kann man mit Livestatus und Multisite auf historische Daten zugreifen (Events, Verfügbarkeit).</td></tr>
 <tr><td class=tt>tmp/run/live</td><td>Livestatus-Socket des CMC. Dies liegt an der gleichen Stelle, wie das von Nagios. Da der CMC Livestatus-kompatibel zu Nagios und Icinga ist, können so alle Erweiterungen, die auf Livestatus basieren, ohne Anpassung genutzt werden (z.B. NagVis).</td></tr>
 <tr><td class=tt>tmp/run/cmc.pid</td><td>Aktuelle Prozess-ID des CMC.</td></tr>

|===
 <table>
 <tr>
|Pfad
|Bedeutung </tr>
 <tr><td class=tt>bin/cmc</td><td>Ausführbares Programm für den CMC selbst. Dieser ist in C++ entwickelt und benötigt außer der Standard-C++-Bibliothek keine weiteren Bibliotheken (insbesondere kein Boost). Zu Testzwecken kann man den CMC auch von Hand aufrufen (probieren Sie `cmc --help`).</td></tr>
 <tr><td class=tt>lib/cmc/checkhelper</td><td>Hilfsprozess, der vom CMC mehrfach gestartet wird und das effiziente Ausführen von aktiven Checks übernimmt.</td></tr>
 <tr><td class=tt>lib/cmc/icmpsender</td><td>Hilfsprozess, der vom CMC gestartet wird und das Senden ICMP-Paketen für das Smart-Ping übernimmt. Dieser muss unbedingt mit SUID-root installiert sein.</td></tr>
 <tr><td class=tt>lib/cmc/icmpreceiver</td><td>Hilfsprozess, der vom CMC gestartet wird und das Empfangen von ICMP- und TCP-Connection-Paketen für das Smart-Ping übernimmt. Dieser muss unbedingt mit SUID-root installiert sein.</td></tr>
 <tr><td class=tt>etc/init.d/cmc</td><td>Startskript des Micro Core.</td></tr>
 <tr><td class=tt>share/check_mk/web/plugins/wato/cmc.py</td><td>WATO-Erweiterungen mit globalen Einstellungen und Regelsätzen für den CMC.</td></tr>
 <tr><td class=tt>share/check_mk/web/plugins/sidebar/cmc.py</td><td>Ein Sidebarplugin für Multisite mit Performancedaten zum CMC.</td></tr>
 <tr><td class=tt>share/check_mk/modules/cmc.py</td><td>{CMK}-Modul, das die Konfiguration für den CMC erzeugt.</td></tr>
 <tr><td class=tt>share/check_mk/modules/rrd.py</td><td>{CMK}-Modul für das Anlegen von RRD-Dateien.</td></tr>
|===

