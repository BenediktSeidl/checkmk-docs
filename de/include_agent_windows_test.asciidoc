// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#test]
== Test und Fehlerdiagnose

Sobald Sie den Agent installiert und registriert haben, stellen Sie sich sicher die Frage, wie Sie ausprobieren können, ob Sie alles richtig gemacht haben.
Alle Möglichkeiten, die es vom {CMK} Server aus gibt, sind im allgemeinen Kapitel über die Agenten xref:wato_monitoringagents#diagnostics[beschrieben].
Aber natürlich gibt es noch weitere Diagnosemöglichkeiten, wenn man direkt auf dem überwachten Host selbst eingeloggt ist.

Da der neue Agent die beiden Komponenten Agent Controller auf dem Host und Agent Receiver auf dem {CMK} Server einführt, steigt die Zahl der Stellen, an denen etwas schief gehen kann.
Wir arbeiten uns im folgenden vom Agentenprogramm über den Agent Controller zur {CMK} Instanz durch.

=== Prüfen der Konfiguration

Um zu prüfen, ob die Konfiguration so eingelesen wurde, wie Sie das erwarten, rufen Sie das Agentenprogramm mit der Option `showconfig` auf.
Mit dieser Option bekommen Sie nicht nur die Konfiguration ausgegeben, wie sie derzeit vom Agenten benutzt wird.
Zusätzlich werden auch immer die benutzten Umgebungsvariablen sowie die verwendeten Konfigurationsdateien angezeigt.

Ist nur ein bestimmter Teil der Konfiguration interessant, schränken Sie die Ausgabe auf einen bestimmten Teil ein.
Hier wird zum Beispiel geprüft, ob die Optionen der Sektion `ps` korrekt gesetzt sind:

[{shell}]
----
C:\Windows\system32> "C:/Program Files (x86)/checkmk/service/check_mk_agent.exe" showconfig ps
# Environment Variables:
# MK_LOCALDIR="C:\ProgramData\checkmk\agent\local"
# MK_STATEDIR="C:\ProgramData\checkmk\agent\state"
# MK_PLUGINSDIR="C:\ProgramData\checkmk\agent\plugins"
# MK_TEMPDIR="C:\ProgramData\checkmk\agent\tmp"
# MK_LOGDIR="C:\ProgramData\checkmk\agent\log"
# MK_CONFDIR="C:\ProgramData\checkmk\agent\config"
# MK_SPOOLDIR="C:\ProgramData\checkmk\agent\spool"
# MK_INSTALLDIR="C:\ProgramData\checkmk\agent\install"
# MK_MSI_PATH="C:\ProgramData\checkmk\agent\update"
# Loaded Config Files:
# system: 'C:\Program Files (x86)\checkmk\service\check_mk.yml'
# bakery: 'C:\ProgramData\checkmk\agent\bakery'
# user  : 'C:\ProgramData\checkmk\agent\check_mk.user.yml'

# ps
enabled: yes
use_wmi: yes
full_path: no
----

Über diesen Weg bekommen Sie einen schnellen Überblick, wie die drei verschiedenen Konfigurationsdateien von dem Agenten zusammengeführt und benutzt werden. 
Fehler werden somit sofort sichtbar.

[#script_output]
=== Ausgabe des Agentenprogrammes

Das Agentenprogramm ist ein simples Windows Executable, welches Daten über Ihr System beschafft und als lose formatierten Text ausgibt.
Sie können es direkt auf der Kommandozeile aufrufen, mit dem Parameter `test` gibt es alles auf die Standardausgabe aus.
Mit der Option `help` bekommen Sie unter anderem eine ausführliche und vollständige Liste an Möglichkeiten, die Ihnen über die hier beschriebenen hinaus zur Verfügung stehen.
Da die Ausgabe etwas länger sein kann, ist der Pager `more` hier sehr praktisch, den Sie in der Ausgabe mit der Taste Q verlassen können:

[{shell-raw}]
----
C:\Windows\system32> "C:/Program Files (x86)/checkmk/service/check_mk_agent.exe" test | more
<<<check_mk>>>
Version: 2.1.0b1
AgentOS: windows
Hostname: DESKTOP-XYZA123
AgentController: cmk-agent-ctl 0.1.0
----

So können Sie testen, ob in der Ausgabe alle gewünschten Daten enthalten sind – beispielsweise, ob alle installierten Plugins Daten liefern.

Da das Agentenprogramm auf dem lokalen Loopback-Interface (127.0.0.1) auf Port 50001 lauscht, können Sie auch die Verbindungsaufnahme zu diesem mit Telnet oder Putty testen.

=== Agent Controller im Dump-Modus

Der Agent Controller stellt ein eigenes Subkommando `dump` bereit, das die vollständige Agentenausgabe anzeigt, wie sie im Monitoring ankommt:

[{shell-raw}]
----
C:\Windows\system32> "C:/Program Files (x86)/checkmk/service/cmk-agent-ctl.exe" dump | more
<<<check_mk>>>
Version: 2.1.0b1
BuildDate: Mar 14 2022
AgentOS: windows
Hostname: DESKTOP-QVPV284
Architecture: 64bit
WorkingDirectory: C:\Windows\system32
ConfigFile: C:\Program Files (x86)\checkmk\service\check_mk.yml
LocalConfigFile: C:\ProgramData\checkmk\agent\check_mk.user.yml
AgentDirectory: C:\Program Files (x86)\checkmk\service
PluginsDirectory: C:\ProgramData\checkmk\agent\plugins
StateDirectory: C:\ProgramData\checkmk\agent\state
ConfigDirectory: C:\ProgramData\checkmk\agent\config
TempDirectory: C:\ProgramData\checkmk\agent\tmp
LogDirectory: C:\ProgramData\checkmk\agent\log
SpoolDirectory: C:\ProgramData\checkmk\agent\spool
LocalDirectory: C:\ProgramData\checkmk\agent\local
OnlyFrom:
<<<cmk_agent_ctl_status:sep(0)>>>
----

So können Sie überprüfen, ob die Daten vom Agentenprogramm beim Agent Controller angekommen sind. 
Diese Ausgabe beweist noch nicht, dass der Agent auch über das Netzwerk erreichbar ist.

=== Verbindungstest von außen

Ist sichergestellt, dass lokal das Agentenskript und die asynchronen Plugins korrekt ausgeführt werden, können Sie als nächstes vom {CMK} Server per `netcat` (oder `nc`) prüfen, ob Port 6556 erreichbar ist:
// TK: Die asynchronen Plugins kommen aber bisher (?) nicht vor. 

[{shell}]
----
{c-omd} echo | nc 10.76.23.189 6556
16
----
// TK: "echo -n -e "\x10" | nc 10.76.23.189 6556" geändert zu "echo | nc 10.76.23.189 6556" (keine Ahnung wofür echo -n -e "\x10" gut war...)

Die Ausgabe `16` zeigt an, dass die Verbindungsaufnahme erfolgreich war und nun der TLS-Handshake stattfinden kann.
// TK: Was hat die 16 mit der Verbindungsaufnahme zu tun? Bitte erklären.
Da alles weitere hier TLS verschlüsselt stattfindet, ist keine detaillierte Prüfung möglich.

*Hinweis:* Falls die Kommunikation zwischen Agent und {CMK} Server _noch_ unverschlüsselt ist, erhalten Sie mit diesem Kommando statt der `16` die komplette unverschlüsselte Agentenausgabe.


=== Test mit der {CMK} Kommandozeile

Statt mit `nc` können Sie mit dem {CMK} Kommandozeilentool die komplette Agentenausgabe anfordern und sich anzeigen lassen.
Die Parameter `--debug -v` fügen noch einige Debugging-Informationen hinzu. 

[{shell-raw}]
----
{c-omd} cmk --debug -v -d  mynewhost
----




////
=== Den Agenten testen

Es gibt unter Windows verschiedene Möglichkeiten, den Agenten auf seine Funktion zu testen.
Mit der Option `help` bekommen Sie eine Übersicht, welche Diagnosemöglichkeiten der Agent im Einzelnen bietet.
Die wichtigsten sollen hier vorgestellt werden.


==== Lokal testen

Mit der Option `test` können Sie den Agenten direkt lokal ausführen und sofort sehen, ob eine Ausgabe fehlerfrei erzeugt werden kann.
Aus Platzgründen werden hier nur die ersten Zeilen als Beispiel gelistet:

[{shell-raw}]
----
C:\Program Files x86\checkmk\service> .\check_mk_agent.exe test
<<<check_mk>>>
Version: 2.0.0b5
BuildDate: Jan 27 2021
AgentOS: windows
Hostname: MSEDGEWIN10
Architecture: 64bit
WorkingDirectory: C:\Program Files (x86)\checkmk\service
----

// Beschreibung deaktiviert, weil Real-Time-Checks überhaupt noch gar nicht beschrieben sind oder eingeführt wurden.
// Auf ähnliche Weise können Sie auch die Real-Time-Checks testen
// und sehen, in welchem Zeitintervall die Werte ausgegeben werden
// können. Beachten Sie, dass diese Option auf einen Startsignal wartet und
// sich auch erst beendet, wenn Sie das Signal dazu geben:
//
// R+:
// UP(C:\Program Files x86\checkmk\service>):.\check_mk_agent.exe rt
// Press any key to START testing Realtime Sections
// Realtime kick from '127.0.0.1' mem:true df:true winperf:true
// df: Processed [1] drives
// <<<df:sep(9)>>>
// Windows_10      NTFS    41940988        21548916        20392072        52%     C:\
// <<<mem>>>
// MemTotal:      4193844 kB
// MemFree:       2150888 kB
// SwapTotal:     1441792 kB
// SwapFree:      685112 kB
// PageTotal:     5635636 kB
// PageFree:      2836000 kB
// VirtualTotal:  137438953344 kB
// VirtualFree:   137434635112 kB
// <<<winperf_processor>>>
// 1567626718.01 238 10000000
// 3 instances: 0 1 _Total
// -232 247981250000 247822031250 247901640625 100nsec_timer_inv
// -96 26199531250 28962031250 27580781250 100nsec_timer
// -94 11261562500 8653750000 9957656250 100nsec_timer
// -90 29692411 30441622 60134033 counter
// 458 97343750 817968750 457656250 100nsec_timer
// 460 230000000 653750000 441875000 100nsec_timer
// 1096 740994 1492053 2233047 counter
// 1098 0 0 0 rawcount
// 1508 241094017545 241103467681 241098742613 100nsec_timer
// 1510 241094017545 241103467681 241098742613 100nsec_timer
// 1512 0 0 0 100nsec_timer
// 1514 0 0 0 100nsec_timer
// 1516 21353597 22183421 43537018 bulk_count
// 1518 0 0 0 bulk_count
// 1520 0 0 0 bulk_count
// Press any key to STOP testing Realtime Sections
// R-:


==== Vom Monitoring-Server aus testen

Wenn ein Problem nicht lokal vorhanden ist, haben Sie mit der Option `-io` eine weitere Möglichkeit, den Agenten auch von außen zu prüfen.
Diese Option startet den Agenten kurzfristig als Service und protokolliert dann jede Verbindung, die von außen zu diesem Service hergestellt wird.
Auf diese Weise können sie prüfen, ob eine Anfrage auch wirklich den Host erreicht.
Beachten Sie, dass der Windows-Service des Agenten nicht laufen darf, damit dieser Test funktioniert.
Stoppen Sie daher vorher den Service und führen Sie danach den Test durch:

[{shell}]
----
C:\Program Files x86\checkmk\service> .\check_mk_agent.exe check -io
testing 10 seconds
Starting IO ipv6:false, used port:6556
Connected from '192.168.42.1' ipv6 :false -> queue
Put on queue, size is [1]
Found connection on queue, in queue left[0]
Connected from '192.168.42.1' ipv6:false <- queue
No data to send
Shutting down IO...
Stopping execution
Exiting process queue
cma::world::ExternalPort::ioThreadProc:  terminated from outside
IO ends...
----

Mögliche Fehler werden ebenfalls in diesem Test protokolliert, so dass Sie bei einem Fehlerfall besser herausfinden können, wo die Ursache des Problems zu suchen ist.


=== Weitere Debug-Möglichkeiten

Der Agent bietet über die bereits beschriebenen Optionen noch weitere Möglichkeiten viele Details über das konkrete Verhalten des Agenten herauszufinden.
Mit der Option `help` bekommen Sie unter anderem eine ausführliche und vollständige Liste an Möglichkeiten, die Ihnen über die hier beschriebenen hinaus zur Verfügung stehen.
// Unbefriedigend. Sollte ausführlicher beschrieben werden?
// TK: Und steht außerdem bereits in der Einleitung zum vorherigen Abschnitt
////