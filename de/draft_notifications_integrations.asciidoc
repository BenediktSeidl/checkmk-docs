= Alarmierungsmethoden
:revdate: draft
:title: Alarmierungsmethoden konfigurieren
:description: Checkmk kann über diverse Wege alarmieren, etwa Jira, PagerDuty, VictorOps oder Mail. Jede Methode muss individuell konfiguriert werden.
[.seealso][#notifications]
### Bereits vorhanden:
### Mails sind in notifications beschrieben
### Grundlegendes Individualskript in notifications beschrieben
### Jira in 5.6 beschrieben - Grundlage für Kapitelstruktur

### Zusammenführung:
### Jira-Integration übernehmen und an den Anfang setzen, da einzige Integration mit Bebilderung.

COMMENT[ML: Frage: Warum kommen Custom Notifications aus den Kommandos bei Opsgenie und PagerDuty nicht an? Über Fake Check Results funktioniert es. Bei den Webhooks von Mattermost/Slack und den API-Keys bei VictorOps/Pushover funktionieren die Custom Notifications.]

== Event Console
=== Funktion
Die Event Console ist die native Anlaufstelle für Ereignisse beim Monitoring mit
(CMK). Auch eine Alarmierung ist letztlich solch ein Ereignis und kann
entsprechend an die Event Console weitergeleitet werden - quasi als
(CMK)-interne Alarmierungsmethode.

=== Konfiguration
Die Einrichtung ist denkbar einfach und umfasst lediglich zwei Schritte:

. Wählen Sie in der Alarmierungsregel unter [.guihints]#Notification Method# den Punkt [.guihints]#Forward Notifications to Event Console;# optional können Sie auf eine [ec#syslogfacility|Syslog Facility] filtern, zum Beispiel [.guihints]#kern.}}# 
. Erstellen Sie eine [ec#rules-1|Event-Console-Regel,] die die Alarmierung abfängt, beispielsweise gefiltert auf die _Syslog Facility._

image::bilder/notifications_ec.png[]

Wenn die Event Console in einer entfernten Instanz läuft, können Sie in der Alarmierungsregel
natürlich auch dessen IP-Adresse als Ziel angeben.

###H1:Opsgenie
###H2:Funktion
###<a href="https://www.atlassian.com/software/opsgenie">Opsgenie,</a> mittlerweile
###Teil von Atlassian, bietet als Incident-Management-Plattform Alarmierungen und
###Eskalationen für Teams und kann dabei viele externe Tools integrieren, darunter
###auch Checkmk. Die grundsätzliche Anbindung benötigt lediglich einen API-Schlüssel
###und eine URL, Sie können in Checkmk jedoch auch weitere Optionen festlegen,
###beispielsweise zusätzliche Informationen je nach Art der Quelle des Alarms.
###
###H2:Konfiguration Opsgenie
###Zur Integration von Checkmk finden Sie direkt innerhalb von Opsgenie eine kurze
###Anleitung -- die sich jedoch auf eine ältere Checkmk-Version bezieht, in der Sie
###noch eine komplette URL samt API-Schlüssel übergeben mussten. In aktuellen
###Versionen geben Sie URL und Schlüssel separat ein. Zudem ist die URL nur für in
###Europa gehostete Accounts nötig.
###
###COMMENT[ML: In der Online-Hilfe wird eine URL in der Form my.app.eu.opsgenie.com genannt, korrekt ist aber api.eu.opsgenie.com. Da es die URL in der ersten Form ebenfalls gibt, sollte sie so aus der Hilfe verschwinden - oder die Hilfe ergänzt werden, sofern die URL in irgendeiner anderen Konfiguration in der my.app-Variante funktioniert. Und da zudem die Anleitung innerhalb von Opsgenie ebenfalls falsch ist, ist es derzeit ein wenig verwirrend ...]
###
###COMMENT[SK: Der Herr Entwickler (RB) hat sich hier nach eigener Angabe ver-copy-pastet. https://api.bla.blub ist richtig. Die Änderung in der Inline-Help ist schon unterwegs.]
###
###NL:Legen Sie ein Team an oder rufen Sie ein bestehendes auf.
###NL:Wählen Sie unter [.guihints]#Integrations/Add Integration# den Eintrag Checkmk.
###NL:In der nun angezeigten, fehlerhaften Anleitung finden Sie unter dem Punkt [.guihints]#Paste# eine URL samt Optionen und API-Key -- kopieren Sie den Domain-Teil der URL (https://api.eu.opsgenie.com).
###NL:Kopieren Sie anschließend noch den API-Schlüssel und speichern Sie die Integration.
###
###H2:Konfiguration Checkmk
###Für die Anbindung genügt in Checkmk nun die Angabe der beiden kopierten Daten:
###
###NL:Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Opsgenie.}}# 
###NL:Tragen Sie unter [.guihints]#API Key to use.# den kopierten Schlüssel ein.
###NL:Aktivieren Sie -- als EU-Nutzer -- den Punkt [.guihints]#Domain# und fügen Sie die kopierte Domain ein.
###
###BI:notifications_opsgenie.png
###
###Zum Testen können Sie die [commands|Kommandos] nutzen und etwa einen Host über
###{{Fake check results# auf (DOWN) setzen. Die Funktion [.guihints]#Custom notification# generiert an
###dieser Stelle hingegen keinen Alarm in Opsgenie.
###
###Die Konfiguration der Alarmierungsmethode Opsgenie bietet Ihnen allerlei weitere
###Optionen, insbesondere zum Anreichern und Ändern der Standardinhalte der
###Benachrichtigungen. Darüber hinaus können Sie über den Punkt
###{{Responsible teams# das Opsgenie-Team festlegen, wenn Sie nicht wie hier
###beschrieben speziell für ein Team, sondern für den gesamten Opsgenie-Acccount
###integriert haben -- was wiederum nur bei bestimmten Subskriptionen möglich ist.
###
###COMMENT[ML: Custom Actions: Was genau kommt da hin und was macht das? Testeingabe foobar war weder in der Notification innerhalb von Checkmk noch in Opsgenie zu sehen. Im Zweifel auslassen, da eher Opsgenie-Angelegenheit.]
###
###COMMENT[SK: Ich bin mir ziemlich sicher, dass es hier im "Opsgenie Actions" geht. Die kann man in Opsgenie definieren und dann auch von außen anstoßen. Siehe: https://youtu.be/7l8slo_Z1HM]
###
###COMMENT[ML: Der API-Schlüssel wird als Asterisks angezeigt - besser wäre als normaler Text, wie es auch beim Schlüssel von PagerDuty ist.]

###H1:PagerDuty
###H2:Funktion
###Die Incident-Managment-Plattform <a href="https://www.pagerduty.com">PagerDuty</a> kann aus unterschiedlichsten Quellen
###Meldungen empfangen und diese weiterverarbeiten, also zum Beispiel filtern, als
###Alarmierungen versenden oder Eskalationen in Gang setzen. Aus Checkmk lassen sich
###Benachrichtigungen ganz einfach über einen Schlüssel an die Plattform leiten.
###
###H2:Konfiguration PagerDuty
###PagerDuty bietet Integrationen für viele populäre Werkzeuge, darunter auch Checkmk.
###Dazu benötigen Sie lediglich einen _Integration Key,_ den Sie unter PagerDuty
###wie folgt anlegen:
###
###NL:Erstellen Sie einen neuen Service oder öffnen Sie einen vorhandenen.
###NL:Im entsprechenden Service erstellen Sie über den Reiter [.guihints]#Integrations# eine neue Integration.
###NL:Vergeben Sie einen beliebigen Namen und wählen Sie als [.guihints]#Integration Type# den Punkt [.guihints]#Check_MK.}}# 
###NL:Kopieren Sie den erzeugten [.guihints]#Integration Key.}}# 
###
###H2:Konfiguration Checkmk
###In Checkmk beschränkt sich die Einbindung auf die Angabe des Integrationsschlüssels:
###
###NL:Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#PagerDuty.}}# 
###NL:Tragen Sie unter [.guihints]#Integration Key# den kopierten Schlüssel ein.
###
###BI:notifications_pagerduty.png
###
###COMMENT[SK: Ich glaube, dass das so nicht funktioniert. Wenn kein Benutzer angegeben wird, werden angeblich (sagte Marsellus mal) auch keine Alarmierungen ausgelöst. Vielleicht sollten wir hier den Weg über Users -> Glocke vor ID beschreiben. Auf der Webseite von Partydroge.com legen die einen dedizierten Nutzer für PagerDuty an.]
###
###Die Filterung der erzeugten Benachrichtigungen können Sie wahlweise in Checkmk
###oder erst in PagerDuty über die [.guihints]#Event Rules# umsetzen. Optional können Sie
###die PagerDuty-Anbindung auch auf ein eigenes Checkmk-Nutzerkonto aufschalten.
###Erstellen Sie dazu einfach einen Standard-Nutzer mit deaktiviertem Login und
###anschließend eine persönliche Alarmierungsregel.
###
###COMMENT[SK: Das folgende ist mir zu negativ. Die Beschreibung, wie man das mit Fake Check Result testen kann genügt hier völlig.]
###
###Sie können die Anbindung wieder über [commands|Kommandos] testen, allerdings
###funktioniert das auch hier nicht über das Kommando [.guihints]#Custom notification.}}# 
###Nutzen Sie stattdessen abermals das Kommando [.guihints]#Fake check results# und setzen
###Sie einen von der Regel erfassten Host darüber auf (DOWN).

###H1:Push Notifications
###H2:Funktion
###<a href="https://pushover.net/">Pushover</a> ist ein einfacher Dienst, um Meldungen aus unterschiedlichsten Quellen an Apple-
###oder Android-Mobilgeräte zu senden, wo sie dann als _Benachrichtigung_ auftauchen. Die
###Anbindung erfolgt über zwei API-Schlüssel für eine Gruppe und eine App/Quelle.
###
###H2:Konfiguration Pushover
###In Pushover müssen Sie sowohl eine Gruppe anlegen, auch wenn Sie nur eine „Gruppe“ haben,
###als auch eine App explizit für Checkmk -- beide bekommen eigene API-Schlüssel:
###
###NL:Legen Sie in Pushover eine neue Gruppe über [.guihints]#Create a Group# an.
###NL:Kopieren Sie den angezeigten Gruppen-API-Schlüssel.
###NL:Erstellen Sie eine App mit beliebigem Namen über [.guihints]#Create an Application/API Token.}}# 
###NL:Kopieren Sie den angezeigten App-API-Schlüssel.
###
###H2:Konfiguration Checkmk
###In Checkmk genügt grundsätzlich die Angabe der beiden Schlüssel:
###
###NL:Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Push Notifications (using Pushover).}}# 
###NL:Geben den App-API-Schlüssel unter [.guihints]#API Key# an.
###NL:Geben den Gruppen-API-Schlüssel unter [.guihints]#User/Group Key# an.
###
###BI:notifications_pushover.png
###
###Optional können Sie hier noch die Pushover-Funktionen [.guihints]#Priority# und
###{{Select sound# aktivieren. Über die Priorität dürfen Sie zum Beispiel in
###Pushover konfigurierte Ruhezeiten aushebeln -- und derartige Alarme dann auch
###mit passenden Tönen untermalen.
###
###Zum Testen können Sie die [commands|Kommandos] [.guihints]#Fake check results# und
###{{Custom notification# verwenden.

###H1:ServiceNow
###
###COMMENT[ML: Keine Trial - Begriffe aus der Doku gezogen, Ablauf Theorie.]
###
###H2:Funktion
###[CEE] Die Anbindung von <a href="https://www.servicenow.com/">ServiceNow</a> steht nur für die (EE) zur Verfügung.
###Über die Plattform ServiceNow lassen sich unterschiedlichste Workflows
###abbilden und automatisieren (Stichwort ITIL), so auch die Alarmierung von Nutzern auf Basis von
###Checkmk-Notifications. Die Integration läuft über die Instanz-URL und Login-Daten.
###
###H2:Konfiguration ServiceNow
###Eine spezielle Konfiguration innerhalb von ServiceNow ist nicht erforderlich, es
###müssen lediglich Instanz-URL (gegebenenfalls in Form einer Custom-URL) und
###Nutzerdaten bekannt sein.
###
###H2:Konfiguration Checkmk
###Zum Aufsetzen der grundsätzlichen Alarmierung in Checkmk gehen Sie wie folgt vor:
###
###NL:Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Servicenow (Enterprise only).}}# 
###NL:Geben Sie unter [.guihints]#Servicenow URL# Ihre Instanz-URL ein.
###NL:Fügen Sie Nutzername und Passwort des _erstellenden_ Nutzers hinzu.
###NL:Unter [.guihints]#Caller ID# ergänzen Sie den Nutzernamen des _betroffenen_ Nutzers.
###
###BI:notifications_servicenow.png
###
###Alle weiteren Optionen dienen lediglich der Gestaltung des Alarmierungsinhalts. Für die
###beiden ServiceNow-eigenen Daten [.guihints]#Urgency# und [.guihints]#Impact# finden Sie Links auf die
###jeweiligen Einträge in der ServiceNow-Dokumentation in der Online-Hilfe von Checkmk.
###
###Zum Testen können Sie die [commands|Kommandos] [.guihints]#Fake check results# und
###{{Custom notification# verwenden.

###H1:Slack
###H2:Funktion
###Über den Messenger <a href="https://slack.com/">Slack</a> können Sie Benachrichtigungen
###einfach über einen Webhook empfangen. Das funktioniert sowohl auf selbst gehosteten
###oder gemieteten Servern, als auch über den kostenlosen öffentlichen Slack-Dienst.
###
###H2:Konfiguration Slack
###Um Webhooks zu aktivieren und einen neuen Webhook zu erstellen, müssen Sie zunächst
###eine Slack App erstellen. Melden Sie sich bei Slack an und erstellen Sie einen
###_Workspace._ Gehen Sie dann wie folgt vor:
###
###NL:Erstellen Sie über <a href="https://api.slack.com/messaging/webhooks">diesen Link</a> eine neue App über die Slack-API.
###NL:Vergeben Sie einen beliebigen Namen und wählen Sie Ihren Workspace.
###NL:Im nächsten Dialog wählen Sie als Funktion der App [.guihints]#Incoming Webhook.}}# 
###NL:Aktivieren Sie anschließend Webhooks, indem Sie den Schalter auf [.guihints]#on# setzen.
###NL:Erstellen Sie den Webhook über die Schaltfläche [.guihints]#Add New Webhook to Workspace.}}# 
###NL:Legen Sie zum Abschluss den Channel (Gruppe) fest, in den die App posten soll, und bestätigen Sie die Rechteanfrage.
###
###Zum Testen bekommen Sie nach Abschluss eine curl-Anweisung, die _Hello World_ in den
###gewünschten Channel postet. Kopieren Sie die Webhook-URL und wechseln Sie zu Checkmk.
###
###H2:Konfiguration Checkmk
###Die Konfiguration in Checkmk beschränkt sich auf die Angabe der Webhook-URL:
###
###NL:Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Slack or Mattermost.}}# 
###NL:Geben die kopierte Webhook-URL an.
###
###BI:notifications_slack.png
###
###Optional dürfen Sie URL-Präfixe angeben, um Links auf Ihre Checkmk-GUI innerhalb
###der Benachrichtigung zu steuern. Statt die Webhook-URL hier direkt anzugeben,
###können Sie ebenso den Passwortspeicher von WATO heranziehen und die URL aus einem
###der Einträge auslesen.
###
###Zum Testen können Sie die [commands|Kommandos] [.guihints]#Fake check results# und
###{{Custom notification# verwenden.

###H1:Mattermost
###H2:Funktion
###<a href="https://mattermost.com">Mattermost</a> ist die selbst gehostete Open-Source-Alternative zu Slack und lässt
###sich ebenfalls per Webhook mit Benachrichtigungen versorgen. 
###
###H2:Konfiguration Mattermost
###Wenn Sie den Mattermost-Server frisch aufgesetzt haben, sind Webhooks bereits aktiviert. Sie
###können sie aber in der Mattermost [.guihints]#System Console,# also der Verwaltungsoberfläche des Servers,
###unter [.guihints]#Integrations => Integration Management# nachträglich freischalten.
###
###Weitere Voraussetzung ist, dass Sie zumindest eine Gruppe angelegt haben -- ansonsten
###können Sie die Webclient-Ansicht gar nicht erst aufrufen. Gehen Sie anschließend
###wie folgt vor:
###
###NL:Rufen Sie in der Gruppenansicht aus dem Hauptmenü den Punkt [.guihints]#Integrations# auf.
###NL:Erstellen Sie einen neuen Webhook über [.guihints]#Incoming Webhooks => AddIncoming Webhook.}}# 
###NL:Vergeben Sie nach Belieben Namen und Beschreibung und wählen Sie den Channel für die Postings mit den Benachrichtigungen.
###
###Anschließend wird die Webhook-URL generiert -- kopieren Sie diese.
###
###H2:Konfiguration Checkmk
###Die Aktivierung in Checkmk beschränkt sich wie auch bei Slack auf die Angabe der Webhook-URL:
###
###NL:Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Slack or Mattermost.}}# 
###NL:Geben die kopierte Webhook-URL an.
###
###BI:notifications_mattermost.png
###
###Optional dürfen Sie URL-Präfixe angeben, um Links auf Ihre Checkmk-GUI innerhalb
###der Benachrichtigung zu steuern. Statt die Webhook-URL hier direkt anzugeben,
###können Sie ebenso den Passwortspeicher von WATO heranziehen und die URL aus einem
###der Einträge auslesen.
###
###Zum Testen können Sie die [commands|Kommandos] [.guihints]#Fake check results# und
###{{Custom notification# verwenden.

== SMS
=== Funktion
Die Alarmierung via SMS ist eine sehr zuverlässige Variante und und bietet einen großen
Vorteil gegenüber allen anderen Methoden: Sie können sich auch über eine nicht
funktionierende Online-Verbindung benachrichtigen lassen. Checkmk erstellt Benachrichtigungen
in Form von Textdateien und leitet diese an die
<a href="http://smstools3.kekekasvi.com/">smstools</a> weiter, die sich wiederum um den
Versand kümmern.

Hardware-seitig können Sie beliebige Geräte verwenden, die mit den smstools funktionieren;
beispielsweise das USB-Modem
<a href="https://www.multitech.com/models/92507087LF">MultiTech MTD-H5,</a>
das auch mit der Checkmk-Appliance kompatibel ist.

=== Konfiguration smstools
Die smstools benötigen keine spezielle Konfiguration für Checkmk. Sie müssen lediglich sicherstellen,
dass Ihr Instanz-Nutzer Schreibrechte für das Verzeichnis für ausgehende Nachrichten hat,
standardmäßig `/var/spool/sms/outgoing`. Korrekt formatierte Textdateien,
die in diesem Ordner landen, werden von den smstools automatisch weiterverarbeitet.

=== Konfiguration Checkmk
Auch in Checkmk müssen Sie in der zugehörigen Regel keine speziellen Einstellungen vornehmen,
allerdings muss in den Nutzereinstellungen der zu benachrichtigenden Nutzer die
Nummer zum Empfang von SMS hinterlegt werden; das Format ist mit Länderkennziffer, ohne
anführendes +-Zeichen.

. Tragen Sie für den Nutzer in dessen Einstellungen unter [.guihints]#Identity => Pager address# die Telefonnummer ein, etwa `49171XXXXXXX` für eine deutsche Nummer mit der Vorwahl `0171`.
. Wählen Sie in der Alarmierungsregel als [.guihints]#Notification Method# den Punkt [.guihints]#SMS (using smstools).}}# 

Die Telefonnummer wird in der generierten Textdatei in die Header-Zeile _To:_ übernommen.
Weitere <a href="http://smstools3.kekekasvi.com/index.php?p=fileformat">Header für die smstools</a> können Sie über die Kästchen für [.guihints]#Parameter# angeben.

Zum Testen können Sie das [commands|Kommando] [.guihints]#Fake check results# verwenden.



== Spectrum
COMMENT[ML: In Ermangelung eines Spectrum-Servers ist das Folgende ein wenig geraten. Ich habe hier aber einen SNMP-Trap-Receiver aufgesetzt und da kommen die Meldungen auch einfach durch. Falls jemand mehr weiß ...]

COMMENT[SK: Ich kläre jetzt erst mal, ob es diesen Spectrum-Krempel überhaupt noch gibt. Ich finde dazu auch nix 100% passendes im Netz.]

###
###H2:Funktion
###Der <a href="https://enterprise.spectrum.com/">Spectrum Enterprise Manager</a> kann
###SNMP-Traps empfangen und auswerten, die Checkmk in dieser Konfiguration für
###die Alarmierung nutzt.
###
###COMMENT[ML: Bitte mal prüfen, ob das überhaupt die richtige URL ist. "Spectrum Server" scheint es als Produkt gar nicht zu geben - die Hardware-Laden unter spectrumservers.com ist vermutlich nicht gemeint. Und ca.com ist offenbar in broadcom aufgegangen ... ]
###
###H2:Konfiguration Spectrum
###Für den Empfang von Checkmk-Alarmen müssen Sie auf dem Spectrum-Server keine zusätzliche
###Konfiguration vornehmen, der Empfang von SNMP-Traps ist dessen Standardvorgehensweise.
###
###H2:Konfiguration Checkmk
###Die Anbindung in Checkmk beschränkt sich auf die Angabe der Zugangsdaten, also
###IP-Adresse und SNMP-Community/-Passwort:
###
###NL:Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Spectrum Server.}}# 
###NL:Tragen Sie die IP-Adresse des Spectrum-Servers sowie das SNMP-Passwort ein.
###NL:Vergeben Sie optional eine neue Basis-OID für die Checkmk-Traps.
###
###Zum Testen können Sie die [commands|Kommandos] [.guihints]#Fake check results# und
###{{Custom notification# verwenden.

###H1:VictorOps
###H2:Funktion
###Die Incident-Management-Plattform <a href="https://victorops.com/">VictorOps</a>
###kümmert sich um das Verteilen von Meldungen
###aus Dutzenden unterschiedlicher Quellen, die als Integrationen direkt in der
###Weboberfläche ausgewählt werden können. Für Checkmk steht ein generisches
###REST-Backend zur Verfügung.
###
###H2:Konfiguration VictorOps
###Eine explizite Aktivierung der Benachrichtigungen aus Checkmk benötigen Sie nicht,
###lediglich die REST-Endpoint-Adresse:
###
###NL:Rufen Sie in VictorOps unter [.guihints]#Integrations# den Punkt [.guihints]#REST Generic# auf.
###NL:Kopieren Sie die angezeigte REST-Endpoint-URL.
###
###H2:Konfiguration Checkmk
###In Checkmk müssen Sie lediglich diesen Schlüssel angeben:
###
###NL:Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#VictorOps.}}# 
###NL:Tragen Sie unter [.guihints]#VictorOPS REST Endpoint# die kopierte URL ein.
###
###BI:notifications_victorops.png
###
###Zum Testen können Sie die [commands|Kommandos] [.guihints]#Fake check results# und
###{{Custom notification# verwenden. 
