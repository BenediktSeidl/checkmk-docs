= Updates und Upgrades
:revdate: 2016-10-12
[.seealso][#cmk_versionen] [#cmc] [#cmc_migration]MT:(CMK) updaten
MD:Egal ob Demoversion, Open-Source- oder Enterprise-Edition: Checkmk zu aktualisieren ist so einfach, wie möglich. Die Prinzipien dazu werden hier erklärt.

== Einleitung

Das Update von (CMK) auf eine neue Version läuft etwas anders
als bei anderer Software. Warum?

Grund ist, dass (CMK) nicht nur mehrere unabhängige _Instanzen_
(Sites) auf einem Server erlaubt, sondern auch mehrere gleichzeitig
installierte _[cmk_versionen|Softwareversionen]_. Dabei ist jede Instanz
einer installierten Version zugeordnet. Nehmen wir als Beispiel folgende
Situation auf einem fiktiven Server:

image::bilder/update1.png[align=center,width=300]

Hier verwendet die Instanz `mysite1` die Version `1.2.8p11.cee`,
die Instanzen `mysite2` und `mysite3` die
Version `1.2.6p10.cre`. Die (CMK)-Version `1.2.6p10.demo` ist
zwar installiert, wird aber aktuell nicht verwendet.

Dieses Beispiel macht klar, dass ein Update nicht einfach nur die Installation
eines neuen RPM/DEB-Pakets von (CMK) auf dem Server bedeuten kann. Vielmehr
braucht es dazu noch einen weiteren Schritt. Nehmen wir als Beispiel folgende
Situation:

image::bilder/update2.png[align=center,width=300]

Hier soll die Instanz `mysite` auf die (CMK)-Version `1.2.8p11.cee`
aktualisiert werden. Der erste Schritt ist das Herunterladen und Installieren
des passenden RPM/DEB-Pakets. Dies geschieht genauso wie bei der
[install_packages|ersten Installation]. Die neu installierte Version wird zunächst
noch von keiner Instanz verwendet und das sieht dann so aus:

image::bilder/update3.png[align=center,width=300]

Als zweiter Schritt erfolgt nun ein Update der Instanz von `1.2.6p10.cre`
auf `1.2.8p11.cee`. Dies geschieht durch den Befehl `omd update`,
welchen wir weiter unten im Detail besprechen:

image::bilder/update4.png[align=center,width=300]

Nach dem Update können Sie die (eventuell) nicht mehr benötigte Version `1.2.6p10.cre`
durch das Deinstallieren des entsprechenden Pakets entfernen. Es ist aber keine
schlechte Idee, diese noch installiert zu lassen. So können Sie mit einem erneuten `omd update` sehr schnell wieder auf diese zurück wechseln,
falls das nötig sein sollte.

[#detailed]
== Update von (CMK) im Detail


=== Installationen neuer Versionen

Wie in der Einleitung beschrieben, ist der erste Schritt beim Update die
[install_packages|Installation] der gewünschten neuen [cmk_versionen|Version] von (CMK). Dies erfolgt
genau wie bei der ersten Installation  --  allerdings wird es wohl etwas schneller
gehen, weil die meisten abhängigen Pakete jetzt schon installiert sind. In
folgendem Beispiel installieren wir das Paket für Ubuntu 14.04 (Codename Trusty):

[source,bash]
----
RP:gdebi omd-1.2.8p11.cee_0.trusty_amd64.deb
----

Die Liste der installierten (CMK)-Versionen können Sie jederzeit mit
dem Befehl `omd versions` abrufen:

[source,bash]
----
RP:omd versions
2016.12.18.cee
1.2.8p11.cee
1.2.6p10.cre (default)
----

Eine dieser Versionen ist mit `(default)` markiert. Diese
_Defaultversion_ wird automatisch beim Anlegen von neuen Sites
verwendet, sofern Sie nicht mit `omd -V myversion create mysite` eine
andere angeben. Bei der Arbeit mit bestehenden Sites ist sie nicht relevant. Die
aktuelle Default&shy;version können Sie mit `omd version` abfragen und
mit `omd setversion` ändern:

[source,bash]
----
RP:omd version
1.2.6p10.cre
RP:omd setversion 1.2.8p11.cee
RP:omd version
1.2.8p11.cee
----

Beim Update oder Managen von _bestehenden_ Instanzen spielt die Defaultversion
keine Rolle. Der Befehl `omd` startet sich selbst immer
automatisch in der zur Instanz passenden Version.

Eine Auflistung der aktuellen Instanzen und welche Versionen diese verwenden
liefert der Befehl `omd sites`:

[source,bash]
----
RP:omd sites
SITE             VERSION
mysite           1.2.6p10.cre
test             2016.12.18.cee
----

[#execute]
=== Durchführen des Updates

Nachdem die gewünschte neue Version installiert ist, können Sie das
Update der Instanz durch&shy;führen. Dazu sind keine `root`-Rechte
erforderlich. Machen Sie das Update am besten als Instanz&shy;benutzer:

[source,bash]
----
RP:su - mysite
----

Stellen Sie sicher, dass die Instanz gestoppt ist:

[source,bash]
----
OM:omd stop
----

Das Updaten  --  also eigentlich das Umschalten auf eine andere Version  --  geschieht nun einfach
mit dem Befehl `omd update`:

[source,bash]
----
OM:omd update
----

Falls es mehr als eine mögliche Zielversion gibt, bekommen Sie diese zur Auswahl:

image::bilder/omd-update-2.png[align=center,width=480]

Ein wichtiger Teil des Updates ist das Aktualisieren von
_mitausgelieferten_ Konfigurationsdateien. Dabei werden von
Ihnen evtl. vorgenommene Änderungen in diesen Dateien nicht einfach
verworfen, sondern zusammengeführt. Dies funktioniert sehr ähnlich zu
Versionskontrollsystemen, die versuchen, gleichzeitige Änderungen mehrerer
Entwickler in der gleichen Datei automatisch zusammenzuführen.

Manchmal  --  wenn die Änderungen die gleiche Stelle der Datei betreffen  --
funktioniert das nicht und es kommt zu einem _Konflikt_. Wie Sie diesen
lösen können, zeigen wir [update#conflicts|weiter unten].

Das Update zeigt eine Liste aller angepassten Dateien und Verzeichnisse:

[source,bash]
----
2016-10-11 18:27:07 - Updating site 'mysite' from version 1.2.6p10.cre to 1.2.8p11.cee...

 <b class=green>** Unwanted       *var/log/nagios.log* (unchanged, deleted by you)
 <b class=green>** Updated        *etc/nagvis/nagvis.ini.php*
 <b class=green>** Updated        *etc/mk-livestatus/nagios.cfg*
 <b class=green>** Updated        *etc/check_mk/defaults*
 <b class=green>** Updated        *etc/apache/conf.d/02_fcgid.conf*
Finished update.
----

Wenn alles erfolgreich durchgelaufen ist, ist die Instanz auf die neue Version
umgeschaltet&nbsp;&#8230;

[source,bash]
----
OM:omd version
1.2.8p11.cee
----

&#8230; und kann gestartet werden:

[source,bash]
----
OM:omd start
----


=== Inkompatible Änderungen

Softwareentwicklung bedeutet Änderung. Und da wir immer daran arbeiten,
(CMK) modern zu halten, kommen wir manchmal nicht drumherum, alte Zöpfe
abzuschneiden und Änderungen zu machen, die _inkompatibel_ sind. Das
bedeutet, dass Sie nach einem Update _eventuell_ Ihre Konfiguration
anpassen oder wenigstens überprüfen sollten.

Ein typisches Beispiel dafür sind neue Check-Plugins, welche bestehende
Plugins ersetzen. Falls Sie eines der betroffenen Plugins einsetzen, ist nach
dem Update eine erneute [wato_services|Serviceerkennung] auf den betroffenen
Hosts notwendig.

Eine Übersicht über alle Änderungen in (CMK) inklusive einer Suchfunktion
finden Sie online
<a href="https://checkmk.de/check_mk-werks.php">hier</a>
COMMENT[Englisch: <a href="https://checkmk.com/check_mk-werks.php">here</a>]
Noch praktischer ist aber die in (CMK) eingebaute Funktion zur Recherche
in den Versionshinweisen. Zu diesen gelangen Sie mit einem Klick auf die Versionsnummer
links oben in der Seitenleiste:

image::bilder/update_click_version.png[align=center,width=75%]

(CMK) verfolgt dabei automatisch _neue_ inkompatible Änderungen
und warnt Sie entsprechend:

image::bilder/update_unacked.png[align=center,width=75%]

Sie können diese „Werks“ dann ansehen und mit einem Mausklick bestätigen.
Außerdem finden Sie eine Auflistung über die komplette Historie
der Änderungen inklusive einer Suchfunktion:

image::bilder/update_incomp_werks.png[align=border,width=75%]


=== Downdate  --  zurück zur alten Version

Der Prozess zum Umschalten auf eine alte Version läuft völlig analog
zum Update. Genau genommen ist es `omd update` völlig egal, ob die
Zielversion neuer oder älter ist als die aktuelle Version. Somit können
Sie hin- und herschalten wie Sie möchten.

Bitte bedenken Sie aber auch, dass selbst wenn ein Downdate zu einer
alten Version wunderbar funktioniert, (CMK) mit bestehenden Daten aus
*neueren* Versionen nicht immer umgehen kann. Eine neue (CMK)-Version
legt Daten und Konfiguration eventuell in einem erweiterten Format an,
das eine alte Version nicht versteht.

Eine Konfiguration, die mit WATO gepflegt wird, wird erst dann auf ein eventuell
neues Format umgebaut, sobald Sie WATO aktiv verwenden und Änderungen
speichern. Solange Sie das nicht getan haben, ist ein Wechsel zurück zur
alten Version in der Regel unproblematisch.

Falls Sie also noch nicht sicher sind, ob Sie zu einer früheren Version
zurück müssen, empfehlen wir:

* Machen Sie vor dem Update eine Datensicherung.
* Probieren Sie die neue Version erst in Ruhe aus, bevor Sie Änderungen via WATO machen.

=== Das Update im Detail

Sind Sie neugierig, was beim Update genau „unter der Haube abläuft“? Oder
haben Sie beim Durchlauf von `omd update` Konflikte in Dateien bekommen?
Dann sollten Sie hier weiterlesen.

Bei `omd update` geschehen drei Dinge:

. Aktualisieren von Vorgabedateien unter `etc/` und `var/`, also solchen Dateien, die bei `omd create` erzeugt wurden.
. Umschalten der Version auf die Zielversion durch Ändern des symbolischen Links `version`, welcher sich im Site-Verzeichnis befindet.
. Nachbearbeitungen durch verschiedene Pakete (z.B. (CMK)). Insbesondere wird automatisch ein [.guihints]#Activate Changes# durchgeführt, um eine valide Konfiguration für den Kern zu erzeugen.

==== Aktualisieren von Dateien, Zusammenführen von Änderungen

Der erste Schritt ist der bei weitem umfangreichste. Hier zeigt sich ein
großer Vorteil von (CMK) gegenüber klassischen Software-Installationen:
(CMK) hilft Ihnen, alle Standard-Konfigurations&shy;dateien an die Erfordernisse
der neuen Version anzupassen. Dies ähnelt dem Vorgang beim Update einer
Linux-Distribution, geht aber in der Umsetzung darüber hinaus.
So behandelt (CMK) eine Vielzahl von Fällen, zum Beispiel:

* Zusammenführen von Dateiänderungen mit lokalen Änderungen des Benutzers.
* Dateien, Verzeichnisse und symbolische Links, die in der neuen Version obsolet sind oder vom Benutzer gelöscht wurden.
* Änderungen an den Berechtigungen.
* Änderungen des Dateityps (aus Verzeichnis oder Datei wird symbolischer Link oder umgekehrt).
* Änderungen des Ziels von symbolischen Links.

Dabei achtet (CMK) stets darauf, dass Ihre lokalen Änderungen erhalten bleiben,
gleichzeitig aber alle für die neue Version notwendigen Änderungen
umgesetzt werden.

[#conflicts]
==== Zusammenführen und Konflikte

Falls die neue Version eine Änderung an einer Konfigurationsdatei vorsieht,
an der Sie inzwischen selbst Änderungen vorgenommen haben, versucht (CMK),
beide Änderungen automatisch zusammenzuführen (mergen). Dies geschieht
mit den gleichen Methoden, die auch Versions&shy;kontrollsysteme verwenden.

Am wenigsten Probleme gibt es immer dann, wenn Ihre und Check_MKs Änderungen
räumlich weit genug auseinander liegen (mindestens ein paar Zeilen). Dann
geschieht das Mergen automatisch und ohne Ihre Hilfe.

Wenn zwei Änderungen kollidieren, weil sie die gleiche Stelle der Datei
betreffen, kann und will (CMK) nicht entscheiden, welche der beiden Änderungen
wichtiger ist. In diesem Fall werden Sie als Benutzer eingeschaltet und
können den Konflikt interaktiv auflösen:

image::bilder/omd-update.png[align=center,width=500]

Sie haben nun folgende Möglichkeiten:

[cols=, ]
|===
<td>*d*</td><td>Dies zeigt Ihnen die Unterschiede zwischen der neuen Defaultversion der Datei und Ihrer Version in Form eines "unified diff" (`diff -u`).</td><td>*y*</td><td>Dies ist ähnlich, zeigt aber ausgehend von der früheren Defaultversion, welche Änderungen Sie an der Datei gemacht haben.</td><td>*n*</td><td>Diese dritte Option schließt quasi das Dreieck und zeigt die Änderungen, welche (CMK) an der Datei vornehmen möchte.</td><td>*t*</td><td>Drücken Sie *t*, so wird Ihre Originaldatei  --  ohne den bereits erfolgreich gemergten Änderungen  --  in einem Editor geöffnet. Editieren Sie nun die Datei, um eventuellen Konflikten aus dem Weg zu gehen. Nach dem Schließen des Editors probiert (CMK) das Mergen erneut.</td><td>*k*</td><td>Hier entscheiden Sie sich dafür, die Datei so zu übernehmen, wie sie jetzt ist. Die erfolgreich eingebauten Änderungen bleiben. Ansonsten bleibt die Datei so, wie von Ihnen angepasst.</td><td>*r*</td><td>So stellen Sie Ihre Datei im Ausgangszustand wieder her und verzichten auf das Update von (CMK) für diese Datei. Möglicherweise notwendige Anpassung müssen Sie selbst vornehmen.</td><td>*i*</td><td>Installieren der neuen Defaultdatei: Ihre Änderungen an der Datei gehen verloren.</td><td>*s*</td><td>Wenn Sie unsicher sind, können Sie mit *s* eine Shell öffnen. Sie befinden sich im Verzeichnis, in der die betroffene Datei liegt, und können sich ein Bild von der Lage machen. Beenden Sie die Shell mit Strg-D, um das Update fortzusetzen.</td><td>*a*</td><td>Abbruch des Updates. Die Instanz bleibt auf der alten Version. Die bereits geänderten Dateien bleiben aber geändert! Sie können jederzeit einen neuen Update-Versuch starten.</td>|===

==== Weitere Konfliktsituationen

Neben dem inhaltlichen Zusammenführen von Dateien gibt es noch
eine ganze Reihe weiterer Fälle, in denen (CMK) Ihre Entscheidung braucht.
Dies sind teils sehr ungewöhnliche Situationen, die aber trotzdem
korrekte Behandlung brauchen. (CMK) wird Ihnen in diesen Fällen stets
die Auswahl geben, Ihre Version beizubehalten oder die neue Defaultversion
zu übernehmen. Außerdem haben Sie immer die Möglichkeit eines Abbruchs
oder können eine Shell öffnen. Beispiele für solche Fälle sind:

* Kollidierende Änderungen des Dateityps (z.B. wenn eine Datei durch einen symbolischen Link ersetzt wird).
* Kollidierende Änderungen an den Dateirechten.
* Geänderte Dateien, die in der neuen Version entfallen.
* Von Ihnen angelegte Dateien, Verzeichnisse oder Links, die mit neuen Dateien/Verzeichnissen/Links kollidieren.


==== Erklärung der Ausgaben beim Update

Immer wenn der Updatevorgang automatisch Änderungen an Dateien macht,
gibt er eine Zeile zur Erklärung aus. Dabei gibt es folgende Möglichkeiten
(wenn von Datei die Rede ist, gilt dies analog auch für Links und
Verzeichnisse):

[cols=, ]
|===

<td class="tt" width="20%">Updated
|Eine Datei hat sich in der neuen Version geändert. Da Sie keine Änderungen
an der Datei gemacht haben, setzt (CMK) einfach die neue Defaultversion der Datei ein.


|`Merged`
|Eine Datei hat sich in der neuen Version geändert, während Sie gleichzeitig andere Änderungen
an der Datei gemacht haben. Beide konnten konfliktfrei zusammengeführt werden.


|`Identical`
|Eine Datei hat sich in der neuen Version geändert. Gleichzeitig haben Sie
die Datei selbst schon in genau der gleichen Art geändert. (CMK) muss nichts unternehmen.


|`Installed`
|Die neue Version bringt eine neue Konfigurationsdatei mit, welche soeben installiert wurde.


|`Identical&nbsp;new`
|Die neue Version bringt eine Datei mit, inzwischen haben Sie selbst die
gleiche Datei mit dem gleichen Inhalt angelegt.


|`Obsolete`
|In der neuen Version ist eine Datei (Link, Verzeichnis) weggefallen.
Sie haben diese Datei sowieso schon gelöscht. Nicht passiert.


|`Vanished`
|Auch hier ist eine Datei weggefallen, welche Sie aber weder gelöscht
noch verändert haben. (CMK) entfernt diese Datei automatisch.


|`Unwanted`
|Sie haben eine Datei gelöscht, die normalerweise vorhanden ist. Da sich
in der neuen Version keine Änderung in der Datei ergeben hat, belässt
es (CMK) dabei, dass die Datei fehlt.


|`Missing`
|Sie haben eine Datei gelöscht, an der sich in der neuen Version Änderungen
ergeben haben. (CMK) legt die Datei nicht neu an, warnt Sie aber durch diese Ausgabe.


|`Permissions`
|(CMK) hat die Berechtigungen einer Datei aktualisiert, da in der
neuen Version andere Rechte gesetzt sind.

|===

=== Update ohne Benutzerinteraktion

Möchten Sie das Softwareupdate von (CMK) automatisieren? Dann werden Sie vielleicht
erstmal an den interaktiven Rückfragen von `omd update` gescheitert sein.
Dafür gibt es eine einfache Lösung: Der Befehl kennt nämlich Optionen, die speziell
für den Einsatz in Skripten gedacht sind:

* Die Option `-f` oder `--force` direkt nach `omd` verhindert alle Fragen vom Typ „Sind Sie sicher...“.
* Die Option `--conflict=` direkt nach `update` setzt das gewünschte Verhalten bei einem Dateikonflikt.

Mögliche Werte für `--conflict=` sind:

[cols=, ]
|===


<td class="tt" width="25%">--conflict=keepold
|Behält im Konfliktfall Ihre eigene modifizierte Version der Datei. Eventuell ist (CMK) dann
aber nicht lauffähig und ein manuelles Nacharbeiten erforderlich.


|`--conflict=install`
|Installiert im Konfliktfall die neue Standardversion der Datei. Damit gehen lokale
Änderungen in der Datei zumindest teilweise verloren.


|`--conflict=abort`
|Bricht das Update im Konfliktfall ab. Das bedeutet aber *nicht,* dass alles
auf den alten Stand zurückgerollt wird. Etliche Konfigurationsdateien sind eventuell
schon umgestellt. Als Version ist aber noch die alte Version eingestellt.


|`--conflict=ask`
|Dies ist das Standardverhalten, somit ist die Option in dieser Form eigentlich
wirkungslos.

|===

Ein Beispiel für den kompletten Befehl für ein automatisches Update der Instanz `mysite`
auf die Version `1.2.8p11`:

[source,bash]
----
RP:omd stop mysite ; omd -f update --conflict=install mysite 1.2.8p11 && omd start
----

Durch das `&amp;&amp;` vor dem `omd start` wird ein Starten der
Instanz verhindert, falls das `omd update` mit einem Fehler abbricht.
Ersetzen Sie das `&amp;&amp;` durch ein Semikolon (`;`), falls Sie einen Start
auch in diesem Fall unbedingt versucht wollen.

Falls Sie sicher sind, dass Sie nur eine einzige (CMK)-Instanz auf dem Server
haben, können Sie deren Namen zur Verwendung in einem Shellskript einfach
in einer Variable einfangen:

[source,bash]
----
RP:omd sites --bare
mysite
RP:SITENAME=$(omd sites --bare)
RP:echo $SITENAME
mysite
----

Das ermöglicht Ihnen, obige Zeile vom Namen der Instanz unabhängig zu machen. Ein
kleines Shellskript könnte z.B. so aussehen:

.update.sh

----#!/bin/bash
SITE=$(omd sites --bare)
VERSION=1.2.8p11

omd stop $SITE
omd -f update --conflict=install $SITE $VERSION && omd start $SITE
----

[#updatedemo]
== Upgrade der Demo- auf die Vollversion

Haben Sie Ihre erste Installation von (CMK) mit der (FE) gemacht?
Sobald Sie eine Subskription der (SE) oder (ME) haben, können Sie Ihre bestehende
Instanz einfach auf die Vollversion upgraden.

Das Vorgehen ist exakt wie beim „normalen“ Update. Der einzige
Unterschied ist, dass Sie von einer Version mit der Endung `.demo`
auf eine Version mit der Endung `.cee` upgraden.  Installieren Sie
einfach das gewünschte Paket der Vollversion und schalten Sie dann die
bestehende Instanz mit `omd update` auf diese um.

Am einfachsten geht das, wenn beide Versionen bis auf das Suffix `.demo`
bzw. `.cee` identisch sind.  Was die Funktionalität betrifft, ist die
Demoversion völlig identisch mit der Vollversion. Daher ergeben sich durch das
Upgrade keinerlei Unterschiede.

Ein gleichzeitiger Wechsel der eigentlichen Version ist aber durchaus
möglich. Dabei gelten die gleichen Grundsätze wie bei einem normalen Update
von (CMK).

[#updatecma]
[#upgrade]
=== Upgrade der (CMK)-Appliance

Auch eine Demo-Appliance können Sie ohne Datenverlust auf eine Vollversion
mit einer der (EE) upgraden:

. Spielen Sie auf der Appliance über deren Web-GUI eine [appliance_usage#cma_webconf_firmware|aktuelle Firmware] der Vollversion ein.
. Installieren Sie in der [appliance_usage#manage_cmk|Versions-Verwaltung] der Appliance eine Vollversion einer der (EE).
. Stellen Sie in der [appliance_usage#site_management|Instanzverwaltung] der Appliance die Instanzen auf diese Version um.


[#updateraw]
== Upgrade der (RE) auf eine der (EE)

Auch ein Upgrade der (CRE) auf eine der (EE) ist möglich.  Auch hier ist das
Vorgehen wie gehabt: Gewünschtes Paket installieren und Instanzen
mit `omd update` umstellen.

Da der (RE) etliche Module und Features der (EE) fehlen, gibt es allerdings nach
der Umstellung ein paar Dinge zu beachten. Der entscheidende Punkt ist, dass
beim Anlegen von _neuen_ Instanzen der (RE) bzw. (EE) _unterschiedliche
Defaulteinstellungen_ gesetzt werden.

==== Nagios vs. CMC

Da die CRE nur Nagios als Kern unterstützt, ist dieser bei Instanzen,
die mit der CRE erstellt wurden voreingestellt. Diese Einstellung bleibt
beim Upgrade auf die CEE erhalten. Das bedeutet, dass Sie nach einem Upgrade
zunächst weiterhin mit Nagios als Kern fahren. Eine Umstellung auf den CMC
erfolgt mit `omd config` und wird in einem
[cmc_migration|eigenen Artikel] beschrieben.


==== RRD-Format

Die CEE unterstützt ein alternatives Format für die Speicherung
historischer Messdaten, welches deutlich weniger Platten-I/O erzeugt. Bei
neuen CEE-Instanzen ist dies automatisch voreingestellt. CRE-Instanzen werden
auch hier beim Upgrade nicht automatisch umgestellt. Wie das Umstellen geht, beschreibt
ein eigener [graphing#rrdformat|Abschnitt] im Titel über
[graphing|Messwerte und Graphen].


==== Alarmspooler

Die CRE hat keinen Alarmspooler. Deswegen ist dieser nach dem Umstieg auf
die CEE ausgeschaltet. Wie dieser eingeschaltet werden kann, erfahren
Sie [distributed_monitoring#activatemknotifyd|hier].


== Deinstallieren von (CMK)

Das Deinstallieren von nicht mehr benötigten (CMK)-Versionen geschieht mit
dem Paketmanager des Betriebssystems. Geben Sie hier den Namen des installierten
Pakets an, nicht den Dateinamen der ursprünglichen RPM/DEB-Datei. Wichtig:
Löschen Sie nur solche (CMK)-Versionen, die von keiner Instanz mehr verwendet
werden!

Nicht mehr benötigte (CMK)-Instanzen können Sie einfach mit `omd rm`
entfernen (und dabei alle Daten löschen!):

[source,bash]
----
RP:omd rm mysite
----

==== SLES, RedHat, CentOS

So finden Sie bei RPM-basierten Systemen heraus, welche (CMK)-Pakete
installiert sind:

[source,bash]
----
RP:rpm -qa | grep check-mk
check-mk-enterprise-2016.05.19.0
check-mk-enterprise-2016.10.11.0
check-mk-raw-1.2.8b9.0
check-mk-raw-1.2.8p11.0
----

Das Löschen geschieht mit `rpm -e`:

[source,bash]
----
RP:rpm -e check-mk-raw-1.2.8b9.0
----

==== Debian, Ubuntu

So finden Sie heraus, welche Pakete installiert sind:

[source,bash]
----
RP:dpkg -l | grep check-mk
ii  check-mk-enterprise-2016.05.19  0.trusty  amd64  Check_MK is a full featured system monitoring
ii  check-mk-enterprise-2016.10.11  0.trusty  amd64  Check_MK is a full featured system monitoring
ii  check-mk-raw-1.2.8b9            0.trusty  amd64  Check_MK is a full featured system monitoring
ii  check-mk-raw-1.2.8p11           0.trusty  amd64  Check_MK is a full featured system monitoring
----

Die Deinstallation geschieht mit `dpkg --purge`:

[source,bash]
----
RP:dpkg --purge check-mk-raw-1.2.8b9
(Lese Datenbank ... 505719 Dateien und Verzeichnisse sind derzeit installiert.)
Entfernen von check-mk-raw-1.2.8b9 (0.trusty) ...
Löschen der Konfigurationsdateien von check-mk-raw-1.2.8b9 (0.trusty) ...
----


== Dateien und Verzeichnisse

Hier finden Sie für diesen Artikel relevante Dateien und Verzeichnisse. Pfade,
die nicht mit einem `/` beginnen, gelten wie immer ab dem
Homeverzeichnis der Instanz (`/omd/sites/mysite`):


[cols=, options="header"]
|===


|Pfad
|Bedeutung


|`version`
|Symbolischer Link auf die Installation der
von dieser Instanz verwendeten (CMK)-Version.


|`/omd/versions`
|Unterhalb dieses Verzeichnisses existiert für jede installierte
(CMK)-Version ein Unterverzeichnis. Die Dateien gehören `root` und
werden niemals geändert.


|`/omd/sites`
|Unterhalb liegt für jede Instanz dessen Homeverzeichnis mit den Konfigurationsdateien
und den variablen Daten. Die Datene gehören dem Instanzbenutzer und werden durch
Konfiguration und Betrieb geändert.


|`/usr/bin/omd`
|Verwaltungsbefehl für (CMK)-Instanzen. Dies ist ein symbolischer Link in das
`bin`-Verzeichnis der Defaultversion. Sobald auf eine bestimmte Instanz zugegriffen
wird, ersetzt sich der `omd`-Befehl selbst durch denjenigen der passenden
Version.

|===
