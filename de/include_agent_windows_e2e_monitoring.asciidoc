// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#e2e_monitoring]
== Einbinden von klassischen (Nagios-) Check-Plugins

[#mrpe]
=== Plugins über MRPE ausführen

Es gibt zwei gute Gründe, Nagios-Plugins auch unter {CMK} zu nutzen.
Wenn Sie Ihr Monitoring von einer Nagios-basierten Lösung auf {CMK} migriert haben, können Sie ältere Check-Plugins, zu denen es noch kein {CMK}-Pendant gibt, zunächst weiternutzen.
In vielen Fällen sind das selbst geschriebene Plugins in Perl oder Shell. 

Der zweite Grund für die Verwendung von Nagios-Plugins ist echtes End-to-End-Monitoring.
Nehmen wir an, Sie haben Ihren {CMK}-Server, einen Webserver und einen Datenbankserver über ein großes Rechenzentrum verteilt.
In so einem Fall sind die Antwortzeiten des Datenbankservers vom {CMK}-Server aus gemessen wenig aussagekräftig.
Weit wichtiger ist es, diese Werte für die Verbindung zwischen Web- und Datenbankserver zu kennen.

Der {CMK}-Agent bietet einen einfachen Mechanismus, diesen beiden Anforderungen gerecht zu werden:
_MK's Remote Plugin Executor_ oder kurz _MRPE_.
Der Name ist bewusst eine Analogie zum _NRPE_ von Nagios, der dort die gleiche Aufgabe übernimmt.

Der MRPE ist im Agenten fest eingebaut und wird über verschiedene Konfigurationsdateien gesteuert.


==== MRPE aktivieren und deaktivieren

Standardmäßig ist die Berücksichtigung von MRPE-Plugins aktiviert.
Falls Sie diese Funktion nicht nutzen wollen, können Sie sie in der Konfigurationsdatei deaktivieren, indem Sie die folgende Definition hinzufügen:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  enabled: no
----


==== Die Ausführungszeit begrenzen

Manchmal ist die Laufzeit eines Skripts oder Nagios-Plugins nicht vorhersehbar und im schlimmsten Fall wird ein Plugin nie beendet.
Um hier die Kontrolle zu behalten, können Sie die maximale Laufzeit der MRPE-Plugins begrenzen.
Der hier gezeigte Wert ist auch gleichzeitig der Standardwert in Sekunden.
Anpassungen sind also nur notwendig, wenn Sie ein kürzeres oder längeres Intervall festlegen möchten:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  # enabled: yes
  timeout: 60
----


==== MRPE-Plugins hinzufügen

Um dem Agenten mitzuteilen, wo sich die auszuführende Datei befindet und wie diese aufzurufen ist, fügen Sie einen Eintrag in der Konfiguration des MRPE hinzu:

.C:\ProgramData\checkmk\agent\check_mk.user.yml
[{file}]
----
mrpe:
  config:
    - check = MyServiceName 'C:\ProgramData\checkmk\agent\mrpe\my_check_plugin.bat' -w 10 -c 20 MyParameter
----

Es ist nicht notwendig, die Datei ebenfalls in dem Verzeichnis des Agenten abzulegen, auch wenn es sich anbietet, um alle an einem gemeinsamen Ort zu sammeln.
In dieser Beispielkonfiguration sehen Sie nun folgende Elemente der relevanten Zeile:

[cols="40,~"]
|===
|Element |Beschreibung 

|`MyServiceName` |Der Servicename, wie er in {CMK} angezeigt werden soll.
|`'C:\ProgramData\checkmk\agent\mrpe\my_check_plugin.bat'` |Auszuführendes Programm; Anführungszeichen für eventuelle Leerzeichen.
|`-w 10 -c 20` |Übergebene Optionen: Ein Schwellwert von 10 für {WARN} und 20 für {CRIT}.
|`MyParameter` |Beispielhafte Übergabe weiterer Parameter.
|===

Nachdem Sie das MRPE-Plugin eingerichtet haben, ist es direkt und ohne Neustart des Agenten aktiv und wird der Ausgabe hinzugefügt.
In der Service-Erkennung werden Sie nun Ihren neuen Service automatisch finden:

image::agent_windows_service_discovery.png[]


=== MRPE mit der Agentenbäckerei

{cee-only}
Alternativ zu der Konfiguration direkt auf einem Host in der benutzerspezifischen Konfigurationsdatei können Sie Ihre MRPE-Plugins auch direkt im [.guihint]#Setup#-Menü definieren.
Benutzen Sie dazu den Regelsatz [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent > Agent rules > Execute MRPE checks#.
Der notwendige Eintrag wird dann automatisch in der xref:agent_windows#files[Konfigurationsdatei der Agentenbäckerei] erzeugt.
