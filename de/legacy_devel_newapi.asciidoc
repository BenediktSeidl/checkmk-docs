= The New Check API
VS:1.2.0
:revdate: outdated
== The New Check API

As you have learned in previous articles, a check must be declared
to Checkmk. In the old times this had be done with a line
like this:

.uptime

----check_info["uptime"] = (check_uptime, "Uptime", 1, inventory_uptime)
----

As of version <b class=new>1.2.0* Checkmk offers an alternative
dictionary based declaration:

.uptime

----check_info["uptime"] = {
    "inventory_function"  : inventory_uptime,
    "check_function"      : check_uptime,
    "has_perfdata"        : True,
    "service_description" : "Uptime",
}
----

This new style has the advantage that it also covers further
keys that had been kept in special variables, which now become
obsolete. Here is a more complex example (from the df check):

.df

----check_info['df'] = {
    "check_function"          : check_df,
    "inventory_function"      : inventory_df,
    "service_description"     : "fs_%s",
    "has_perfdata"            : True,
    "group"                   : "filesystem",
    "default_levels_variable" : "filesystem_default_levels",
    "includes"                : [ "df.include" ],
}
----

== Available Parameters for `check_info[mycheck]`

The following table lists all possible keys in the new dictionary-type declaration.
The only mandatory parameters are `check_function` and `service_description`:


[cols=, ]
|===
<th>Parameter</th><th>Description</th><td class=tt>check_function</td><td>The check function (like first parameter in old-style declaration)</td><td class=tt>inventory_function</td><td>The inventory function (forth parameter in old-style declaration)</td><td class=tt>service_description</td><td>The service description for Nagios (second parameter)</td><td class=tt>has_perfdata</td><td>`True` if the check sends performance data, `False` or missing if otherwise (replaces the `0`
and `0` of the old-style third paramter).</tr>
<td class=tt>group</td><td>WATO configuration group for this check (formerly `checkgroup_of[...]`)</td><td class=tt>default_levels_variable</td><td>Name (not value!) of the variable that the user can define in `main.mk`
in order to define default levels. This works only for [devel_factorysettings|dictionary based parameters] (formerly `check_default_levels[...]`).</tr>
<td class=tt>includes</td><td>A list of files this check needs to [devel_include|include] (formerly `check_includes[...])</td><td class=tt>snmp_info</td><td>SNMP OID configuration for [devel_snmpbased|SNMP checks] (formerly `snmp_info[...]`)</td><td class=tt>snmp_scan_function</td><td>SNMP scan function for SNMP checks (formerly `snmp_scan_functions[...]`)</td><td class=tt>parse_function</td><td>A [devel_parse_function|function] who should parse all information before passing it to the check or inventory function</td>|===
