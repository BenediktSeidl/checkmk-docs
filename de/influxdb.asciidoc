// -*- coding: utf-8 -*-
include::global_attr.adoc[]
= Metriken senden an InfluxDB und Graphite
// MA: Sollte das Verb nicht am Ende stehen?
// MA: Hier würde ich auch überlegen, ob der Artikel nicht "Metriken an externe Datenbanken senden" heißen sollte und der title dann Influx, Graphite und Carbon erwähnt.
:revdate: draft
:title: Metriken senden an InfluxDB und Graphite
// MA: Im title sollte noch Carbon oder "Carbon Protokoll" irgendwie untergebracht werden, wenn wir einen Artikel für beide Anbindungen haben wollen.
:description: Die in {CMK} gespeicherten Metriken können an die Metrik-Datenbanken von influxDB und Graphite gesendet und dort weiterverarbeitet werden.

{related-start}
xref:graphing#[Messwerte und Graphing]
xref:grafana#[{CMK} in Grafana integrieren]
{related-end}

// TK: Graphite aus graphing#graphing_api hierhin verschoben. Der graphing-Artikel muss noch überarbeitet werden, aber erst, wenn der master aktualisiert wurde.


[#intro]
== Einleitung

xref:glossar#metric[Metriken] sind die mess- und berechenbare Werte zu Hosts und Services und werden von {CMK} intern in den sogenannten xref:graphing#rrds[Round-Robin-Datenbanken (RRDs)] gespeichert.
Diese Metriken werden durch das eingebaute Graphingsystem aufbereitet und in der {CMK}-Weboberfläche an vielen Stellen visualisiert, zum Beispiel als Perf-O-Meter in der Liste der Services oder als Graphen, die Sie sich aus der Service-Liste mit dem icon:icon_pnp[] Graphsymbol einblenden lassen können.
Die Oberfläche für die Visualisierung der Metriken basiert auf HTML5 und ist in den {EE} und der {RE} identisch.
Im Artikel zum xref:graphing#[Graphing] erfahren Sie darüber alle Details.

{cee-only}
Parallel zum in {CMK} eingebauten Graphing können Sie zusätzlich auch externe Metrik-Datenbanken anbinden und die Metriken an link:https://influxdata.com/[InfluxDB^] oder link:http://graphite.wikidot.com/[Graphite^] senden.
Da die Weiterleitung vom {CMK} Micro Core (CMC) durchgeführt wird, ist diese Funktion nur in den {CEE} verfügbar.

// TK: Die beiden folgenden Absätze könnte man auch in die Einleitung der beiden DBs (Kap. 2 und 3) verschieben.
// TK: Es gibt auch noch ein Logo mit influxDB-Text: https://influxdata.github.io/branding/img/downloads/influxdb-logo--preview.svg
// MA: Ich würde die Absätze auch in die Kapitel zu den Datenbanken verschieben. Der Artikel ist ja grad so aufgebaut, dass alle Anbindungen an externe DBs, um Metriken zu senden, hier beschrieben werden. Da macht sich dann das Logo im entsprechenden Abschnitt besser.
[{image-left}]
image::influxdb-logo.png[width=120]
InfluxDB ist ein Open Source Datenbankmanagementsystem (DBMS) für Zeitreihen (_time series_) -- und in diesem Segment zurzeit das populärste.
Beginnend mit der v2.0 bietet InfluxDB eine neue, einheitliche API -- die InfluxDB v2 API -- mit der unter 
// MA: Das finde ich missverständlich, da ich im ersten Augenblick dachte, dass das ja gar nicht stimmt. Checkmk hat das erst ab v2.1. Aber hier ist ja die Version von InfluxDB gemeint.
anderem Metrikdaten in die Datenbank geschrieben werden können.
{CMK} nutzt die InfluxDB v2 API und bietet Ihnen die Möglichkeit, die Metriken aus {CMK} nicht nur an die InfluxDB zu senden, sondern auch passend in die bestehende Struktur der InfluxDB abzulegen.
Durch die Nutzung der API wird einerseits die Konfiguration für das Versenden der Metrikdaten vereinfacht und andererseits ist {CMK} vorbereitet für zukünftige Erweiterungen.

[{image-left}]
image::graphite-logo.png[width=120]
Auch Graphite ist ein bekanntes Open Source DBMS für Zeitreihen, um Metriken zu speichern, abzurufen, weiterzugeben und zu visualisieren.
Graphite besteht aus dem Carbon Daemon, der auf die Daten wartet und diese in einer Datenbank speichert, aus der sie mit der Graphite Webanwendung aufbereitet und als Graphen angezeigt werden.
Mit {CMK} können Sie die Metriken im Plaintext-Protokoll an den Carbon Daemon von Graphite weiterleiten, der auf Port 2003 auf Daten dieses Protokolls wartet.
Im Plaintext-Protokoll ist ein Datensatz sehr einfach aufgebaut im Format `<Metrikpfad> <Wert> <Zeitstempel>`, wobei Metrikpfad ein durch Punkte getrennter eindeutiger Bezeichner ist.
// TK: Funktionieren Verbindungen noch über den alten Carbon-Weg zu InfluxDB <=1.8 - und falls ja: soll das noch erwähnt werden?
// MA: Der alte Weg _muss_ sogar gegangen werden, wenn man noch InfluxDB 1.8 oder früher einsetzt. Das sollte aber imho in dem Influx-Teil erwähnt werden. Die config unterscheidet sich ja nicht wesentlich von Graohite.
// TK: Der Begriff InfluxDB wurde nur teilweise aus der "alten" CMK GUI entfernt, mit der man in der 2.0 Graphite + InfluxDB einrichten konnte.
// Ma: Ich hab einen Commit im Review, der die restlichen (2 Hilfetexte und ein Button) entfernt. => {ADRESSE}/c/check_mk/+/33775

In diesem Artikel erfahren Sie, wie Sie in {CMK} die Weiterleitung der Metriken zur InfluxDB und zu Graphite einrichten.
// TK: Soll hier auch noch Grafana als weiteres extern anzuschliessendes System für Metriken erwähnt werden? Oder besser Gegenüberstellung im graphing-Artikel? Oder gar nicht erwähnen?
// MA: Gar nicht erwähnen, da wir bei Grafana keine Daten senden, sondern Grafana Daten vom Checkmk holt.


[#influxdb]
== Metriken an InfluxDB senden

[#influxdb_collect]
=== Informationen sammeln

Bevor Sie mit der Einrichtung in {CMK} loslegen, sollten Sie sich die folgenden Informationen besorgen über das InfluxDB-Zielsystem, das Sie mit {CMK} verbinden möchten:

[cols="30,~",options="header"]
|===
|Parameter |Bedeutung
|Host-Name |Name (oder IP-Adresse) des InfluxDB-Servers
// MA: Hier vielleicht ein Hinweis auf HTTPs? Also der (DNS-)Name ist vor allem dann wichtig, wenn man HTTPS verschlüsselt, da Zertifikate fast nie auf IP-Adressen ausgestellt werden.
|Port-Nummer |Nummer des TCP Ports, über den der InfluxDB-Server erreichbar ist. Der Standard-Port ist `8086`. Beim Start mit `influxd` kann mit der Option `--http-bind-address` auch ein anderer Port angegeben werden.
|Protokoll |`HTTP` oder `HTTPS`.
// MA: Vielleicht eher das offensichtliche noch einmal erwähnen? => "`HTTP` für unverschlüsselte Verbindungen oder `HTTPS`, um die Verbindung abzusichern."
|Organisation |Bei InfluxDB ist die Organisation (_organization_) der Arbeitsbereich für mehrere Benutzer. Die initiale Organisation wird bei der InfluxDB-Einrichtung abgefragt. Weitere Organisationen können manuell über die InfluxDB-GUI angelegt werden.
|Behälter (_bucket_)|InfluxDB speichert die Zeitreihendaten in Behältern, sogenannten _buckets._ Für jeden Behälter wird insbesondere ein Aufbewahrungszeitraum (_retention period_) festgelegt. InfluxDB löscht automatisch alle Datenpunkte, die älter sind als dieser Zeitraum. Der initiale Behälter wird zusammen mit der Organisation bei der InfluxDB-Einrichtung festgelegt. Weitere Behälter können manuell erstellt werden.
// TK: Gehören Buckets immer zu einer Organisation? Muss ich beim Einrichten was beachten? In der InfluxDB-GUI sehe ich keine Zuordnung von Bucket zu Organisation. Ich vermute: Wenn ich unter einer Org angemeldet bin und dort einen Bucket erstelle, gehört der Bucket zur Org.
// MA: Das ist richtig - ein Bucket gehört immer zu einer Org. Der Sinn dahinter ist die Datentrennung. Personen von Org A sollen zu keinem Zeitpunkt Zugriff zu den Buckets oder anderen Daten aus Org B bekommen. Die Org bestimmt also den Pool und der Bucket die Retention-Time der Datenpunkte.
|Token |Die Kommunikation zwischen {CMK} und InfluxDB erfolgt über die InfluxDB v2 API.
InfluxDB verwendet API-Tokens zur Autorisierung von Anfragen via API.
Ein API-Token gehört zu einem bestimmten Benutzer und identifiziert die InfluxDB-Berechtigungen innerhalb der Organisation des Benutzers.
Tokens werden über die InfluxDB-GUI angelegt, entweder mit vollem Lese- und Schreibzugriff auf alle Ressourcen in einer Organisation (_All Access Token_) oder mit ausgewählten Zugriffsrechten für bestimmte Behälter in einer Organisation (_Read/Write Token_). Ein Token kann in die Zwischenablage kopiert werden, was das spätere Einfügen während der {CMK}-Konfiguration erleichtert.
// MA: Der Token für uns sollte natürlich Lese-/Schreib-Rechte auf den oder die Buckets haben, die in Checkmk konfiguriert werden.
|===

Genaueres dazu finden Sie in der link:https://docs.influxdata.com/influxdb/latest/[InfluxDB-Dokumentation^].

Mit diesen Informationen zur Hand, erfolgt die Konfiguration in {CMK} mit nur zwei unkomplizierten Schritten.


[#influxdb_connection]
=== {CMK} mit InfluxDB verbinden

Wählen Sie im xref:user_interface#setup_menu[Setup-Menü] [.guihint]#Setup > Custom > InfluxDB connections#, um sich die Liste der existierenden InfluxDB-Verbindungen anzuzeigen.
Diesen Menüeintrag sehen Sie übrigens nur im xref:intro_gui#show_less_more[Show-more-Modus.]
Im Auslieferungszustand ist die Liste leer.
// MA: Fühlt sich noch etwas holprig an. Wie wäre es mit:
////
Schalten Sie auf den xref:intro_gui#show_less_more[Show-more-Modus]
und wählen Sie danach im xref:user_interface#setup_menu[Setup-Menü] [.guihint]#Setup > Custom > InfluxDB connections#,
um sich die Liste der existierenden InfluxDB-Verbindungen anzuzeigen.
Da Sie hier wahrscheinlich noch nichts konfiguriert haben, wird die Liste leer sein.
////
Erstellen Sie also eine neue Verbindung mit icon:icon_new[] [.guihint]#Add connection#:

.ID, Titel und Instanzauswahl reichen für die allgemeinen Eigenschaften 
image::influxdb_new_connection_general_properties.png[alt="Die allgemeinen Eigenschaften einer InfluxDB-Verbindung."]

In den [.guihint]#General Properties# bestimmen Sie, wie gewohnt, die interne ID und den Titel für die Verbindung.
Falls mit der aktuellen Instanz weitere Instanzen verbunden sind, wie das beim xref:distributed_monitoring#[verteilten Monitoring] der Fall ist, können Sie unter [guihint]#Site restriction# bestimmte Instanzen von der Verbindung ausschließen.
// MA: Besser: ... können Sie die Verbindung auf bestimmte Instanzen eingrenzen.
// MA: Der Default ist ja "All sites" und sobald man eine Instanz rüberschiebt, wird nur die verwendet. Umgekehrt: Möchte man nur eine ausschließen, muss man alle bis auf diese einschließen.

Interessanter wird es im nächsten Kasten mit den [.guihint]#InfluxDB Connection Properties:#

.Die InfluxDB-spezifischen Eigenschaften festlegen
image::influxdb_new_connection_influxdb_properties.png[alt="Die InfluxDB-spezifischen Eigenschaften der Verbindung."]

Geben Sie hier den ersten Satz der Parameterwerte ein, die Sie im xref:influxdb_collect[vorherigen Abschnitt] zusammengestellt haben.

Sichern Sie die Verbindung mit [.guihint]#Save#.
Eine Verbindung ist die Voraussetzung für das Versenden der Daten.
// MA: Den Satz hätte ich jetzt eher am Anfang erwartet.
Ohne Regel zur Auswahl der Metriken werden aber keine Daten versendet.
// TK: Es gibt leider keinen Verbindungstest, weder bei InfluxDB, noch bei Graphite.
// MA: Guter Punkt - ist leider zugunsten anderer Prioritäten erst einmal nicht eingeflossen.

// MA: Hier fehlt mir noch ein Hinweis, wie nun die Übersicht der Verbindungen aussieht. Dort gibt es zwei relevante Punkte, die erwähnt werden sollten. Erstens, das Icon, das anzeigt, ob die Verbindung aktiviert ist und zweitens, das der Button dahinter, der anzeigt, ob es mindestens eine Regel gibt, die diese Verbindung nutzt. Sollte es noch keine Regel geben, führt ein Klick darauf zu einer neuen Regel. Ansonsten in die Übersicht des Regelsets, in der hervorgehoben ist, welche Regel(n) auf die Verbindung greift oder greifen würden.


[#influxdb_metrics]
=== Metrikinformationen auswählen

Welche Daten an den InfluxDB-Server gesendet und wo sie abgelegt werden, bestimmen Sie in {CMK} mit einer Regel.
Den Regelsatz [guihint]#Send metrics to InfluxDB# finden Sie unter [guihint]#Setup > Services > Service monitoring rules# oder noch schneller mit der xref:user_interface#search_setup[Suche im Setup-Menü]:

.Die Auswahl der Metrikinformationen erfolgt per Regel
image::influxdb_send_metrics_rule.png[alt="Regel zur Auswahl der Metrikinformationen zum Versand über die InfluxDB-Verbindung."]

Im Kasten [guihint]#Send metrics to InfluxDB# wählen Sie zuerst die im xref:influxdb_connection[vorherigen Abschnitt] erstellte Verbindung aus.
[guihint]#Organisation# und [guihint]#Bucket# legen fest, wo die Daten auf dem InfluxDB-Server abgelegt werden.
// TK: Organisation sollte zu Organization umbenannt werden: American English + analog wie in der InfluxDB-GUI
// MA: Fix ist im review
Hier geben Sie den zweiten Satz der xref:influxdb_collect[gesammelten Informationen] über den InfluxDB-Server ein.
// MA: Hier wäre der Hinweis gut, was man genau noch einmal einstellt. Nämlich zu bestimmen, welche Gruppe an Benutzern die Daten bekommt und wie lange diese vorgehalten werden. Daraus folgt nämlich, dass man eine Metrik nicht an zwei Orgs schicken kann und dass eine Metrik nicht mehrere Vorhaltezeiten haben kann. Man muss sich hier explizit entscheiden.

Im folgenden aktivieren Sie den Metrikversand mit [guihint]#Metrics of service#.
// TK: Metrics of service: Dieser Parameter ist merkwürdig: 1) Wenn ich den nicht auswähle, kann ich die Regel nicht speichern mit Fehler: Missing required selection. 2) Welche anderen Metriken als für Services gibt es denn sonst noch? Metrics of host? 3) Wenn es so bleiben soll, sollte der Parameter zumindest "Metrics of services" (Plural) heißen.
// MA: Vielleicht wird so ein Schuh draus: Metrics of service ist ein Pflichtfeld und es soll transparent für den Nutzer sein, dass es diesen Wert gibt. Es gibt aber keine Pflichtfelder, die nur angezeigt werden und die man nicht abwählen kann. Daher ist es vorausgewählt und es findet eine Validierung statt, dass das auch so bleibt.
Wählen Sie dann die Metrikdaten aus, die von {CMK} an den InfluxDB-Server gesendet werden, wie zum Beispiel den Service-Zustand.
// MA: Dieses Feld ist wiederum optional und steht damit im Gegensatz zu "Metrics of service".
In InfluxDB werden zusätzliche Werte für jede Metrik als _fields_ gespeichert und als _tags_ Meta-Informationen wie xref:glossar#host_tag[Host-Merkmale] oder xref:glossar#label[Labels], die Sie in der untersten Liste auswählen können.
// MA: Das ist nicht ganz korrekt. Mit den "Additional values per metric" kann man Meta-Informationen mitgeben, die der Darstellung dienen. Ich kann also von der Metric ABC auch anzeigen, ob der dazugehörige Service in Downtime ist, oder wie die Schwellwerte aussehen. Bei den "Tags to use" werden Meta-Daten mitgegeben, die hauptsächlich zur Filterung dienen und auch darauf optimiert sind.
// MA: Auch bei den Tags to use gibt es Pflichteinträge. Aus ähnlichen Gründen wie oben. Die Pflichtfelder sind: "Host name" und "Service name"
// MA: Der Wert "Unit" funktioniert derzeit nur bei Metriken aus aktiven Checks, wenn diese das unterstützen. Der Grund liegt darin, dass nur diese (optional) die Einheit mitliefern. Auf andere hat der Core keinen Zugriff.

// TK: Service state: State of service kann ich unten unter Additional values for metric nochmal auswählen. Warum 2x und was ist der Unterschied?
// MA: Einmal sende ich den Status eines Service als Metrik (sinngemäß: "service_abc: state = 0") und einmal sende ich den Service-Status als zusätzlichen Wert zu einer Metrik (sinngemäß: "metric_xyz: value = 123, state = 0").

Zum Schluss xref:wato#activate_changes[aktivieren Sie die Änderungen] für die Erstellung der Verbindung und der Regel.
Bei Problemen mit dem Metrikversand finden Sie weiter unten xref:diagnosis[Informationen zur Fehlerdiagnose.]


[#influxdb_display]
=== Metriken in InfluxDB anzeigen

Wenn die Metriken von {CMK} beim InfluxDB-Server angekommen sind, können sie in der InfluxDB-GUI angezeigt werden.
Das folgende Bild zeigt als Beispiel den Graphen für die Metrik `total_used`, die den verwendeten Arbeitsspeicher anzeigt:

.In der InfluxDB-GUI gibt es unterhalb des Graphen Listen zur Auswahl und zum Filtern
image::influxdb_show_metric.png[alt="Anzeige der Metrik zum verwendeten Arbeitsspeicher in der InfluxDB-GUI."]
// TK: Die in CMK für den Versand ausgewählten tags werden in der InfluxDB-GUI als Filter parallel zu _field angeboten.
// MA: Hier wäre daher auch schön gewesen, wenn man eher den Weg gegangen wäre, dass man den Service auswählt, dann die Metrik (_measurement) und dann den Wert (_field). Alternativ könnte an das auch in einem zweiten Screenshot zeigen? Wie geschrieben: tags dienen zum filtern und _fields zum anzeigen.

*Hinweis:* Diese Metrik finden Sie in {CMK} beim Service [guihint]#Memory# unter dem Metriknamen [guihint]#Total used memory.#


[#graphite]
== Metriken an Graphite senden

[#graphite_connection]
=== {CMK} mit Graphite verbinden

Die Verbindung zum Graphite-Server richten Sie ein unter [.guihint]#Setup > General > Global Settings > Monitoring Core > Send metrics to Graphite#:

.Die Graphite-Verbindung wird in den [.guihint]#Global Settings# erstellt
image::influxdb_graphite_new_connection.png[alt="Die Eigenschaften einer Graphite-Verbindung."]

Neben den offensichtlichen Angaben zum Graphite-Server (Name und Port-Nummer des Carbon-Plaintext-Protokolls) können Sie mit [.guihint]#Optional variable prefix# einen Präfix konfigurieren, der jedem Host-Namen vorangestellt wird, um z.B. eindeutige Namen zu erzwingen.
{CMK} setzt den Metrikpfad für das Plaintext-Protokoll auf `<Host>.<Service>.<Metrik>`.
// TK: Inline help sagt: Graphite graphs will be named with the schema HOST / SERVICE / VARIABLE. Widerspruch?
// MA: Könnte sein.... lieber hier beschreiben, wie es tatsächlich funktioniert...
// TK: Die Option C-style name mangling wird derzeit nicht beschrieben: Die Inline help hilft (zumindest mir) nicht wirklich weiter.
// MA: Da kenne ich mich leider auch nicht aus... ich finde daher den nachfolgenden Vorschlag angemessen diffus...
// TK: Möglicher Text wäre folgender: Mit [.guihint]#C-style name mangling# haben Sie eine Option, um die Zerlegung der Daten zu beeinflussen (mehr Informationen dazu finden Sie in der Inline-Hilfe).

Wenn die Graphite-Verbindung über die globalen Einstellungen aktiviert ist, werden, anders als bei der InfluxDB-Verbindung, standardmäßig *alle* Daten gesendet.
// TK: Sehr unschön, dass die Logik bei Graphite komplett anders ist als bei InfluxDB.
// MA: Noch unschöner wäre es gewesen, wenn sich die Influx-Logik genauso sperrig und wenig intuitiv verhalten würde, wie Graphite. Leider bezweifle ich, dass die Entwickler die Zeit bekommen, die Logik von Graphite anzupassen...

Falls Sie dies nicht wünschen, sollten Sie *vor* der Aktivierung der Verbindung die Metriken per Regel auswählen und dann Verbindung und Regeln zusammen aktivieren.
// MA: Sollte man dann die Doku nicht auch umgedreht schreiben? Also erst die Regelkonfiguration beschreiben und dann die Verbindung?


[#graphite_metrics]
=== Metrikinformationen auswählen

Den Regelsatz [.guihint]#Send metrics to Graphite# finden Sie unter [guihint]#Setup > Services > Service monitoring rules.#
Mit ihm können Sie einerseits die Werte auswählen, die mit den Metriken mitgeliefert werden sollen, und zum anderen den Versand auf bestimmte Hosts und Services einschränken:
// TK: Die Logik der Regel ist nicht selbsterklärend: Da muss man erstmal drauf kommen, dass man das Senden abschalten kann, indem man alle Parameter deselektiert.
// TK: Es ist im Vergleich verwirrend, dass die Zusatzwerte bei InfluxDB und bei Graphite unterschiedlich aufgebaut und benamt sind.
// MA: Volle Zustimmung. Bei Influx wurden viele Design-Fehler korrigiert. Der Graphite-Connector ist da leider noch auf dem alten/originalen Stand...

.Auch bei Graphite erfolgt die Auswahl der Metrikinformationen per Regel
image::influxdb_graphite_rule.png[alt="Regel zur Auswahl der Metrikinformationen zum Versand über die Graphite-Verbindung."]

// TK: Den folgenden Trick mit den 2 Regeln aus SUP-5442 abgeschrieben.
Da ohne einschränkende Regel alle Daten gesendet werden, empfiehlt es sich zuerst eine Regel zu erstellen, die den Versand global abschaltet und anschließend eine spezifische Regel für die Hosts und Services zu erstellen, deren Metriken an den Graphite-Server übermittelt werden sollen. Ordnen Sie die spezifische vor der globalen Regel an:

.Durch die Reihenfolge der beiden Regeln werden nur Metriken des Hosts `myhost` versendet
image::influxdb_graphite_rule_list.png[alt="Liste der Regeln für den Versand über die Graphite-Verbindung."]

Die Aktivierung der Änderungen für die Verbindung und die Regeln schließt die Konfiguration für Graphite ab.
// MA: Ich würde das Unterkapitel wirklich mit dem vorherigen vertauschen... Graphite ist sehr unangenehm einzurichten und kann sehr viel Last erzeugen. Leider haben wir hier keine andere Wahl, als den Ist-Zustand zu beschreiben. :/

[#graphite_display]
=== Metriken in Graphite anzeigen

Auch in der Graphite-GUI können Sie sich die von {CMK} empfangenen Metriken ansehen.
Das folgende Bild zeigt den Graphen für die Metrik `total_used`, den wir bereits xref:influxdb_display[oben] als Beispiel in der InfluxDB-GUI gezeigt haben: 

.In der Graphite-GUI erfolgt die Auswahl in einem Navigationsbereich links vom Graphen
image::influxdb_graphite_show_metric.png[alt="Anzeige der Metrik zum verwendeten Arbeitsspeicher in der Graphite-GUI."]


[#diagnosis]
== Fehlerdiagnose

Sollten die Metriken nicht dort ankommen, wo Sie sie erwarten, finden Sie Diagnoseinformationen in Ihrer Instanz in der Datei `~/var/log/cmc.log` -- der xref:cmc_files#[Log-Datei des {CMK} Micro Core.]

Folgendes Beispiel zeigt die Meldungen, falls der in {CMK} konfigurierte Behälter (_bucket_) auf dem InfluxDB-Server nicht existiert:

.~/var/log/cmc.log
[{file}]
----
2022-01-10 11:41:35 [5] [influxdb https://myinfluxdb.example.com:8086] Successfully initiated connection
2022-01-10 11:41:36 [5] [influxdb https://myinfluxdb.example.com:8086] Successfully connected
2022-01-10 11:41:36 [3] [influxdb https://myinfluxdb.example.com:8086] POST [404] {"code":"not found","message":"bucket \"my_bucket\" not found"}
2022-01-10 11:41:36 [5] [influxdb https://myinfluxdb.example.com:8086] Closing connection
----

Folgendes Beispiel zeigt die Meldungen im Fall, dass eine Verbindung zum Graphite-Server nicht klappt:

.~/var/log/cmc.log
[{file}]
----
2021-12-15 17:33:33 [5] [carbon 10.0.0.5:2003] Successfully initiated connection
2021-12-15 17:33:33 [4] [carbon 10.0.0.5:2003] Connection failed: Connection refused
2021-12-15 17:33:33 [5] [carbon 10.0.0.5:2003] Closing connection
----

Der {CMK} Micro Core versucht in solchen Situationen von sich aus immer wieder, die Verbindung aufzubauen. 
Metriken, die während einer Zeit anfallen, zu der keine Verbindung zum Zielsystem besteht, werden nicht zwischengespeichert, sondern gehen verloren (bzw. sind dann nur in den RRDs von {CMK} verfügbar).
// TK: Bei einem Verbindungsfehler versucht es der CMC ständig neu und das Log wird voller und voller: Ist das wirklich Absicht?
// MA: Bei Graphite kann ich das nicht sagen (oder beeinflussen). Beim Influx könnte man über eine "Cooldown-Phase" nachdenken, wenn die Verbindung nicht zustande kam.

*Hinweis:* Falls Ihnen die Log-Meldungen nicht aussagekräftig genug sind, können Sie die Standardwerte zum Log Level ändern unter [.guihint]#Setup > General > Global Settings > Monitoring Core > Logging of the core#. Hier finden Sie Einträge für das Logging der InfluxDB ([.guihint]#InfluxDB processing#) und für Graphite ([.guihint]#Carbon connections#).
// MA: Generell fehlt mir noch der Hinweis, dass (aus Performance-Gründen) Metriken nicht zwischengespeichert werden. Also auch dann, wenn die Verbindung nur temporär weg ist, werden alle Metriken verworfen, die in der Zeit anfallen. Wir haben hier kein Caching eingebaut. Muss nicht rein, kann aber.