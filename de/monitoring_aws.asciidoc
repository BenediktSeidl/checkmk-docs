= Amazon Web Services (AWS) überwachen
:revdate: 2019-02-15
[.seealso][#monitoring_azure] [#check_plugins_catalog] [#dcd]:title: Amazon Web Services integrieren und überwachen
:description: Wie Sie ohne Agent Amazon S3, EC2, EBS, RDS und ELB oder ihre Kosten überwachen und nahtlos in checkmk integrieren, wird hier beschrieben.

== Einleitung

image::bilder/logo_aws.png[align=float,left]

Nach einer Umfrage unter unseren Anwendern ist <a
href="https://docs.aws.amazon.com/aws-technical-content/latest/aws-overview/introduction.html">Amazon
Web Services</a> aktuell der wichtigste Anbieter von Cloud-basierten
Services. Und dass Checkmk hier eine exzellente Überwachung bereitstellen
muss, versteht sich von selbst.

(CMK) enthält daher ein umfangreiches Monitoring von AWS, welches aus einem
Konnektor zu AWS und einer stattlichen Sammlung von Check-Plugins besteht, die
für Sie verschiedenste Metriken und Zustände abrufen und auswerten. Aufgrund
der Menge an Check-Plugins hier nur einzelne, um die AWS-Bereiche aufzuzeigen,
die Checkmk derzeit überwachen kann:

* [check_aws_ebs_summary|AWS EBS Summary]
* [check_aws_ec2|AWS EC2 Instance Status]
* [check_aws_elb|AWS ELB Statistics]
* [check_aws_elbv2_application.statistics|AWS ELB Application Statistics]
* [check_aws_elbv2_network.statistics|AWS ELB Network Statistics]
* [check_aws_rds_summary.db_status|AWS RDS Database Info]
* [check_aws_s3.summary|AWS S3 Summary]
* [check_aws_glacier.summary|AWS Glacier Summary] (ab VERSION[1.7.0])
* [check_aws_cloudwatch_alarms|AWS Cloudwatch Alarms]
* [check_aws_costs_and_usage|AWS Costs and Usage Summary]

Eine vollständige aktuelle Liste aller Plugins finden Sie im
[check_plugins_catalog|Katalog der Check-Plugins].


== Konkrete Umsetzung der AWS-Überwachung

=== Hosts und Services

In Checkmk ordnen sich alle zu überwachenden Objekte in eine hierachische
Struktur von Hosts und Services ein. Nun gibt es bei Cloud-basierten Diensten
das Konzept von Hosts nicht. Um die Einfachheit und Konsistenz von Checkmk zu
bewahren, bilden wir dennoch AWS-Objekte auf das Schema Host/Service ab.

Wie das geht, zeigt am besten ein Beispiel: In einer Region sind mehrere
EC2-Instanzen konfiguriert. Einer EC2 sind üblicherweise EBS zugeordnet. Diese
Konstellation sieht in Checkmk wie folgt aus:

* Es gibt einen Host, der dem AWS-Account entspricht. Dieser gibt eine Übersicht aller EC2-Instanzen und deren Status als Service.
* Die EC2-Instanzen selbst sind wiederum eigene Hosts.
* Auf diesen EC2-Hosts finden Sie Services mit den eigentlichen Metriken.
* Die EBS werden als eine Art Festplatten interpretiert und liefern dementsprechend Metriken zu I/O (z.B. gelesene oder geschriebene Anzahl an Bytes). Dazu existieren in Checkmk eigene Services mit dem Namen `AWS/EBS Disk IO` pro EBS, die der EC2-Instanz zugeordnet werden.


=== Zugriff auf AWS


AWS stellt eine HTTP-basierte API bereit, über
die auch Monitoring-Daten abrufbar sind.
(CMK) greift auf diese API über den „Spezialagenten“ `agent_aws`
zu, welcher an die Stelle des Checkmk-Agenten tritt, aber anders als dieser
lokal auf dem Checkmk-Server ausgeführt wird.


== AWS vorbereiten

=== Benutzer anlegen

Um die Überwachung per Checkmk zu ermöglichen, legen Sie am besten dafür
einen speziellen AWS-User unterhalb Ihres Root-Accounts an.
<a href="https://console.aws.amazon.com">Loggen Sie sich</a>
dafür bei AWS als Root-User ein und navigieren Sie zu [.guihints]#Security, Identity, & Compliance => IAM}}# 
(Identity and Access Management). Gehen Sie hier auf [.guihints]#Users# und legen Sie mit
[.guihints]#Add User# einen neuen Benutzer an. Als Benutzername wählen Sie z.B. `check-mk`.
Wichtig ist, dass Sie bei [.guihints]#Access Type# den [.guihints]#Programmatic Access# auswählen.

### User: check-mk
### Acess key id:  AKIAJMNG3SHALVWELRJQ
### Key: GIBIczXoYMRQImgSWL9kmFAK0fv7OZTS0BWKGd3d

image::bilder/aws_create_user.png[]


=== Berechtigungen

Für das Monitoring sollte der Benutzer auf keinen Fall irgendwelche Änderungsrechte bekommen.
Sie können dem Benutzer `check-mk` einfach die einizige Policy [.guihints]#ReadOnlyAccess}}# 
zuordnen (oder Sie machen sich die Mühe, den Account mit detaillierteren Policies genauer einzuschränken):

image::bilder/aws_create_user_policies.png[]


=== Schlüssel

Nach dem Abschluss des Anlegens des Benutzers wird für Sie automatisch ein
Zugangsschlüssel erzeugt.  Achtung: Das Secret des Schlüssels wird nur ein
einziges mal -- direkt nach dem Erzeugen -- angezeigt. Kopieren Sie daher
unbedingt den Schlüssel und legen ihn z.B. im Checkmk-Passwortspeicher
ab.  Alternativ geben Sie ihn im Klartext in der Regel an (siehe unten).
Für Checkmk benötigen Sie neben dem Secret noch die [.guihints]#Access Key ID}}.# Der
Name des Benutzers (bei uns `check-mk`) spielt hier keine Rolle.

image::bilder/aws_create_user_key.png[]

Falls Sie das Secret trotzdem einmal verlieren sollten, können Sie für
den Benutzer einen neuen Access-Key anlegen und bekommen ein neues Secret:

image::bilder/aws_create_access_key.png[]

=== Zugriff auf Billing-Informationen

Wenn Sie möchten, dass Checkmk auch Lesezugriff auf die Abrechnungsinformationen bekommt
(um den globalen Check [.guihints]#Costs and Usage# ausführen zu können) benötigen Sie für Ihren AWS-User
eine weitere Policy, die Sie allerdings erst selbst definieren müssen.

Wählen Sie dazu unter [.guihints]#Security, Identity, & Compliance => IAM => Policies# den Knopf [.guihints]#Create Policy}}.# 
Wählen Sie unter [.guihints]#Select a Service => Service => Choosea Service# den Service [.guihints]#Billing# aus.
Unter [.guihints]#Actions# kreuzen Sie die Checkbox [.guihints]#Read# an.
Sie müssen noch eine weitere Berechtigung setzen. Fügen Sie diese mit dem Knopf [.guihints]#Add additional permissions# hinzu.
Wählen Sie in der neuen Box unter [.guihints]#Select a Service => Service => Choosea Service# den Service [.guihints]#Cost Explorer Service# aus.
Unter [.guihints]#Actions# kreuzen Sie die Checkbox [.guihints]#Read# an.

image::bilder/aws_policies.png[]

Mit dem Knopf [.guihints]#Review# geht es zum Schritt zwei. Legen Sie dort als [.guihints]#Name# den Namen `BillingViewAccess`
aus und speichern Sie mit dem Knopf [.guihints]#Create policy}}.# 

Diese neue Policy müssen Sie jetzt noch dem Benutzer hinzufügen. Dazu gehen Sie wieder
zu [.guihints]#Security, Identity, & Compliance => IAM => Policies}},# suchen im Suchfeld [.guihints]#Filter Policies}}# 
nach `BillingViewAccess`, wählen diese durch Klick in den Kreis link aus und
gehen dann auf [.guihints]#Policy actions => Attach}}.# Hier finden Sie Ihren `check-mk`-User, den
Sie auswählen und mit [.guihints]#Attache policy# bestätigen. Das müsste dann mit folgender Meldung
erfolgreich ausgeführt werden:


== Monitoring in Checkmk konfigurieren

=== Host für AWS in Checkmk anlegen

Legen Sie für die Überwachung von AWS nun einen Host in Checkmk an.
Den Hostnamen können Sie nach Belieben vergeben. Wichtig: Da AWS als Dienst keine
IP-Adresse oder DNS-Namen hat (den Zugriff macht der Spezial-Agent von selbst),
müssen Sie die [.guihints]#IP Address Family# auf [.guihints]#No IP# einstellen.

image::bilder/azure_wato_no_ip.png[]


[#agent_rule]
=== Regel für AWS-Agenten anlegen

AWS kann nicht über den normalen Checkmk-Agenten abgefragt werden.
Richten Sie daher jetzt den AWS-Spezialagenten ein.
Dazu legen Sie unter
[.guihints]#Host & Service Parameters => DatasourcePrograms => AmazonWeb Services (AWS)}}# 
eine Regel an, deren [wato_rules#conditions|Bedingungen] ausschließlich auf den gerade angelegten AWS-Host
greifen.

Beim eigentlichen Inhalt der Regel finden Sie zunächst die Angaben
für den Login. Hier tragen Sie [.guihints]#Access Key ID# des angelegten AWS-User `check-mk` ein.
Auch wählen Sie hier, welche globalen Daten Sie überwachen möchten,
also solche die unabhängig von einer Region sind. Das sind aktuell
nur die Daten über die Kosten:

image::bilder/aws_rule_1.png[]

Die eigentlich interessanten Daten sind Regionen zugeordnet. Wählen
Sie also hier Ihre AWS-Region(en) aus:

image::bilder/aws_rule_2.png[]

Unter [.guihints]#Services per region to monitor# legen Sie nun fest,
welche Informationen Sie in diesen Regionen abrufen möchten. In
der Standardkonfiguration alle AWS Web-Services und die Überwachung
derer [monitoring_aws#limits|Limits] uneingeschränkt aktiviert. Der
Übersichtshalber wurden in dem Screenshot alle bis auf einer deaktiviert:

image::bilder/aws_rule_3.png[]

Diese können Sie dann pro Web-Service oder global mit
[.guihints]#Restrict monitoring services by one of these tags# wieder einschränken.
Wenn Sie pro Web-Service einschränken, wird damit immer die globale Option
überschrieben. Ihnen steht hier zusätzlich zu den AWS Tags auch noch die
Möglichkeit zur Verfügung, explizite Namen anzugeben:

image::bilder/aws_rule_4.png[]

Letztendlich müssen Sie noch den Special Agent dem vorher erstellten Host zuordnen, indem
Sie den Hostnamen in [.guihints]#Conditions => Explicit hosts# eintragen.

=== Services auf dem AWS-Host selbst

Gehen Sie nun zu der Serviceerkennung des neu angelegten AWS-Host, wo WATO
nun etliche Services finden sollte. Nachdem Sie die Services hinzugefügt
haben, sieht das nach einem [.guihints]#Activate Changes# etwa so aus:

image::bilder/aws_services_ec.png[]


=== Hosts für die EC2-Instanzen anlegen

Services, die EC2-Instanzen zugeordnet sind, werden nicht dem AWS-Host
zugeordnet sondern sogenannten [piggyback|Piggyback-Hosts]. Dies funktioniert
so, dass Daten, die vom AWS-Host abgerufen wurden, an diese Hosts verteilt
werden und diese ohne eigene Monitoringagenten arbeiten.  Dabei wird jeder
EC2-Instanz ein Piggy-Host zugeordnet, welche nach dem privaten DNS-Namen
der EC2-Instanz benannt sind.

Die Piggy-Hosts werden von Checkmk nicht automatisch angelegt.  Legen Sie
diese Hosts entweder von Hand an oder -- ab Version VERSION[1.6.0] --
optional mit dem neuen [dcd|Dynamic Configuration Daemon (DCD)].  Wichtig dabei
ist, dass die Namen der Hosts exakt mit den privaten DNS-Namen der EC2-Instanz
übereinstimmen -- und zwar auch die Groß-/Kleinschreibung!

Übrigens: mit dem Hilfsskript `find_piggy_orphans` aus dem
Treasures-Verzeichnis finden Sie alle Piggyhosts, für es Daten gibt, die
aber noch nicht als Host im Checkmk angelegt sind:

[source,bash]
----
OM:share/doc/check_mk/treasures/find_piggy_orphans
ip-172-31-44-50.eu-central-1.compute.internal
ip-172-31-44-51.eu-central-1.compute.internal
----

Konfigurieren Sie die EC2-Hosts ohne IP-Adresse (analog zum
Azure-Host) und wählen Sie als Agent [.guihints]#No Agent# aus.

image::bilder/wato_host_no_agent.png[]


=== Hosts für ELB (Classic Load Balancer)

Auch die Services für die ELB werden Piggy-Hosts zugeordnet. Die Namen dafür entsprechen
deren DNS-Namen.


[#limits]
=== Limits überwachen

Einige Web-Services von AWS bringen Limits mit und Checkmk kann diese auch
überwachen. Dazu gehören zu Beispiel diese:

* [check_aws_ebs_limits|AWS EBS Limits]
* [check_aws_ec2_limits|AWS EC2 Limits]
* [check_aws_elb_limits|AWS ELB Limits]
* [check_aws_elbv2_limits|AWS Application and Network Limits]
* [check_aws_glacier_limits|AWS Galcier Limits]
* [check_aws_rds_limits|AWS RDS Limits]
* [check_aws_s3_limits|AWS S3 Limits]
* [check_aws_cloudwatch_alarms_limits|AWS Cloudwatch Alarm Limits]

Sobald ein solches Check-Plugin Services erzeugt und diesen später prüft,
werden immer *alle* Elemente des Web-Services geholt. Nur so kann Checkmk
sinnvoll die aktuelle Auslastung zu diesen Limits berechnen und entsprechend
Schwellwerte prüfen. Das gilt auch dann, wenn Sie in der Konfiguration die
Daten auf bestimmte Namen oder Tags einschränken.

In der Grundkonfiguration sind die Limits automatisch aktiviert. Wenn Sie
also die zu holenden Daten in der [monitoring_aws#agent_rule|Regel zu dem
Spezialagenten] einschränken, weil Sie die zu übertragenden Daten reduzieren
wollen, schalten Sie ebenfalls auch die Limits ab.


=== Die weiteren Services

Die weiteren Services von AWS werden wie folgt zugeordnet:

[cols=, options="header"]
|===


|
|Service
|Zuordnung


<td width="8%">CE
<td width="25%">Costs & Usage
<td width="67%">Beim AWS-Host


|EBS
|Block Storages
|Werden der EC2-Instanz angefügt, sofern diese der Instanz gehören, ansonsten dem AWS-Host


|S3
|Simple Storages
|Beim AWS-Host


|RD
|Relational Databases
|Beim AWS-Host

|===
