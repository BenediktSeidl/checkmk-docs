include::global_attr.adoc[]
= (CMK) in Grafana integrieren
:revdate: 2019-12-02
:title: (CMK) in Grafana integrieren
:description: Grafana-Dashboards mit Daten aus dem (CMK)-Monitoring können mit dem Plugin CheckMK data source for Grafana leicht erstellt werden.

[TIP]
.Related Articles:
====
link:views.html[]
link:web_api_references.html[]
link:monitoring_kubernetes.html[]
link:monitoring_docker.html[]
====


== Einleitung

image::grafana_logo.png[left, width=20%]

{CMK} verfügt mit seinem integrierten link:graphing.html[Graphingsystem] über ein
umfangreiches System zum Aufzeichnen und Visualisieren von Messdaten.
Dennoch kann es sinnvoll sein, <a href="https://grafana.com/">Grafana</a>
als externes Graphingsystem anzubinden, z.B. weil Sie Grafana bereits
nutzen und die Daten von {CMK} mit Daten aus anderen Systemen in gemeinsamen
Dashboards zusammenführen möchten.

Beginnend mit Version VERSION[1.5.0p16] ist es in den {CEE} möglich,
{CMK} direkt als Datenquelle in Grafana anzusprechen und einzelne Metriken
oder sogar ganze Graphen, wie sie in {CMK} vordefiniert sind, in Grafana
anzeigen zu lassen. Zusätzlich können Sie dynamisch eigene
Graphen erstellen lassen, indem Sie über link:regexes.html[reguläre Ausdrücke]
eine Gruppe von Hosts und Services bestimmen, von denen bestimmte Metriken
in dem Graphen berücksichtigt werden sollen.

Dieser Artikel beschreibt, wie Sie Ihre Metriken aus {CMK} in Grafana 
abrufen und darstellen. Eine ausführliche Anleitung,
wie Sie Grafana nutzen und konfigurieren können, finden Sie in der
<a href="https://grafana.com/docs/">Dokumentation bei Grafana Labs</a>.

Da das Plugin für Grafana parallel zu {CMK} entwickelt
wird, wird es nicht mit {CMK} zusammen ausgeliefert. Sie können
den aktuellen Entwicklungsstand aber direkt über das
<a href="https://github.com/tribe29/grafana-checkmk-datasource">Archiv auf
GitHub</a> einsehen. Auch mit Hilfe der Mailingliste
<a href="community.php?">_Announcements_</a> werden Sie informiert,
wenn es eine neue Version des Plugins geben sollte.

Eine Integration direkt in Grafana befindet sich derzeit noch in der
Prüfung. Sobald das Plugin offiziell aufgenommen wurde, können Sie es auch
direkt über die Oberfläche von Grafana installieren.

== Das Plugin in Grafana einrichten

=== Plugin installieren

Um das Plugin benutzen zu können, haben Sie zwei Möglichkeiten, es Grafana bekannt zu machen:

* Sie laden die Zip-Datei aus dem <a href="https://github.com/tribe29/grafana-checkmk-datasource">GitHub-Repository</a> herunter und legen die Inhalte manuell in das Plugin-Verzeichnis von Grafana.
* Sie klonen das GitHub-Projekt direkt in das Plugin-Verzeichnis.


==== Installation der Zip-Datei

Dieser Variante ist die einfachste und dann zu bevorzugen, wenn Sie
`git` auf dem Grafana-Server nicht installiert haben und dies auch nicht
können/wollen. Laden Sie einfach die aktuellste Version als Zip-Datei herunter
und kopieren sie, z.B. `scp`, auf den Grafana-Server:

[.border]
image::grafana_download_plugin.png[]

Alternativ können Sie die Datei natürlich auch direkt über die Kommandozeile
laden. Beachten Sie, dass Sie dafür die korrekte Version wissen müssen. In
folgendem Befehl wird der Dateiname, so wie er lokal gespeichert werden
soll, mit der `wget`-Option `-O` festgelegt, da die Datei 
sonst einfach `1.1.0.zip` heißen würde:

{c-start}
{RP}wget -O grafana-checkmk-datasource-1.1.0.zip https://github.com/tribe29/grafana-checkmk-datasource/archive/1.1.0.zip
{c-end}

Entpacken Sie jetzt den Inhalt der Datei in das Plugin-Verzeichnis von Grafana.
Üblicherweise ist das der Pfad `/var/lib/grafana/plugins/`:

{c-start}
{RP}unzip grafana-checkmk-datasource-1.1.0.zip && mv grafana-checkmk-datasource-1.1.0 /var/lib/grafana/plugins/
{c-end}

Danach können Sie das Plugin in der Oberfläche von Grafana aktivieren
und einrichten.


==== Installation über das Klonen des Git-Archivs

Die oben beschriebene Variante hat die wenigsten Voraussetzungen und ist auch
für weniger versierte Nutzer leicht umsetzbar. Falls Sie aber das Plugin
direkt aus dem Git-Archiv beziehen, haben Sie dadurch verschiedene Vorteile:

* Die Aktualisierung auf eine neue Version geht schnell über diesen Befehl: `git pull`
* Sie haben die Möglichkeit, direkt den aktuellen Entwicklungsstand aus dem Archiv zu nutzen, wenn Sie ein neues Features testen wollen: `git checkout develop`

Um das Plugin mit Hilfe einer Kopie des Archivs zu nutzen, benötigen
Sie zwingend das Programm `git`. Das Vorgehen ist danach recht
einfach. Klonen Sie das Archiv in das Plugin-Verzeichnis von Grafana:

{c-start}
{RP}cd /var/lib/grafana/plugins/ && git clone https://github.com/tribe29/grafana-checkmk-datasource.git
Cloning into 'grafana-checkmk-datasource'...
remote: Enumerating objects: 541, done.
remote: Total 541 (delta 0), reused 0 (delta 0), pack-reused 541
Receiving objects: 100% (541/541), 291.55 KiB | 0 bytes/s, done.
Resolving deltas: 100% (374/374), done.
Checking connectivity... done.
{c-end}

Anschließend ist das Plugin in der Oberfläche von Grafana verfügbar und
kann aktiviert und eingerichtet werden.

Da der Master-Branch immer die aktuellste Version abbildet, brauchen Sie
nach einer neuen Veröffentlichung lediglich folgenden Befehl auszuführen,
um das Plugin auf dem Grafana-Server zu aktualisieren:

{c-start}
{RP}cd /var/lib/grafana/plugins/grafana-checkmk-datasource && git pull
{c-end}


=== Plugin aktivieren und einrichten

Nachdem die notwendigen Dateien installiert wurden, können Sie das Plugin
in Grafana aktivieren. Wechseln Sie dazu in die Konfiguration und wählen den
Reiter [.guihint]#Data Sources# aus. Hier können Sie über den Knopf
[.guihint]#Add data source# eine neue Datenquelle hinzufügen:

image::grafana_plugins_overview.png[]

Den Eintrag zu {CMK} finden Sie unten in der Kategorie [.guihint]#Others#:

image::grafana_plugin_cmk.png[]

Die Konfigurationsmaske zu der Datenquelle ist recht einfach gehalten. Geben
Sie hier die URL zu Ihrer Instanz und einen Automationsbenutzer
an. *Wichtig*: Wenn Sie eine link:distributed_monitoring.html[verteilte Umgebung]
haben, dann geben Sie hier die URL zu Ihrem Master an:

image::grafana_plugin_config.png[]

Falls Sie mehrere {CMK}-Instanzen anbinden möchten, können Sie die einzelnen
Verbindungen optional mit einem eindeutigen Namen versehen. Ansonsten lassen
Sie den Standard `Checkmk` einfach stehen.

Nachdem Sie die Verbindung Mit dem Knopf [.guihint]#Save & Test# gespeichert haben,
steht sie Ihnen als Datenquelle in Grafana zur Verfügung und Sie können
Ihre ersten Graphen konfigurieren.


== Den ersten Graphen erstellen

=== Ein leeres Dashboard erzeugen

Dashboards werden in Grafana über das Pluszeichen auf der rechten Seite
erzeugt. Klicken Sie auf [.guihint]#Dashboard#, um ein neues Dashboard zu erstellen:

image::grafana_new_dashboard.png[center, width=370]


=== Einen vordefinierten Graphen aus {CMK} anzeigen#predefined

{CMK} fasst bereits automatisch Metriken sinnvoll in Graphen
zusammen, um inhaltlich ähnliche Metriken schnell miteinander vergleichen zu
können. Sie können die Metriken aus einem solchen vorgefertigten Graphen
direkt in Grafana anzeigen lassen. In einem bestehenden oder dem eben
erzeugten Dashboard erstellen Sie ein neues [.guihint]#Panel#. Wählen Sie hier
zuerst [.guihint]#Add Query# aus:

image::grafana_dashboard_addquery.png[]

Der [.guihint]#Query# sollte _CheckMK_ sein. Danach können Sie die Abfrage
noch auf eine {CMK}-Instanz ([.guihint]#Site#) begrenzen. Wählen Sie nun den
gewünschten [.guihint]#Host}}, {{Service}} und {{Graph# aus; in unserem Beispiel
ist das _CPU-Utilization_:


image::grafana_dashboard_predefined_config.png[]

Grafana zeigt das Ergebnis direkt an. Sobald Sie oben rechts auf
das Speichern-Symbol geklickt haben, werden Sie aufgefordert, einen Titel
für das [.guihint]#Panel# anzugeben. Danach gelangen Sie zurück zum Dashboard:

image::grafana_dashboard_predefined_view.png[]


=== Eine einzelne Metrik eines Hosts anzeigen

Natürlich ist es auch möglich, einzelne Metriken eines Hosts
anzeigen zu lassen. Das Vorgehen ist dabei sehr ähnlich wie bei den
link:grafana.html#predefined[vordefinierten Graphen]; Sie ändern lediglich den [.guihint]#Mode#
auf _single metric_, und statt eines vordefinierten Graphen wählen Sie
die [.guihint]#Metric# zu einem Service aus:

image::grafana_dashboard_single_config.png[]

Auch hier speichern Sie das [.guihint]#Panel# ab und können das Ergebnis im Dashboard sehen:

image::grafana_dashboard_single_view.png[]


== Komplexe Graphen erstellen

Gerade in einem dynamischen Cluster möchte man oft den gesamten Verlauf
einer Metrik über alle beteiligten Hosts verfolgen können, ohne einen
Graphen jedes Mal anpassen zu müssen, wenn ein neuer Knoten hinzukommt
oder wegfällt. Ab Version VERSION[1.6.0p2] haben Sie daher zusätzlich die
Möglichkeit, Graphen dynamisch mit Hilfe von regulären Ausdrücken zu
erstellen. Voraussetzung ist, dass das Plugin in Version 1.1.0 vorliegt.

Stellen Sie den [.guihint]#Mode}} in einem neuen {{Panel# dafür auf _combined
Graph_ um. Die allgemeinen Einstellungsmöglichkeiten bleiben
dadurch unverändert, aber Sie können nun von einem oder mehreren
Hosts und Services Metriken zusammenfassen. Dabei haben Sie auf alle
link:regexes.html#characters[regulären Ausdrücke] Zugriff, die Sie auch sonst von
{CMK} kennen. Beachten Sie, dass auch für die Hosts an dieser
Stelle reguläre Ausdrücke benutzt werden können. Der Ausdruck `.*` im
Feld [.guihint]#Service Regex# dient nur der Verdeutlichung; es würde auch ohne funktionieren.

image::grafana_dashboard_combined_config.png[]

Zusätzlich zu den erweiterten Filtermöglichkeiten bestimmen Sie mit
[.guihint]#Aggregation}} die Darstellung der Metriken im Graphen und mit {{Graph#,
welcher Graph als Referenz herangezogen werden soll. Beachten Sie, dass
nur dann Metriken zu einem Host/Service angezeigt werden, wenn dieser auch
über den ausgewählten Graphen verfügt. Der Graph sieht dann zum
Beispiel so aus:

image::grafana_dashboard_combined_view.png[]


== Weitere Features

Ab Version VERSION[1.6.0p2] und der Version 1.1.0 des Plugins ist zusätzlich noch möglich,

* die Metriknamen mittels Variablen zu steuern und
* Statusänderungen von bestimmten Services als Kommentare anzeigen zu lassen.


==== Metriknamen

Normalerweise übernimmt das Plugin den Metrikennamen so, wie er in {CMK}
bereits definiert wurde. Sie müssen also keinen lesbaren Namen als Alias
definieren, um die recht kryptischen Metriknamen zu sehen, wie sie der
Code intern verwendet.

Gerade, wenn Sie aber Metriken von mehreren Hosts in einem Graphen verwenden
wollen, ist es schnell unübersichtlich, von wo jeweils eine Metrik kommt. Um
dieses Problem zu lösen, können Sie in einem Panel den Anzeigenamen
anpassen, um immer eine eindeutige Information zu bekommen. Sie können dabei
aus verschiedenen Variablen auszuwählen:

[options="header"]
|===

|Variable
|Beschreibung

|$title
|Der Titel der Metrik, wie er auch in {CMK} dargestellt werden würde.

|$site
|Die {CMK}-Instanz, auf der der Host und seine Metrik überwacht wird.

|$host
|Der Host, dem die Metrik zugeordnet ist.

|$service
|Der Service, dem die Metrik in {CMK} zugeordnet ist.

|===


Über diese Variablen können Sie auch dann, wenn Sie mehrere Metriken in
einem Graphen anzeigen lassen, sehr einfach die Bezeichnungen anpassen. 
Im nachfolgenden Beispiel haben wir im Feld [.guihint]#Label Format# den
folgenden Ausdruck verwendet:

.Label Format
....
$host/$service: $title
....

Das Ergebnis sieht dann so aus:

image::grafana_series_renaming.png[]


==== Automatische Kommentare

Grafana unterstützt das Setzen von Kommentaren in den Graphen. Kommentare markieren dann ein Ereignis direkt in dem Graphen und ermöglichen es so, zu bestimmten Zeitpunkten einen Kommentar zu hinterlassen. Die Statusänderungen eines oder mehrerer Services können Sie sich aber auch automatisch anzeigen lassen, indem Sie eine [.guihint]#Annotation-Query# hinzufügen.

Sie gelangen zu der Konfiguration, indem Sie auf das Zahnradsymbol des Dashboards klicken und dann die Konfiguration für die [.guihint]#Annotations# öffnen:

image::grafana_anno_config1.png[]

Erstellen Sie dort mit dem Knopf [.guihint]#Add Annotation Query# eine neue
Abfrage. Die [.guihint]#Data source# setzen Sie dabei auf {CMK} und vergeben unter
[.guihint]#Name# den Anzeigenamen, wie die Query später in dem Dashboard zu sehen
sein soll. Zusätzlich bestimmen Sie, ob die [.guihint]#Annotation-Query# direkt
aktiviert (_Enabled_) oder unsichtbar (_Hidden_) ist. Auch die
Farbe der Kommentare können Sie hier bei Bedarf festlegen. In diesem Beispiel
haben wir Gelb ausgesucht, da die Abfrage ausschließlich {WARN} anzeigen soll:

image::grafana_anno_config2.png[]

Die eigentliche Abfrage funktioniert dann ähnlich wie beim Erstellen
eines Graphen. Einzig die abzufragende Instanz müssen Sie explizit
bestimmen, da hier keine Abfrage über alle {CMK}-Instanzen möglich
ist. Zuletzt bestimmen Sie dann noch den anzuzeigenden Status von
einem oder mehreren Services:

image::grafana_anno_config3.png[]

*Wichtig*: Schränken Sie die anzuzeigenden Daten so weit wie möglich ein, denn Kommentare werden auf allen kompatiblen Graphen auf dem Dashboard angezeigt. Erstellen Sie im Zweifel lieber mehrere kleine [.guihint]#Annotation-Queries# als eine große Abfrage.

Nachdem Sie die Konfiguration über den Knopf [.guihint]#Add# hinzugefügt und die neuen
Einstellungen des Dashboards gespeichert haben, gehen Sie zurück in Ihr
Dashboard. Falls Sie die Abfrage direkt bei der Einrichtung
aktiviert haben, sehen Sie unter Umständen bereits automatisch erzeugte
Kommentare in Ihren Graphen:

image::grafana_anno_view.png[]


== Dateien und Verzeichnisse

[cols=45,options="header"]
|===

|Pfad
|Bedeutung


|`/var/lib/grafana/plugins/`
|Hier sucht Grafana nach (neuen) Plugins. Jedes Plugin bekommt dabei ein eigenes Unterverzeichnis. Das Plugin von {CMK} legen Sie daher hier ab.

|===

