include::global_attr.adoc[]
= Wartungszeiten
:revdate: 2016-02-19
:title: Wartungsintervalle berücksichtigen und konfigurieren
:description: Geplante Ausfälle müssen in einem Monitoring berücksichtigt werden. Wie Wartungszeiten in checkmk abgebildet werden können, erfahren Sie hier.

[TIP]
.Related Articles:
====
link:commands.html[]

link:notifications.html[]

link:timeperiods.html[]

====

== Funktionsweise

Im IT-Betrieb unterscheidet man zwei Arten von Ausfällen: geplante und
ungeplante. Das Monitoringsystem kann -- wenn es einen Ausfall feststellt --
natürlich erst mal nicht wissen, ob dieser geplant war oder nicht. Über das
Konzept von _Wartungszeiten_ (Englisch _Scheduled Downtimes_) können
Sie geplante Ausfallzeiten eines Hosts oder Services dem System bekannt machen,
indem Sie für die entsprechenden Objekte eine Wartungszeit definieren. Befindet
sich ein Host oder Service in so einer Wartungszeit, hat das folgende
Auswirkungen:

* In den Ansichten erscheint ein icon:icon_downtime[] Symbol bei den betroffenen Hosts/Services.
* Die Alarmierung über Probleme ist während der Wartung abgeschaltet.
* Die betroffenen Hosts/Services tauchen in der [.guihint]#Tactical Overview# nicht mehr als Probleme auf.
* In der link:availability.html[Verfügbarkeitsanalyse] werden geplante Wartungszeiten gesondert berücksichtigt.
* Zu Beginn und Ende einer Wartungszeit wird eine spezielle Alarmierung ausgelöst, die darüber informiert.

== Wartungszeiten eintragen
Das Setzen von Wartungszeiten geschieht über link:commands.html[Kommandos]. Alle Aktionen, die Wartungszeiten
betreffen, sind hier in einem eigenen Kasten zusammengefasst:

image::downtimeseinrichten.png[]

Das Feld [.guihint]#Downtime Comment# muss immer ausgefüllt werden. Sie können an dieser
Stelle auch eine URL in der Form _http://www.example.com_ eintragen, die
dann als anklickbarer Link zur Verfügung steht. Für die Definition von Start und
Ende gibt es zahlreiche unterschiedliche Möglichkeiten -- vom einfachen
[.guihint]#2 hours#, welches die Wartung *ab sofort* definiert, bis hin zu der
Angabe eines expliziten Zeitraums, mit dem auch eine Wartung in der Zukunft
definiert werden kann.

=== Flexible with duration

Diese Option ist z.B. nützlich, wenn Sie wissen, dass ein Host für ein
paar Minuten {DOWN} gehen wird, aber die exakte Uhrzeit
nicht vorhersagen können.  Mit dieser Option beginnt die Wartungszeit
nicht automatisch zum angegebenen Zeitpunkt, sondern erst dann, wenn
der Host tatsächlich in einen Problemzustand eintritt.

Beispiel: Sie definieren eine Wartungszeit von 14:00 bis 16:00 Uhr und
aktivieren die Option [.guihint]#flexible# mit einer Dauer von 30 Minuten. Um
14:00 Uhr wird die Wartungszeit noch nicht automatisch aktiv, sondern ist
nur in Wartestellung. Sobald der Host auf {DOWN} oder {UNREACH}
geht, beginnt die Wartungszeit und der blaue Mond erscheint.
Sie dauert jetzt genau die bei der Option angegebene Zeit -- egal wie sich
der tatsächliche Zustand vom Host entwickelt und ggf. auch über
die eingestellte Endzeit der Wartungszeit hinaus.

Die Start-/Endzeit ist also bei den flexiblen Wartungszeiten nur das
Zeitfenster, innerhalb dessen die Wartungszeit beginnt. Wenn innerhalb dieses
Zeitfensters kein Problemzustand eintritt, so wird die Wartungszeit einfach
ausgelassen. Alles für Hosts gesagte gilt natürlich für Services analog.

=== Also set downtime on child hosts

Diese Option ist für Router und Switche nützlich, aber z.B. auch für
Virtualisierungshosts. {CMK} wird so auch automatisch auf alle
Hosts eine Wartungszeit setzen, welche über den betroffenen Host direkt
(oder bei angehaktem [.guihint]#Do this recursively# auch indirekt) erreichbar sind.

=== Schedule downtimes on affected hosts...

Wenn Sie beispielsweise in der Ansicht [.guihint]#Services of Host# auf
icon:commands[] geklickt haben, würden sich die geplanten Ausfallzeiten auch
tatsächlich direkt auf alle bzw. alle ausgewählten Services beziehen. Sollte
dies mal nicht gewünscht sein, müssen Sie nicht zuerst in die Ansicht
[.guihint]#Status of Host# navigieren sondern können mithilfe dieser Option, die
Ausfallzeit direkt auf den Host setzen.

[.border]
image::downtimeseinrichten_affectedhosts.png[align=center, width=78%]

=== Repeat this downtime on a regular base...

Hier können Sie Wartungszeiten eintragen, die sich regelmäßig wiederholen. Diese
werden weiter unten in einem eigenen Abschnitt ausführlich besprochen.


== Wartungszeiten anzeigen und löschen

Für die Wartungszeiten gibt es in {CMK} eine eigene Ansicht, die Sie erreichen
über [.guihint]#Views|Other|Downtimes#:

[.border]
image::downtimesliste.png[]

Wie in jeder Ansicht können Sie über die icon:filter[] Filter die Auswahl
einschränken. Über die icon:commands[] Kommandos in dieser Ansicht können Sie
eine oder mehrere Downtimes entfernen und sogar auch nachträglich ändern
(nur {CEE}), z.B. wenn diese verlängert werden müssen, wenn die eigentliche
Wartung länger dauert als zunächst vorgesehen.

image::editdowntimes.png[]

=== Historie

Die Ansicht [.guihint]#Views|Other|History of scheduled Downtimes# zeigt nicht die aktuellen
Wartungszeiten, sondern deren Geschichte -- also alle Ereignisse, bei denen eine Wartungszeit
begonnen hat oder endete (entweder durch ein natürliches Ende oder durch das Löschen
per Kommando).

[.border]
image::downtimesscheduled.png[]


[#scheduled]
== Regelmäßige Wartungszeiten

.Only for the Enterprise Editions (CFE, CEE or CME)
image::CME.png[float=left]

Manche Wartungen werden regelmäßig ausgeführt -- wie z.B. der
automatische Neustart eines Servers einmal pro Woche. Jedes mal
von Hand eine Wartung einzutragen wäre recht umständlich. Wenn es
nur um die link:notifications.html[Alarmierung] geht, können Sie hierzu mit
link:timeperiods.html[Zeitperioden] und dem Regelsatz
[.guihint]#Notification period for Hosts/Services# arbeiten. Dies hat allerdings verschiedene Einschränkungen.
Eine Wichtige ist, dass man für das Anlegen von Zeitperioden globale
Konfigurationsberechtigungen benötigt.

Die {CEE} bieten daher das Konzept von sich automatisch periodisch wiederholenden
Wartungszeiten. Diese können auf zwei verschiedene Arten eingetragen werden.

=== Anlegen mittels Kommandos

Die erste Methode ist der Weg, den wir bereits für einmalige
Wartungszeiten kennengelernt haben -- über ein Kommando -- aber mit der zusätzlichen
Checkbox [.guihint]#Repeat this downtime on a regular base...#

image::periodicdowntimes.png[]

Dabei wählen Sie die Periode aus, mit der sich die Wartung wiederholen soll. Das
*erste* Auftreten tragen Sie wie gewohnt ein. Hier bietet sich der Knopf
[.guihint]#Custom time range# an. Von dem hier eingetragenen Startzeitpunkt aus wird die
Periode berechnet. Es gibt folgende Möglichkeiten:


|===
|===



=== Anlegen mittels Regeln

Eine alternative, sehr elegante Methode für das Einrichten von periodischen
Wartungszeiten ist das Anlegen über link:wato_rules.html[Regeln]. Mithilfe von
link:wato_rules.html#hosttags[Host-Merkmalen] können Sie damit z.B. Dinge bestimmen wie:
_Jeder produktive Windows-Server bekommt jeden Sonntag von 22:00 bis 22:10 Uhr
eine Wartungszeit_.

Zwar könnten Sie fast das Gleiche erreichen, indem Sie mit der Host-Suche
alle betroffenen Server finden und die Wartungszeit dann über ein Kommando
eintragen. Aber dies funktioniert natürlich nur für *bestehende*
Server. Wird in Zukunft ein neuer Host ins Monitoring aufgenommen, so fehlt
ihm dieser Eintrag. Wenn Sie stattdessen mit Regeln arbeiten, haben Sie
dieses Problem nicht mehr. Ein weiterer Vorteil von Regeln ist, dass Sie die
Wartungs-Policy später ändern können -- einfach durch Anpassung
der Regeln.

Die Regel für die regelmäßigen Wartungszeiten finden Sie unter
[.guihint]#Host & Service Parameters|Monitoring Configuration|Recurring downtimes for Hosts/Services#.

image::downtimerules.png[]

== Wartungszeiten und Verfügbarkeit

Wie eingangs erwähnt, haben Wartungszeiten eine Auswirkung auf die Berechnung
der link:availability.html[Verfügbarkeitsanalyse]. Per Default werden alle Wartungszeiten
in einen eigenen „Topf“ gerechnet und in der Spalte [.guihint]#Downtime# angezeigt.

[.border]
image::downtimeavail1.png[]

Wie genau Wartungszeiten verrechnet werden sollen, können Sie über eine
icon:icon_painteroptions[] Option einstellen:

image::downtimeavail2.png[align=center, width=60%]


|===




|===


Zusätzlich gibt es noch die Option [.guihint]#Treat phases of UP/OK as non-downtime#.
Wenn diese angehakt ist, dann werden Zeiten, in denen ein Objekt in einer
Wartung, aber trotzdem gleichzeitig {OK} bzw. {UP} ist, *nicht* als
Wartungszeit gewertet. Somit geht in die Berechnung nur derjenige Teil der
Wartungszeiten ein, der *tatsächlich* mit einem Ausfall verbunden war.
