// -*- coding: utf-8 -*-
include::global_attr.adoc[]


[#installation]
== Installation

////
=== Verschiedene Möglichkeiten

{CMK} bietet Ihnen für die Installation des Windows-Agenten verschiedene Wege -- von der manuellen Installation der Einzelteile bis hin zum vollautomatischen Deployment.
Manche davon stehen nur in den {CEE} zur Verfügung:

[cols="20,76,~,~"]
|===
|Methode |Beschreibung |CRE |CEE 

|Mitgeliefertes MSI-Paket |Einfache Installation eines Standard-Agenten mit manueller Konfiguration. |X |X
|xref:wato_monitoringagents#bakery[Agentenbäckerei] |Konfiguration über die GUI, individuelle Konfiguration pro Host möglich. | |X
|xref:agent_deployment#[Automatisches Updaten] |Paket aus Agentenbäckerei wird per Hand Skript installiert, danach automatisch aktualisiert. | |X
|===


[#install_paket]
=== Installation per MSI-Paket

Unabhängig davon, ob Sie die MSI-Pakete über die
xref:wato_monitoringagents#bakery[Agentenbäckerei] erstellen lassen,
oder auf jedem Host manuell konfigurieren: Sie benötigen zuerst die
Installationsdatei. In der {CRE} gelangen Sie über [.guihint]#Setup > Agents > Windows#
zu den [.guihint]#Packaged Agents#. Dort finden die benötigte Datei [.guihint]#check_mk_agent.msi#.

image::agent_windows_packaged_agents.png[width=60%]

In den {EE} finden Sie die gebackenen Pakete über [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX#. Klicken Sie zum Download einfach auf das Icon in der Spalte [.guihint]#Windows#.

image::agent_windows_packaged_agents_bakery.png[]

Laden Sie diese MSI-Datei auf den Host und starten Sie die Installation.
Prinzipiell müssen Sie nur dem Menü folgen und die Lizenzbedingungen der
[.guihint]#GNU GENERAL PUBLIC LICENSE# lesen und diesen zustimmen.

//SK: Hier müssen noch die drei Auswahlmöglichkeiten beschrieben werden.
//
//In dem Menüpunkt [.guihint]#Destination Folder# können Sie die folgenden Option wählen:
//
//* Clean Installation.
//* Remove Legacy Windows Agent (pre 1.6) if present.
//* Migrate from Legacy Windows Agent (pre 1.6) configuration if present.
//
//image::agent_windows_install_agent_product_features.png[width=77%]

Nach der Installation wird der Agent sofort als Windows-Dienst gestartet und ist für die Überwachung des Systems bereit.


==== Unbeaufsichtigte Installation

Windows bietet über `msiexec` die Möglichkeit, Installationen von MSI-Paketen automatisiert durchzuführen.
Eine automatisierte Installation kann dann zum Beispiel folgendermaßen aussehen:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /i check_mk_agent.msi /qn
----

In diesem Fall wird der Agent unter dem Standardpfad installiert und ebenfalls sofort als Windows-Dienst gestartet.
Diese Methode eignet sich also hervorragend zum automatischen Ausrollen des Agenten auf viele Hosts.

Sie können auf diesem Wege auch die drei Optionen, die Sie im Screenshot im Abschnitt xref:agent_windows.html#_migration_zum_neuen_standardagenten[Migration zum neuen Standardagenten] sehen, verändern.
Um eine Option zu aktivieren hängen sie deren Bezeichner gefolgt von einem Gleichzeichen an:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /i check_mk_agent.msi /qn WIXUI_CLEANINSTALL=
----

Um eine der Optionen explizit zu deaktivieren, müssen Sie hinter dem Gleichzeichen noch zwei Anführungszeichen anfügen:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /i check_mk_agent.msi /qn WIXUI_MIGRATELEGACY=""
----

[cols="80,~"]
|===
|Option im graphischen Installer | Bezeichner

| Clean installation| WIXUI_CLEANINSTALL
| Remove Legacy Windows Agent (pre 1.6) if present| WIXUI_REMOVELEGACY
| Migrate from Legacy Windows Agent (pre 1.6) configuration if present| WIXUI_MIGRATELEGACY
|===


[#firewall]
==== Windows Firewall

Der Agent legt bei seiner Installation bereits eine Regel in der Windows-Firewall an, damit er über den Port 6556 von außen erreichbar ist.
Sollten Sie allerdings bei der xref:wato_services#discovery[Service-Erkennung] oder bei einem xref:wato_monitoringagents#diagnosticpage[Verbindungstest] zum Host überhaupt keine Informationen bzw. nur Fehlermeldungen über Timeouts erhalten, so sollten Sie auf dem Host die [.guihint]#Inbound Rules# der Windows-Firewall prüfen.

.Mögliche Ausgabe von _Test connection to host_
image::agent_windows_communication_failed.png[alt="Fehlermeldung eines nicht erreichbaren Agenten.",width=64%]

In aktuellen Versionen von Windows können Sie die [.guihint]#Windows Firewall with Advanced Security# über die Windows [.guihint]#Einstellungen# finden oder über den Aufruf von `wf.msc` über die Kommandozeile starten.

image::agent_windows_windows_firewall.png[]

Sollten Sie in den Einstellungen der Windows-Firewall keinen solchen Eintrag finden, können Sie diesen genau an dieser Stelle hinzufügen.
Klicken Sie dafür im Menü [.guihint]#Action# auf [.guihint]#New Rule#.

Daraufhin öffnet sich ein Assistent für die Erstellung einer neuen Firewall-Regel.
Stellen Sie die fünf Auswahlmöglichkeiten wie folgt ein:

[cols="15,~"]
|====
|[.guihint]#Rule Type# |Belassen Sie die Auswahl hier auf [.guihint]#Program.#
|[.guihint]#Program# |Tragen Sie unter [.guihint]#This program path# `%ProgramFiles% (x86)\checkmk\service\check_mk_agent.exe` ein oder wählen Sie über den Knopf [.guihint]#Browse# die Datei `check_mk_agent.exe` aus.
|[.guihint]#Action# |Belassen Sie die Auswahl auf [.guihint]#Allow the connection.#
|[.guihint]#Profile# |Dieser Punkt kommt stark auf die Konfiguration Ihres Netzwerks an. Es empfiehlt sich allerdings in den meisten Fällen hier nur [.guihint]#Domain# und [.guihint]#Private# zu aktivieren.
|[.guihint]#Name# |Geben Sie der Regel einen prägnanten und kurzen Namen.
|====

Alternativ können Sie auch diesen Schritt automatisieren und die Regel direkt auf der Kommandozeile setzen.
Passen Sie den folgenden Befehl gegebenenfalls Ihrem angepassten Installationspfad an:

[{shell}]
----
C:\Windows\System32> netsh advfirewall firewall add rule name="Check_MK" ^
description="Monitoring" dir=in localport=6556 protocol=tcp action=allow ^
program="%ProgramFiles(x86)%\checkmk\service\check_mk_agent.exe" ^
profile=private,domain enable=yes
OK.
----

*Hinweis:* Der Befehl wurde zugunsten der Lesbarkeit in vier Zeilen aufgeteilt.


=== Installation mit der Agentenbäckerei

{cee-only}
Die {CEE} verfügen mit der xref:wato_monitoringagents#bakery[Agentenbäckerei] über ein Software-Modul zum automatischen Paketieren von individuell angepassten Agenten -- auch Windows-Agenten.
Eine ausführliche Beschreibung dazu finden Sie im allgemeinen Kapitel über die xref:wato_monitoringagents#[Agenten].
Die Installation des gebackenen MSI-Pakets geschieht dann wieder genau wie xref:install_paket[oben] beschrieben.


=== Automatisches Updaten

{cee-only}
Wenn Sie die Agentenbäckerei verwenden, können Sie automatische Updates des Agenten einrichten.
Diese werden in einem xref:agent_deployment#[eigenen Artikel] beschrieben.
////



// TK: Jetzt kommt der Teil zum alten Agenten, ggf. für das Unterkapitel Update ausschlachten ...


////
[#legacy]
== Installation des alten Agenten

=== Warum ein zweiter Agent?

In früheren Versionen von {CMK} hatte der Agent eine andere Architektur. Diese
hat sehr lange gut funktioniert und wurde erst ab {v16} durch eine
neue abgelöst, um alte Enden abzuschneiden, die Konfiguration zu vereinfachen
und letztendlich auch, um bessere Werkzeuge an der Hand zu haben, um zum
Beispiel Konfigurationsfehlern besser auf die Spur zu kommen.

Der alte Agent ist aus Kompatibilitätsgründen in {CMK} noch enthalten, da
nur dieser alte Plattformen wie Windows XP und Windows 2003 zuverlässig
überwachen kann. Diese beiden Systeme werden von dem neuen Agenten nicht
mehr unterstützt. Zusätzlich soll der alte Agent die Migration zu dem
aktuellen komfortabler gestalten. Dieser ist nach wie vor mit {CMK}
kompatibel, sodass ein Update Ihres {CMK}-Servers auf Version {v16}
nicht automatisch auch ein Update der Agenten erfordert.


=== Besonderheiten des Agenten bis Version {v15}

Der alte Windows-Agent hat folgende Unterschiede:

* Unterschiedliche Nutzung der Verzeichnisse. Im alten Agenten ist das Installationsverzeichnis und das Konfigurationsverzeichnis dasselbe. Es wird ausschließlich das Verzeichnis `C:\Program Files (x86)\check_mk\` genutzt.
* Dadurch werden die verfügbaren Plugins nicht automatisch mit installiert, sondern müssen individuell vom {CMK}-Server heruntergeladen und korrekt abgelegt werden.
* Die Konfiguration wird im alten Agenten in einer Initialisierungsdatei (`check_mk.ini`) festgehalten. Die Standardkonfiguration und die Agentenbäckerei nutzen die identische Datei. Lokale Anpassungen können über die Datei `check_mk_local.ini` vorgenommen werden, die sich im gleichen Verzeichnis befinden muss.
* Die Möglichkeiten tiefer in den Agenten einzusteigen sind stark eingeschränkt.


=== Migration zum neuen Standardagenten

Die Migration von einem bereits installierten Agenten auf den aktuellen Agenten ist sehr einfach.
Rufen Sie schlicht das Installationspaket des neuen Agenten (`check_mk_agent.msi`) auf und folgen Sie wie gewohnt den Anweisungen.
Bei der Installation werden Sie immer gefragt, wie mit alten Konfigurationsdateien umgegangen werden soll:

image::agent_windows_install_agent_product_features.png[width=77%]

Der alte Agent wird dann lediglich gestoppt und deaktiviert. Unabhängig davon
wird die Konfiguration des alten Agenten als Teil des Installationsprozess in
das neue Format übertragen und als Benutzerkonfiguration (`check_mk.user.yml`)
abgespeichert. Das gibt Ihnen die Möglichkeit, die Konvertierung anhand der
Originaldatei zu prüfen. Sobald Sie sicher sind, dass die Konvertierung
erfolgreich war, können Sie den alten Agenten deinstallieren.

Eine solche händische Prüfung werden Sie wahrscheinlich nur für einzelne Hosts
einer Gruppe machen wollen. Wenn Sie sich sicher sind, dass die Konvertierung
korrekt funktioniert, können Sie den alten Agenten entsprechend automatisch
deinstallieren lassen. Sie sparen sich dann die manuelle Deinstallation und
tauschen lediglich den alten Agenten durch den neuen aus.

*Wichtig*: Nachdem Sie den alten Agenten entfernt haben, kann es
sein, dass das Verzeichnis nicht vollständig gelöscht wurde. Das ist
kein Fehler, sondern reguläres Verhalten, wenn sich in dem zu löschenden
Verzeichnis Dateien befinden, die nicht über die Installationsroutine auf
das System gekommen sind. Das können zum Beispiel Plugins oder eigene
Konfigurationsdateien sein, die händisch von einem Benutzer angelegt
wurden. Löschen Sie in solchen Fällen schlicht das Installationsverzeichnis
des alten Agenten nach der Deinstallation, nachdem Sie sichergestellt haben,
dass sich dort keine wichtigen Dateien mehr befinden.

==== Firewall-Regel auf den neuen Agenten anpassen

Wenn Sie den Agenten nicht frisch installieren, sondern von dem Legacy-Agenten
migrieren, müssen Sie gegebenenfalls auch die Firewall-Regel anpassen,
die Sie vorher angelegt hatten. Dabei müssen Sie keine neue Regel anlegen,
wie das xref:agent_windows#firewall[oben] beschrieben ist. Stattdessen passen
Sie lediglich die bestehende Regel an. In dem folgenden Beispiel gehen wir
davon aus, dass die Regel den Namen "Check_MK" hat:

[{shell}]
----
C:\Windows\System32> netsh advfirewall firewall set rule name="Check_MK" ^
new program="%ProgramFiles(x86)%\checkmk\service\check_mk_agent.exe"

Updated 1 rule(s).
Ok.
----

Wenn das Programm `netsh` die angegebene Regel finden konnte, wird das
Kommando dann auch entsprechend der Beispielausgabe quittiert. Sollten Sie
den Namen der Regel nicht (mehr) kennen, können Sie die Regel natürlich
auch über das grafische Tool `wf.msc` anpassen.
////


// TK: und jetzt kommt die Deinstallation, ehemals ein eigenens Hauptkapitel


////
[#uninstall]
== Deinstallation

Für die Deinstallation des Agenten haben Sie in Windows mehrere Möglichkeiten.
In allen Versionen von Windows finden Sie einen Eintrag in der Systemsteuerung unter [.guihint]#Control Panel > Programs > Uninstall a program.#
In neueren Versionen finden Sie den Eintrag für den {CMK}-Agenten zudem in den Einstellungen unter [.guihint]#Settings > Apps & features.#

Über die Kommandozeile haben Sie mehrere Möglichkeiten den Agenten zu entfernen.
Sollte Ihnen das zuletzt installierte MSI-Paket noch vorliegen, können Sie dieses wie folgt für die Deinstallation nutzen:

[{shell}]
----
C:\Users\hhirsch\Downloads\> msiexec /x check_mk_agent.msi /qn
----

Alternativ können Sie auch das Windows Management Instrumentation Command (WMIC) für die Deinstallation verwenden:

[{shell}]
----
C:\> wmic product where name="Check MK Agent 2.0" call uninstall /nointeractive
----

War die Deinstallation erfolgreich, erhalten Sie als Bestätigung die Meldung `Method execution successful.`

*Hinweis:* Der String hinter `name=` muss exakt stimmen.
Wenn Sie hier eine andere Version des Agenten deinstallieren wollen, finden Sie ein Auflistung aller installierten Produkte mit folgendem Aufruf:

[{shell}]
----
C:\> wmic product get name
----

Der Vorgang kann bisweilen recht lange dauern und gibt derweil keinerlei Statusmeldungen aus, dafür dann aber sehr lange Listen.
Zum Filtern können Sie den Befehl zur Pipe ausbauen:

[{shell}]
----
C:\> wmic product get name | findstr Check
----

Beachten Sie dabei die Groß- und Kleinschreibung!
// ML: Ausführungszeit hier: 59 Sekunden, ohne Fortschrittsanzeige - keine gute Lösung.

Da die verschiedenen Routinen von Windows nur Dateien entfernen, welche auch durch den Installationsprozess dort hin gekommen sind, ist es vollkommen normal, dass in den xref:agent_windows#files[Verzeichnissen des Agenten] noch Dateien übrig bleiben.
Diese können manuell gelöscht werden.
////