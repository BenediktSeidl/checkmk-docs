include::global_attr.adoc[]
= Writing your own check plug-ins
:revdate: draft
:title: 
:description: 

[TIP]
.Related Articles:
====
link:localchecks.html[]

link:agent_linux.html[]

link:agent_windows.html[]

link:cmk_commandline.html[]

link:legacy_writing_checks.html[]

link:mkps.html[]

link:simulation_mode.html[]

link:snmp.html[]

link:wato_monitoringagents.html[]

link:wato_services.html[]

====


== Introduction



{CMK} includes nearly 2000 ready-made check plug-ins for all imaginable hardware and software.
These are maintained by the {CMK} team, and new plug-ins are added every week.
On the link:https://exchange.checkmk.com[{CMK}-Exchange]
there are also more plug-ins contributed by our users.

And yet there are always situations where a device, an application,
or just a specific metric that is important to you is not covered by any of
these plug-ins - maybe because it is something that was developed within your own company
and is therefore not available to anyone else.


=== Does it always have to be a real plug-in?


What options do you have for implementing an effective monitoring here?
Well - you could of course contact our link:https://checkmk.de/support.html[support team]
and request that they develop a suitable plug-in for you - but naturally it's quicker
if you can do it yourself.
You have three options:

[cols=4]
|===
|Method |How to do it |Advantages |Disadvantages 

|link:localchecks.html[Localcheck] |Extend a {CMK} Agent with a simple script |Is very simple, is possible in all programming languages offered by the monitored host’s operating system, even supports service detection |Threshold configuration only for the agent itself, SNMP not possible or very cumbersome 
|Nagios-compatible check plug-in  |Run the plug-in via _MRPE_ from the [agent_windows#mrpe|Windows] or link:agent_linux.html#mrpe[Linux] agent.  |Access to all existing Nagios plug-ins, also free choice of the programming language |Threshold configuration only for the agent itself, SNMP not possible or very cumbersome, no service discovery possible 
|Genuine {CMK} plug-in |Explained here in the manual |Inserts itself 100% into {CMK}, automatic service recognition, central configuration of the thresholds via WATO, very high performance, supports SNMP, automatic host and service labels possible, supports link:inventory.html[HW/SW inventory], {CMK} provides a lot so you do not have to program standard functions yourself. Only a real plug-in has a chance to become part of the official {CMK}. |Requires more training and knowledge of the Python programming language 
|log messages |Monitor _messages_ with the link:ec.html[Event Console] |No development necessary, but only need to set up rules in the Event Console |All of the disadvantages of event-based monitoring compared to state-based: no current status, no metrics, no configurable thresholds - you do not know for sure whether any messages actually be received. 
|===



This article will show you how to develop real {CMK} check plug-ins - along with everything that goes with them.
Here we show you how to use the newly-developed API for programming plug-ins in version VERSION[1.7.0] of {CMK}.
If you want to develop plug-ins that will work on legacy {CMK} versions you can refer to
link:legacy_writing_checks.html[previous manuals].
However these have not been maintained for some time and are only available in English.


=== Different types of check plug-ins


Before we jump into action, let's first review the different types of check plug-ins that CMK works with:

[cols=2]
|===

|Agent-based |The ‘normal’ plug-ins evaluate data that the {CMK} agent sends for Linux, Windows or other operating systems. This agent monitors operating system parameters and applications, and sometimes also server hardware. Each new check plug-in requires an extension of the agent to provide the necessary data. Therefore you first develop an agent plug-in, and then one or more check plug-ins that evaluate this data. 
|SNMP |When monitoring via link:snmp.html[SNMP] you do not need an extension of an agent, but evaluate the data that your device retrieves data from your device via SNMP, which provides this by default. {CMK} supports you and takes over all details and special features of the SNMP protocol. 
|Special Agent |You need a special agent if you do not receive the data that is relevant for monitoring from either the normal {CMK} agent or SNMP. The most common application for Special Agent is querying HTTP-based APIs. Examples are, e.g. Monitoring [monitoring_aws|AWS], [monitoring_azure|Azure], or link:monitoring_vmware.html[VMware]. In this case you write a script that runs directly on the {CMK} server, connects to the API, and outputs data in the same format as an agent plug-in would. For this you write suitable check plug-ins in the same way as with the ‘agent-based’ monitoring. 
|Active Check |This check type forms a special role. Here you first write a classic Nagios-compatible plug-in which is intended for execution _on the {CMK} server_, and which from there uses a network protocol to directly query a service on the target device. The most prominent example is the `check_http` plug-in which allows you to monitor web servers and web pages. You can then integrate this plug-in into {CMK} so that it can be set up as usual via WATO. 
|===




=== Prerequisites


If you feel like programming check plug-ins, you need to satisfy the following prerequisites:

* Knowledge of the Python programming language, or at least experience in a similar language (such as PHP, Ruby, Java, etc.), along with the desire to become familiar with Python.
* Experience with {CMK}, especially with regard to agents and checks
* Experience with Linux on the command line

As preparation, the following articles are recommended:

- link:wato_services.html[Understanding and configuring services]
- link:wato_monitoringagents.html[Monitoring agents]
- link:snmp.html[Monitoring via SNMP]
- link:agent_windows.html[Monitoring Windows]
- link:agent_linux.html[Monitoring Linux]
- link:cmk_commandline.html[Checkmk on the command line]
- link:mkps.html[Checkmk extension packages (MKPs)]
- link:simulation_mode.html[Checkmk's simulation mode]


=== Steps to your own plug-in


Typically, there are the following phases that you go through when writing your own plug-in:

. *Getting data:* Find out how to actually get the status data you want to monitor. Which command line commands, SNMP paths or API calls provide the necessary raw data? That is sometimes the hardest job.
. *Extending the agent:* You now write a plug-in for the agent with the correct commands — or a special agent to get the API. SNMP eliminates this step.
. *The Check plug-in:* Now write the actual check plug-in which analyzes the data and, based on this, recognizes services and generates their status.

If that works, you are done — but you can also extend the whole process with several additional features:

* Definitions of the link:graphing.html[metrics] provided by the services to produce beautiful and well-labelled graphs and perf-o-meters.
* A set of rules for WATO that you can use to configure check plug-in parameters.
* A ruleset for WATO that configures the agent plug-in for the link:wato_monitoringagents.html#bakery[Agent Bakery].
* A ruleset for WATO that configures the special agent.
* A manual page that documents the check plug-in for the user.

== This article is not finished yet

Now you are probably wondering why this article ends here. The main reason is that we are currently
working on a major overhaul and improvement of the programming API for check plugins. As soon as it is
finalized, we will rewrite this article -- and many more articles on programming extensions. The plan
is that this will be finished with the release of {CMK} version VERSION [1.7.0].

Until then, we ask for a little patience!

// Weiteres Vorgehen:
//
// 1. Beispiel mit Agent: Wieder mit smartctl -A /dev/sda. Erstmal ohne Item. Nur eine Platte, die hartkodiert ist.
// Und ein Check mit der Temperatur mit festen Schwellwerten. Hinweis, dass es das schon gibt, natürlich.
// Vorgehen ziemlich wie legacy_devel_agentbased.
//
// 2. Erst jetzt kommt das Item. Also Plugin anpassen. Discoveryfunktion anpassen. Description anpassen.
//
// --> Sollen wir hier den Sack zumachen und jetzt auf der Ebene SNMP vorstellen?
//
// 3. Parameter: Wie sollen wir es machen, da wir ja keine main.mk mehr zulassen möchten. Wie kann man
// das ohne WATO-Regel machen? Sollen wir wirklich mit der main.mk rummachen? Oder jetzt den riesigen
// Ausflug in die WATO-Regeln machen? --> Gilt aber auch bei SNMP.
//
// | 4. Messdaten: Wie sendet man sie? Wie deklariert man sie in CMK korrekt? Grafendefinitionen?
// |
// | 5. Manualpage.
// +-> Hier müssen wir bedenken, dass dies auch für SNMP-basierte Checks gilt.
