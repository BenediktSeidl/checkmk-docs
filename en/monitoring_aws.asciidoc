include::global_attr.adoc[]
= Monitoring Amazon Web Services (AWS)
:revdate: 2019-02-17
:title: Integration and monitoring of Amazon Web Services
:description: How to monitor Amazon S3, EC2, EBS, RDS, and ELB, or their costs, and seamlessly integrate them into checkmk is described here.

[TIP]
.Related Articles:
====
link:monitoring_azure.html[]
link:check_plugins_catalog.html[]
link:dcd.html[]
====

== Introduction

image::logo_aws.png[left, width=140]

According to a survey among our users,
<a href="https://docs.aws.amazon.com/aws-technical-content/latest/aws-overview/introduction.html">Amazon
Web Services</a> is currently the most important provider of cloud-based
Services, so goes without saying that {CMK} must here provide excellent monitoring.

{CMK} contains a comprehensive monitoring for AWS which consists of a connector
to AWS and an impressive collection of check plug-ins consisting of various
metrics for the retrieval and evaluation of states. Because of the amount
of check plug-ins only some of them, to show the AWS web services that {CMK}
can currently monitor:

* link:check_aws_ebs_summary.html[AWS EBS Summary]
* link:check_aws_ec2.html[AWS EC2 Instance Status]
* link:check_aws_elb.html[AWS ELB Statistics]
* link:check_aws_elbv2_application.statistics.html[AWS ELB Application Statistics]
* link:check_aws_elbv2_network.statistics.html[AWS ELB Network Statistics]
* link:check_aws_rds_summary.db_status.html[AWS RDS Database Info]
* link:check_aws_s3.summary.html[AWS S3 Summary]
* link:check_aws_glacier.summary.html[AWS Glacier Summary] (beginning with VERSION[1.7.0])
* link:check_aws_cloudwatch_alarms.html[AWS Cloudwatch Alarms]
* link:check_aws_costs_and_usage.html[AWS Costs and Usage Summary]

For a complete, up-to-date list of all available plug-ins,
see the link:check_plugins_catalog.html[Check plug-ins Catalog].


== Concrete Implementation of AWS Monitoring

=== Hosts and services

In {CMK} all objects to be monitored are arranged in a hierarchical structure of hosts and services.
The concept of hosts does not exist in cloud-based services.
However to retain the simplicity and consistency of {CMK},
we still map AWS objects according to the host/service schema.

How that is achieved can best be illustrated by an example: In one region several
EC2 instances have been configured. An EC2 is usually assigned to EBS. This
constellation looks like this in {CMK}:

* There is a host that matches the AWS account. This host gives an overview of all EC2 instances and their status as a service.
* The EC2 instances themselves are their own hosts.
* On these EC2 hosts you can find services with the actual metrics.
* The EBS are interpreted as a type of hard disk, and accordingly provide metrics to I/O (e.g., the number of bytes read or written). For this purpose, in each EBS there are separate services in {CMK} with the name `AWS/EBS Disk IO` which are assigned to the EC2 instance.


=== Access to AWS

An agent is actually not necessary for monitoring AWS services since AWS provides an HTTP-based API over
which monitoring data is also available.

{CMK} accesses this API via the `agent_aws` ‘Special Agent’ --
which replaces the {CMK} agent -- but in contrast this agent runs locally on the
{CMK} server.


== Preparing AWS

=== Creating the user

To enable monitoring via {CMK}, it is best to achieve it by creating a
special AWS user under your root account.
<a href="https://console.aws.amazon.com">Log in</a>
to AWS as the root user, and navigate to [.guihint]#Security, Identity, & Compliance|IAM# (Identity and Access Management).
Go to [.guihint]#Users}} and create a new user with {{Add User#.
As a user name choose, for example, `check-mk`.

It is important that you select the [.guihint]#Programmatic Access}} for {{Access Type#.

// User: check-mk
// Acess key id:  AKIAJMNG3SHALVWELRJQ
// Key: GIBIczXoYMRQImgSWL9kmFAK0fv7OZTS0BWKGd3d

image::aws_create_user.png[]


=== Permissions

Under no circumstances should the user receive any rights for modifying the monitoring.
You can simply assign the single policy [.guihint]#ReadOnlyAccess# to the user `check-mk`
(or you could take the trouble to restrict the account with more detailed policies):

image::aws_create_user_policies.png[]

=== Keys

After completing the user creation an access key will be generated
automatically for you. Note: The key’s secret is displayed only
once -- directly after its creation. Therefore without fail copy the key and
save it, for example, in the {CMK} password store. Alternatively specify
it in plain text as a rule (see below). For {CMK} you need the [.guihint]#Access Key ID#
in addition to the secret. The name of the user (in our example
`check-mk`) does not matter here.

image::aws_create_user_key.png[]

If for some reason you should lose the secret, you can create a new access key
for the user and get a new secret:

image::aws_create_access_key.png[]

=== Access to Billing-Information

If you want {CMK} to have read access for the billing information
(in order to perform the [.guihint]#Costs and Usage# global check), you need another policy for your AWS user -- a policy you yourself must first define.

Under [.guihint]#Security, Identity, & Compliance|IAM|Policies}} select the {{Create Policy# button.
Select from [.guihint]#Select a Service|Service|Choose a Service}} the {{Billing# service.
Under [.guihint]#Actions}} tick the {{Read# checkbox.
We have to set an additional permission. Add one via the [.guihint]#Add additional permissions# button.
Select from [.guihint]#Select a Service|Service|Choose a Service}} the {{Cost Explorer Service# service.
Under [.guihint]#Actions}} again tick the {{Read# checkbox.

image::aws_policies.png[]

Click [.guihint]#Review}} to go to step two. Set `BillingViewAccess` as the {{Name#,
and save it with the [.guihint]#Create policy# button.

You must now add this new policy to the user.
Go again to [.guihint]#Security, Identity, & Compliance|IAM|Policies# -- in the
[.guihint]#Filter Policies}} search box look for `BillingViewAccess`, select this by clicking in the circle to the left, and then go to {{Policy actions|Attach#.
Here you will find your `check-mk` user,
select this and confirm it with [.guihint]#Attache policy#. The following message will be received once it has been executed successfully:



== Configuring the monitoring in {CMK}

=== Create a host for AWS in {CMK}

Now create a host to monitor AWS in {CMK}.
You can assign the hostname as you wish. Important: Because AWS is not a service
it has no IP-address or DNS name (access is granted by the special agent itself),
so you need to set the [.guihint]#IP Address Family}} to {{No IP#.

image::azure_wato_no_ip.png[]


=== Create a rule for AWS agents#agent_rule

AWS cannot be queried through the regular {CMK} agent,
so next set up the AWS Special Agent. To do so,
under [.guihint]#Host & Service Parameters|Datasource Programs|Amazon Web Services (AWS)#
add a rule whose link:wato_rules.html#conditions[conditions] apply only to the just-created
AWS-host.

For the actual content of the rule, you first need to find the information
for the login. Here enter the [.guihint]#Access Key ID# for the newly-created AWS user `check-mk`.
Also choose here which global data you want to monitor,
i.e., those that are independent of a region. That is currently
only the data relating to the costs:

image::aws_rule_1.png[]

The really interesting data is assigned to regions.
Therefore here select your AWS region(s):

image::aws_rule_2.png[]

Under [.guihint]#Service by region to monitor# you specify which information you
want to retrieve from these regions. At default all AWS web services and
the monitoring of their link:Monitoring_aws.html#limits[limits] are activated. In
the following screenshot are all but one deactivated to get a better overview:

image::aws_rule_3.png[]

You now can restrict the fetched data per web service or globally with
[.guihint]#Restrict moinitoring services by one of these tags#. The global restriction
will be overwritten , if you restrict by web service! Also you not only
have the option to restrict by AWS tags but additionally to specify the
explicit names:

image::aws_rule_4.png[]

Don't forget to assign the special agent to the previously created host by
entering that host name in [.guihint]#Conditions|Explicit hosts#.

=== Services on the AWS host itself

Now go to the service discovery of the newly created AWS host, where WATO
should now find several services. After you add the services, after
an [.guihint]#Activate Changes# it will look something like this :

image::aws_services_ec.png[]


===  Create hosts for the EC2 instances

Services associated with EC2 instances do not become the AWS host,
rather they become so-called link:piggyback.html[piggyback hosts].
This works in such a way that data retrieved from the AWS host is distributed to
these hosts, and they work without their own monitoring agents.
Each EC2 instance will be assigned to a piggy-host, the name for the EC2 instance
will be derived from the private DNS name.

The piggy-hosts are not automatically created by {CMK}.
Create these hosts either manually or -- from Version VERSION[1.6.0] --
optionally with the new link:dcd.html[Dynamic Configuration Daemon (DCD)].
It is important that the names of the hosts exactly match the private DNS names of the
EC2 instance -- they are also case-sensitive!

By the way – with the auxiliary script `find_piggy_orphans` from the
Treasures Directory you can find all of the piggy-hosts for which there are data
even if the hosts themselves have not yet been created as hosts in {CMK}:

{c-start}
{OM}share/doc/check_mk/treasures/find_piggy_orphans
ip-172-31-44-50.eu-central-1.compute.internal
ip-172-31-44-51.eu-central-1.compute.internal
{c-end}

Configure the EC2 hosts without IP addresses (analogous to the
Azure host), and select [.guihint]#No Agent# as the agent.

image::wato_host_no_agent.png[]


=== Hosts for the ELB (Classic Load Balancer)

The services for the ELB are also assigned to piggy-hosts.
The names correspond to  their DNS names.


=== Monitoring limits#limits

Some web services of AWS do have limits and {CMK} is able to monitor them. Here
some examples:

* link:check_aws_ebs_limits.html[AWS EBS Limits]
* link:check_aws_ec2_limits.html[AWS EC2 Limits]
* link:check_aws_elb_limits.html[AWS ELB Limits]
* link:check_aws_elbv2_limits.html[AWS Application and Network Limits]
* link:check_aws_glacier_limits.html[AWS Galcier Limits]
* link:check_aws_rds_limits.html[AWS RDS Limits]
* link:check_aws_s3_limits.html[AWS S3 Limits]
* link:check_aws_cloudwatch_alarms_limits.html[AWS Cloudwatch Alarm Limits]

As soon as such a check plug-in creates Services and checks them later on,
the special agent will always fetch *all* elements of the web service
that has the activated limits monitoring. Only in this case {CMK} is able
to compute reasonably the utilization and check the thresholds. That's also
the case even if you restrict the fetched data by some tags or names.

The checking of the limits is activated by default for each
monitored web service. If you want to restrict the fetched data in
link:monitoring_aws.html#agent_rule[special agent rule] to limit the amount of
transferred data, you need to deactivate the monitoring of the limits, too.


=== Further services

The other services in AWS are assigned as follows:

[options="header"]
|===

|
|Service
|Assignment


|EBS
|Block Storages
|Appended to the EC2 instance if it belongs to the instance, otherwise to the AWS host

|S3
|Simple storages
|At the AWS-Host

|RD
|Relational databases
|At the AWS-Host

|===

