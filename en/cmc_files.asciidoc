= CMC files and directories
:revdate: 2016-07-14
:title: Files and directories used by the CMC
:description: This overview describes all of the important files and directories relating to the Checkmk Micro Core (CMC).

The following overview shows all of the important files and directories applicable
to the Checkmk Micro Core. All data paths relate to the instance’s home directory.
For example: if an instance is named `mysite`, then all of the paths are
derived from `/omd/sites/mysite`.

=== 1. Runtime data

[cols=45, options="header"]
|===


|Data path
|Meaning

<td class=tt>var/log/cmc.log</td><td>Here messages from starting and stopping
the CMC can be found, as well as general warnings and error messages.
The history for hosts and services (with Nagios, both are in `nagios.log`) is
stored in its own data set and is thus not included here.</tr>

<td class=tt>var/check_mk/core/</td><td>Directory with all CMC runtimes.</td>
<td class=tt>var/check_mk/core/config</td><td>The core’s configuration. In Nagios
this data equates to the data sets under `etc/nagios/conf.d` and
contains all statistical data for hosts, services, groups, users and
global settings.</tr>

<td class=tt>var/check_mk/core/state</td><td>The core’s current runtime state.
This stores information on the current status of hosts and services, likewise downtimes,
acknowledgements and commentaries. This data equates to the `retention.dat` data
in Nagios, but it is however binary-coded. The data is updated regularly during
processing and when when the core is stopped. If it is unavailable or incompatible
when the core starts, the core will begin with an empty state.</tr>

<td class=tt>var/check_mk/core/state-*</td>

|Backup copies of the status following a migration from an old CMC version,
or when the CMC detects a large reduction in the number of hosts in the configuration.
Thus you can return to the old status (and recover its downtimes and acknowledgements), e.g.,
if due to a configurations-error all hosts have been temporarily removed from the monitoring.</tr>

<td class=tt>var/check_mk/core/core</td><td>The `core`-data is
normally not present. If that is not the case, then this indicates an earlier core crash and aids
the developers in locating the cause of the error.</tr>

<td class=tt>var/check_mk/core/history</td><td>The history for all hosts and services is
stored in text format in this file. This corresponds in its content and format to the
`nagios.log` file in Nagios, with which it is largely compatible.</tr>

<td class=tt>var/check_mk/core/archive/</td><td>Old versions of `history` are moved
to this directory when the log files are rotated. Historic data can only be accessed with
Livestatus and Multisite (events, availability) when this data is uncompressed.</tr>

<td class=tt>tmp/run/live</td><td>The CMC’s livestatus socket. This is in the same
location as in Nagios. Because the CMC is livestatus-compatible with Nagios and Icinga,
all extensions based on livestatus can be used without modification (e.g. NagVis).</tr>

<td class=tt>tmp/run/cmc.pid</td><td>The CMC’s current process-ID</td>
|===

=== 2. Configuration

The CMC has no configuration data of its own. All settings for the CMC can be found
in the ICON[icon_configuration.png] [.guihints]#Global Settings# WATO module under
[.guihints]#Monitoring Core}},# and these are stored together with the other global options in
`etc/check_mk/conf.d/wato/global.mk`.

=== 3. Software

[cols=45, options="header"]
|===


|Data path
|Meaning

<td class=tt>bin/cmc</td><td>The executable program for the CMC itself. This has been
developed in C++, and apart from the standard C++ library requires no other libraries
(in particular, no Boost). For testing purposes one can also activate the CMC by hand
(Try it: `cmc --help`).</tr>

<td class=tt>lib/cmc/checkhelper</td><td>A help process that is started
several times by the CMC,
and which takes over the efficient running of checks.</tr>

<td class=tt>lib/cmc/icmpsender</td><td>A help process that is started by the CMC and which
takes over the sending of ICMP packages for the Smart-Ping. This MUST be installed
with SUID-root.</tr>

<td class=tt>lib/cmc/icmpreceiver</td><td>A help process that is started by the CMC and which
takes over the receiving of ICMP and TCP connection packages for the Smart-Ping. This MUST be installed
with SUID-root.</tr>

<td class=tt>etc/init.d/cmc</td><td>The Micro Core’s start script</td>
<td class=tt>share/check_mk/web/plugins/wato/cmc.py</td><td>WATO extension with
global settings and rule sets for the CMC.</tr>

<td class=tt>share/check_mk/web/plugins/sidebar/cmc.py</td><td>A Sidebar plug-in for Multisite with CMC performance data.</td>
<td class=tt>share/check_mk/modules/cmc.py</td><td>(CMK) module that generates the configuration for the CMC.</td>
<td class=tt>share/check_mk/modules/rrd.py</td><td>(CMK) module for installing RRD data.</td>
|===
