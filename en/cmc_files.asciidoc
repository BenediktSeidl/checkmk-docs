include::global_attr.adoc[]
= CMC files and directories
:revdate: 2016-07-14
:title: Files and directories used by the CMC
:description: This overview describes all of the important files and directories relating to the Checkmk Micro Core (CMC).

[TIP]
.Related Articles:
====
link:cmc.html[]

link:cmc_migration.html[]

link:cmc_differences.html[]

====

The following overview shows all of the important files and directories applicable
to the {CMK} Micro Core. All data paths relate to the instance’s home directory.
For example: if an instance is named `mysite`, then all of the paths are
derived from `/omd/sites/mysite`.

==  Runtime data

[cols=<th style="width: 45%">Data path</th>,options="header"]
|===

|Data path
|Meaning






|Backup copies of the status following a migration from an old CMC version, or when the CMC detects a large reduction in the number of hosts in the configuration. Thus you can return to the old status (and recover its downtimes and acknowledgements), e.g., if due to a configurations-error all hosts have been temporarily removed from the monitoring.</td></tr>
 <tr><td class=tt>var/check_mk/core/core</td><td>The `core`-data is normally not present. If that is not the case, then this indicates an earlier core crash and aids the developers in locating the cause of the error.</td></tr>
 <tr><td class=tt>var/check_mk/core/history</td><td>The history for all hosts and services is stored in text format in this file. This corresponds in its content and format to the `nagios.log` file in Nagios, with which it is largely compatible.</td></tr>
 <tr><td class=tt>var/check_mk/core/archive/</td><td>Old versions of `history` are moved to this directory when the log files are rotated. Historic data can only be accessed with Livestatus and Multisite (events, availability) when this data is uncompressed.</td></tr>
 <tr><td class=tt>tmp/run/live</td><td>The CMC’s livestatus socket. This is in the same location as in Nagios. Because the CMC is livestatus-compatible with Nagios and Icinga, all extensions based on livestatus can be used without modification (e.g. NagVis).</td></tr>
 <tr><td class=tt>tmp/run/cmc.pid</td><td>The CMC’s current process-ID</td></tr>

|===


==  Configuration

The CMC has no configuration data of its own. All settings for the CMC can be found
in the icon:icon_configuration.png[] [.guihint]#Global Settings# WATO module under
[.guihint]#Monitoring Core#, and these are stored together with the other global options in
`etc/check_mk/conf.d/wato/global.mk`.

==  Software

[cols=<th style="width: 45%">Data path</th>,options="header"]
[cols=<th style="width: 45%">Data path</th>,options="header"]
|===

|Data path
|Meaning






|Backup copies of the status following a migration from an old CMC version, or when the CMC detects a large reduction in the number of hosts in the configuration. Thus you can return to the old status (and recover its downtimes and acknowledgements), e.g., if due to a configurations-error all hosts have been temporarily removed from the monitoring.</td></tr>
 <tr><td class=tt>var/check_mk/core/core</td><td>The `core`-data is normally not present. If that is not the case, then this indicates an earlier core crash and aids the developers in locating the cause of the error.</td></tr>
 <tr><td class=tt>var/check_mk/core/history</td><td>The history for all hosts and services is stored in text format in this file. This corresponds in its content and format to the `nagios.log` file in Nagios, with which it is largely compatible.</td></tr>
 <tr><td class=tt>var/check_mk/core/archive/</td><td>Old versions of `history` are moved to this directory when the log files are rotated. Historic data can only be accessed with Livestatus and Multisite (events, availability) when this data is uncompressed.</td></tr>
 <tr><td class=tt>tmp/run/live</td><td>The CMC’s livestatus socket. This is in the same location as in Nagios. Because the CMC is livestatus-compatible with Nagios and Icinga, all extensions based on livestatus can be used without modification (e.g. NagVis).</td></tr>
 <tr><td class=tt>tmp/run/cmc.pid</td><td>The CMC’s current process-ID</td></tr>

|===
 <table>
 <tr>
|Data path
|Meaning </tr>
 <tr><td class=tt>bin/cmc</td><td>The executable program for the CMC itself. This has been developed in C++, and apart from the standard C++ library requires no other libraries (in particular, no Boost). For testing purposes one can also activate the CMC by hand (Try it: `cmc --help`).</td></tr>
 <tr><td class=tt>lib/cmc/checkhelper</td><td>A help process that is started several times by the CMC, and which takes over the efficient running of checks.</td></tr>
 <tr><td class=tt>lib/cmc/icmpsender</td><td>A help process that is started by the CMC and which takes over the sending of ICMP packages for the Smart-Ping. This MUST be installed with SUID-root.</td></tr>
 <tr><td class=tt>lib/cmc/icmpreceiver</td><td>A help process that is started by the CMC and which takes over the receiving of ICMP and TCP connection packages for the Smart-Ping. This MUST be installed with SUID-root.</td></tr>
 <tr><td class=tt>etc/init.d/cmc</td><td>The Micro Core’s start script</td></tr>
 <tr><td class=tt>share/check_mk/web/plugins/wato/cmc.py</td><td>WATO extension with global settings and rule sets for the CMC.</td></tr>
 <tr><td class=tt>share/check_mk/web/plugins/sidebar/cmc.py</td><td>A Sidebar plug-in for Multisite with CMC performance data.</td></tr>
 <tr><td class=tt>share/check_mk/modules/cmc.py</td><td>{CMK} module that generates the configuration for the CMC.</td></tr>
 <tr><td class=tt>share/check_mk/modules/rrd.py</td><td>{CMK} module for installing RRD data.</td></tr>

|===

