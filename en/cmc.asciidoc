include::global_attr.adoc[]
= The Checkmk micro core (CMC)
:revdate: 2016-07-08
:title: The optimized core in checkmk
:description: Learn all about the specific Check_mk Micro Core (CMC) and its advantages in this article.

[TIP]
.Related Articles:
====
link:cmc_migration.html[]

link:cmc_differences.html[]

link:cmc_files.html[]

====

== The monitoring core

The monitoring core is at the heart of the {CMK}-System.
Its tasks are:

* the regular initiation of checks and the collection of their results.
* providing current states to the GUI
* the recognition of changes to states and the link:notifications.html[notifications] generated from these.

The architecture diagram below shows the core and its connections to the primary components of the {CEE}:

[#architecture]
image::cee_architecture.png[]

=== Nagios and Icinga

image::CRE.png[float=left,width=48]

The {CRE} is a construction based on the core from the well-established _Nagios_
Open-Source Projekt. This offers numerous useful functions and has been proven over many years
by millions of users worldwide.
This inherent flexibility is one of the reasons for the success of Nagios.

Alternatively, the core from _Icinga_ can also be utilised. This is particularly popular
in Germany, and is based on the same program code, but in recent years it has been developed independently.

Even though Nagios and Icinga perform exceptionally -- being flexible, fast, stable and well-proven --
there are still situations in which their limits are reached.
Where a large number of hosts and services are being monitored,
three problems in particular become evident:

* The high CPU consumption when executing checks
* The long restart time when changing a configuration
* The fact that the system is not available during such a restart

== The {CMK} micro core

image::CME.png[float=left,width=48]

Since {CMK} is being used in ever-larger environments, and in order to overcome
the limitations of Nagios as described above, in 2013 we commenced a new development of
our own core specifically for the {CEE}.
The _{CMK} Micro Core_ -- or _CMC_ -- has not simply been created as a fork from Nagios,
rather it has a complete code basis of its own.
The CMC utilises a unique software architecture, and it has been perfectly-tailored for {CMK}.
Its primary advantages are:

[cols=2]
|===

|*High efficiency when executing checks* |This applies for active checks as well as {CMK}-based checks. In benchmarking, a desktop-PC (Core i7) achieved more than 600,000 checks per minute.
|*Rapid activation of changes* |A configuration with 20,000 hosts and 600,000 services can be loaded in 0,5 seconds.
|*Configuration changes during live operations* |Currently-running checks and live status connections are not interrupted. The procedure is undetectable to monitoring users.
|*Rapid availability queries* |Through the use of special caches, availability analyses - even over long time periods -- can be calculated without a noticeable waiting time.
|*Additional features* |The CMC makes use of numerous additional features, such as, e.g., recurring planned-downtimes and link:basics_ackn.html[acknowledgements] with automatic expiry times.
|===


Other elements have also been optimised. For example, performance data is passed without detours
directly from the core to the RRD cache, notifications are created in a 'KeepAlive'-mode,
and host checks are executed by a built-in ICMP helper.
All of these reduce costly process-creations and save CPU resources.

These characteristics bring numerous advantages -- even in smaller installations:

* The low CPU consumption enables virtualisation to subsitute for hardware in many cases.
* The shock-free activation of changes allows frequent configuration changes.
* Demands such as cloud-monitoring can thus be satisfied, since servers can be added and removed in quick succession.

// The graphic below shows the CPU consumption for a {CMK} server before and after changing from
// Nagios to the CMC. This graphic has been kindly provided by Munich Airport,
// which monitors 730 hosts and 18,000 services with this server.
//
// BI:cmc-migration-cpuload2.png border center width:500px

The graphic below shows the CPU utilization for a {CMK}-Server before and
after changing from Nagios to the CMC. This graphic has been kindly provided
by the company DFi Service SA. At this point in time they were monitoring
1,205 hosts and 13,555 services on a server with 10 cores.

image::cmc-migration-cpuload4.png[align=center, width=500]
image::cmc-migration-cpuutil4.png[align=center, width=500]

Another project shows similar results. The following graphs show a restructuring
from a Nagios core to the CMC in an environment with 56,602 services
on 2,230 monitored hosts on a virtual machine with two cores:

[.border]
image::cmc-migration-cpuload.png[align=center, width=500]
[.border]
image::cmc-migration-cpuutil.png[align=center, width=500]
[.border]
image::cmc-migration-diskio.png[align=center, width=500]

The magnitude of the difference in an individual case naturally depends on many factors.
In the above case a smaller instance that was not restructured runs on the same server.
Without this the difference in consumption would be even more noticeable.

Further articles on the CMC:

- link:cmc_migration.html[Migration to the CMC]
- link:cmc_differences.html[Special characteristics of the CMC]
- link:cmc_files.html[CMC files and directories]

== Frequently Asked Questions (FAQs)

=== Can the CMC also run normal Nagios Plug-ins?
The CMC can of course also run classic Nagios checks both actively and passively.

=== Will {CMK} continue to support Nagios?
{CMK} is and will remain compatible with Nagios, and will continue to fully-support the Nagios core.
Likewise the {CEE} will continue to have Nagios as an optional core -- but only
to support a migration from the {RE} to the {EE}.


=== Can I switch between Nagios and the CMC?

Switching between the two cores is simple, as long as your configuration has been created cleanly
with WATO. Details on this can be found in the link:cmc_migration.html[Migration to the CMC] article.
By default the {CEE} create new instances with the CMC as the core.


=== Is the CMC freely-available?

The CMC is included as a component in the {CEE}.
The {CFE} is cost-free, the {CEE} and the {CME} are available via subscriptions.
