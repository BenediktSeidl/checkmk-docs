include::global_attr.adoc[]
= Monitoring ORACLE databases
:revdate: 2019-06-19
:title: Monitoring Oracle data bases efficiently
:description: With the plug-in for Windows, Linux, Solaris and AIX you can fully monitor Oracle databases. Details about the configuration can be found here.

[TIP]
.Related Articles:
====
link:agent_linux.html[]

link:wato_monitoringagents.html[]

link:check_plugins_catalog.html[]

====



== Introduction

{CMK} provides comprehensive options for the monitoring of Oracle databases.
With the plug-in you can not only retrieve a database’s tablespaces or its
active sessions, but also many other types of performance data.
A complete list of the monitoring options can be found in our
link:check_plugins_catalog.html[Catalogue of Check Plug-ins].
We extend this plug-in regularly, so it is always worth looking in the catalogue.
Among others, {CMK} can monitor the following values (some of them only from Version VERSION[1.6.0]):

* link:check_oracle_recovery_status.html[Check Checkpoint and user managed Backup state of datafiles]
* link:check_oracle_undostat.html[Check Undo Retention of Oracle Instances]
* link:check_oracle_dataguard_stats.html[Check apply and transport lag of Oracle Data-Guard]
* link:check_oracle_rman.html[Check the RMAN Backup Status]
* link:check_oracle_sql.html[Custom SQLs for Oracle DBs]
* link:check_oracle_logswitches.html[Log switch activity of ORACLE database]
* link:check_oracle_sessions.html[Number of active sessions in ORACLE database]
* link:check_oracle_asm_diskgroup.html[ORACLE ASM Disk Groups]
* link:check_oracle_jobs.html[ORACLE Database Jobs]
* link:check_oracle_locks.html[ORACLE Database Locks]
* link:check_oracle_longactivesessions.html[ORACLE Database Long Active Sessions]
* link:check_oracle_processes.html[ORACLE Database Processes]
* link:check_oracle_recovery_area.html[ORACLE Database Recovery Area]
* link:check_oracle_rman_backups.html[ORACLE RMAN Backups]
* link:check_oracle_performance.html[ORACLE tablespaces: perfomance data]
* link:check_oracle_crs_res.html[Oracle Clusterware: Cluster Resources]
* link:check_oracle_crs_version.html[Oracle Clusterware: Version Information]
* link:check_oracle_crs_voting.html[Oracle Clusterware: Voting Check]
* link:check_oracle_instance.html[Oracle Database Instance]
* link:check_oracle_tablespaces.html[Various aspects of ORACLE tablespaces]
* link:check_oracle_version.html[Version of an ORACLE database checked by login]

To be able to monitor the databases only the plug-in is required in addition
to the agent on the database server. The Linux, AIX, Solaris,
HP-UX and Windows operating systems are currently supported.
No further additional software will be required for a monitoring,
either on the {CMK}-Instance or on the database server.

The following description is for an installation in Linux.
The procedure as described is also applicable to other Unix-like operating systems.
The fundamentals for an installation under Windows will be
covered link:monitoring_oracle.html#windows[below].
Likewise for an installation using the link:monitoring_oracle.html#bakery[Agent Bakery].


[#simple_config]
== Initial configuration


The monitoring of a simple local instance can be configured in just three steps.
Only the following prerequisites need to be satisfied:

*  The permission to create users in the database
*  You have system permissions for the server to be monitored

[#dbuser]
==== Creating users


The users are generated individually for each database -- thus the respective
instance must be set as an environment-variable before any login -- for example,
for the SID [.guihint]#MYINST1#:

{c-start}
{c-root}su - oracle
UP(oracle@linux):export ORACLE_SID=MYINST1
{c-end}

Next, log in to the instance, create a user for the monitoring and give it
the following permissions.
Our example user is called _check_mk_ -- in principle, however, the name doesn’t matter:

{c-start}
UP(sqlplus>):create user check_mk identified by myPassword;
UP(sqlplus>):grant select_catalog_role to check_mk;
UP(sqlplus>):grant create session to check_mk;
UP(sqlplus>):connect check_mk/myPassword
UP(sqlplus>):exit
{c-end}


==== Creating the configuration file

Next create the configuration file `mk_oracle.cfg` in
`/etc/check_mk`:

./etc/check_mk/mk_oracle.cfg
....
# Syntax:
# DBUSER='USERNAME:PASSWORD'
DBUSER='check_mk:mypassword'
....

Please ensure that the file can only be read by `root`,
and cannot be accessed by anyone else:

{c-start}
{c-root}chmod 600 /etc/check_mk/mk_oracle.cfg
{c-end}


==== Moving a script into the plug-in directory

The [.guihint]#mk_oracle# or [.guihint]#mk_oracle.aix# plug-ins are found in
`share/check_mk/agents/plugins/`.  If no direct access to the
monitoring server is possible, the file can also be alternatively accessed
via the web browser.  With this the directory can be reached directly
using the address line `myserver/mysite/check_mk/agents/plugins/`.

Select the correct version of the plug-in for your database server there.
The [.guihint]#mk_oracle.ps1# plug-in for a Windows server can be found in
`myHost/mySite/check_mk/agents/windows/plugins/`. Please note that
the [.guihint]#mk_oracle.bat# plug-in is obsolete and should no longer be used.

Save the plug-in to the database server in the
`/usr/lib/check_mk_agent/plugins/` directory, and ensure that the plug-in
is executable:

{c-start}
{c-root}cp mk_oracle /usr/lib/check_mk_agent/plugins/
{c-root}cd /usr/lib/check_mk_agent/plugins
{c-root}ls -lA
-rw-r--r-- 1 root root 49743 Jan 25 11:29 mk_oracle
{c-root}chmod +x mk_oracle
{c-root}ls -lA
-rwxr-xr-x 1 root root 49743 Jan 25 11:29 mk_oracle
{c-end}

In older versions of the {CMK} agent the plug-in directory can be in link:agent_linux.html#manualplugins[a different location].

Once these steps have been performed the installation will be complete, a
link:wato_hosts.html#services[Service Discovery] can be run in {CMK}, and the 
newly-identified services activated.
In this example the screenshot shows only a selection of services:

image::oracle_discovery.png[]


[#advanced_config]
== Advanced configurations


Depending on the application scenario, a number of further options are available
for configuring a monitoring of ORACLE databases. All of these options are also 
available in the link:monitoring_oracle.html#bakery[Agent Bakery]. The following options are available for configuring the users:

[cols="25,~"]
|===
|Parameter |Description 

|DBUSER |The access data for the database instance if the same login data has been configured for all, or respectively, as standard for not explicitly-defined SIDs.
|DBUSER_MYINST1 |Access data for the database instance MYINST1. The login data will only be used for the specified SID.
|ASMUSER |The access data for the Automatic Storage Management (ASM).
|===


You are free to specify whether to define the same user data for every database,
or to separately define individual logins.
Only one user can be nominated for the ASM. Roles, host and ports are optional
and and can be omitted. An `mk_oracle.cfg` can look like this:

./etc/check_mk/mk_oracle.cfg
....
# Syntax:
# DBUSER='myUser:mypassword:role:host:port'
DBUSER='check_mk:myPassword'
DBUSER_MYINST1='this_user:this_password:sysdba:localhost:1521'
DBUSER_MYINST2='that_user:that_password::localhost'
....

The following options are additionally available -- with their help,
among other functions it can be specified which data and the sequence
in which the data is to be retrieved:

[cols="25,~"]
|===
|Parameter |Description 

|ONLY_SIDS |Monitoring of only the SIDs specified here. All other instances will be ignored.
|EXCLUDE_MYINST1 |The instance MYINST1 will not be be included or only partially included. This can make sense if only a few SIDs should be excluded and the number of instances to be monitored is large, or if single sections in particular SIDs should not be queried. Possible values are [.guihint]#ALL# or the names of sections.
|SYNC_SECTIONS |Sections are all SQL-statements, or respectively, functions in the plug-in. This parameter determines which sections should be synchronously queried. If this parameter is not used the standard values will be used, as can be seen in the configuration example below. *Important:* if the sections have been manually set, all sections must be present in either [.guihint]#SYNC_SECTIONS# or [.guihint]#ASYNC_SECTIONS# --  otherwise they will *not* not be queried!
|ASYNC_SECTIONS |Sections to be asynchronously queried are specified here. The value will then be retained for a specified period. See [.guihint]#CACHE_MAXAGE#
|SYNC_ASM_SECTIONS |See [.guihint]#SYNC_SECTIONS#; Applies for ASM sections
|ASYNC_ASM_SECTIONS |See [.guihint]#ASYNC_SECTIONS#; Applies for ASM sections
|CACHE_MAXAGE |Overwrites the standard value for the retention time for the asynchrously-queried sections.
|===


Here is an example of how this can look in the `mk_oracle.cfg`:


./etc/check_mk/mk_oracle.cfg
....
# Syntax:
# Variable='Wert'


# Only exclude the two specified sections in the MYINST1 schema:
EXCLUDE_MYINST1='longactivesessions logswitches'


# Exclude all sections in the MYINST2 instance:


# Sections not specified here will *not* be retrieved:
SYNC_SECTIONS='instance performance processes sessions undostat'
ASYNC_SECTIONS='jobs resumable rman tablespaces ts_quotas'

....


[#remote_instances]
== Remote databases


With the `mk_oracle` plug-in, under Linux you can also access databases
running on another host.
The databases can even be assigned to another host in {CMK} (Piggyback). For the remote
access to function either a local Oracle installation must be present, or the following
prerequisites must be met:

* The [.guihint]#Linux AIO access library# is installed. This packet is called `libaio` under RHEL/CentOS.
* The link:https://www.oracle.com/database/technologies/instant-client.html[Instant Client for Oracle Database] is installed.
* SQLPlus is already present in the installation, or must be installed as an extension packet on the client where applicable.

Likewise, the plug-in can be installed on the host as described above.
So that the plug-in can connect to a remote database the access data must
be saved in the configuration file. This can be combined with the other
configuration options so that local and remote databases can be simultaneously
queried without problem.
The extended configuration can look like this example:

./etc/check_mk/mk_oracle.cfg
....
# Syntax:
# Variable='Wert'
# REMOTE_INSTANCE_[ID]='myUser:myPassword:role:host:port:piggybackhost:SID:version'

REMOTE_INSTANCE_1='check_mk:mypassword::myRemoteHost:1521:myOracleHost:MYINST3:11.2'
REMOTE_ORACLE_HOME='/usr/lib/oracle/11.2/client64'

REMOTE_INSTANCE_this='check_mk:mypassword::myRemoteHost:1521::MYINST1:11.2'
REMOTE_ORACLE_HOME='/usr/lib/oracle/11.2/client64'
....

In the above example queries for two remote instances have been configured.
The instance MYINST3 will then be allocated to the host [.guihint]#myOracleHost# in
{CMK} using a piggyback process. For this to function the name of the host
in {CMK} must be identical to that given in the configuration.
Be aware of upper and lower case here. By omitting this configuration component
the instance on the remote host will be queried, but its data will be assigned
to the host on which the plug-in is running.
This can be advantageous if you have access to the data, but due to deficiencies
in the general access possibilities the host is not actually installed in {CMK}.

As you can see, the configuration is otherwise very similar to a normal query.
You provide a user name and password, configure the port and the user’s role if
necessary, and specify the host name on which the database is running.
Additionally, here you only need to enter the instance’s SID and the version of
the database on which the instance is located.

The information `REMOTE_ORACLE_HOME` will then be specified if the
querying server does not have a local Oracle-installation and only uses that
of the client. In such a case there is unfortunately no other possibility for
accessing this path.
In the example the regular path for the client has been specified.

*Important:* The SIDs are only permitted to appear once if they simultaneously
query local and remote instances and allocate them to the same host!


== Special features of cluster-instances

=== Standby-databases without Data Guard


To monitor Standby-Instances which do not use _Active Data Guard_, the user
which retrieves the monitoring data requires the SYSDBA-role.
Through this permission the user is then in the position of being able to retrieve
at least a part of the data should the primary instance fail and the database has
not yet been switched from _MOUNTED_ to _OPEN_ on the standby-server.
You can assign this permission, among others, when creating the users as described
above, using the following command:

{c-start}
UP(sqlplus>):grant sysdba to check_mk;
{c-end}


So that in the case of a failure situation the data can be retrieved from the
standby-server, the user will be created on the primary instance and the password
file then copied to the standby-server. Then, in the `mk_oracle.cfg`
configuration file set the user’s role likewise to SYSDBA:

./etc/check_mk/mk_oracle.cfg
....
DBUSER='check_mk:myPassword:sysdba:localhost:1521'
....


As always, the host name and port can be omitted if a local instance with the
standard port is being configured. Note that the plug-in with its configuration
file must also be configured on the standby-server so that the data can also be
retrieved from there if necessary.

The following services require a configuration as [.guihint]#Clustered Services#:

* ORA .* RMAN Backup
* ORA .* Job
* ORA .* Tablespace


*Important:* The SYSDBA-role is equivalent to root-access.
Therefore, a sufficiently secure password is highly recommended!

=== Real Application Cluster (RAC)


In an RAC it is enough to create the user only once since it will be saved
to the shared database. The plug-in with its configuration file must however
be link:monitoring_oracle.html#simple_config[installed] on every node.


For the monitoring, the SCAN Listeners should not be used as Hosts in {CMK},
rather the nodes themselves should be used. Only then can it be ensured that
an access over the plug-in will function.

Here as well there are services which must be configured as [.guihint]#Clustered Services#:

* ASM Diskgroup .*
* ORA .* Recovery Area
* ORA .* RMAN Backup
* ORA .* Job
* ORA .* Tablespace


[#wallet]
== Using the ORACLE Wallet


The user data was formerly always stored in the plug-in’s configuration file.
Not least this had the disadvantage that the data was stored unencrypted -- not
only in {CMK}, but also on the database server.
Even if the permissions for the configuration file on the database server had
been appropriately defined, the access data had nevertheless left the server
and could be found on the {CMK}-Server.


In order to address this problem, Oracle provides the ‘Wallet’, in which the access
data can be stored in an encrypted format. {CMK} can use this wallet,
so that this access data no longer needs to be made known in the configuration file,
and generally only needs to made known to the database administrator.
For this first wallet you or the nominated database administrator will need to the create
a wallet on the database server:

{c-start}
{c-root}mkstore -wrl /etc/check_mk/oracle_wallet -create
{c-end}


The plug-in will later always access this file if a connection to an instance
needs to be created. So that the required user data can also be found,
as a one-off action this data must be entered into the wallet.
In the following example we are adding a user for the instance MYINST1:

{c-start}
{c-root}mkstore -wrl /etc/check_mk/oracle_wallet -createCredential MYINST1 check_mk myPassword
{c-end}


To finish, the `sqlnet.ora` file must be created. Be certain to set the
`SQLNET.WALLET_OVERRIDE` parameter to `TRUE`:

./etc/check_mk/sqlnet.ora
....
LOG_DIRECTORY_CLIENT = /var/log/check_mk/oracle_client
DIAG_ADR_ENABLED = OFF

SQLNET.WALLET_OVERRIDE = TRUE
WALLET_LOCATION =
 (SOURCE=
   (METHOD = FILE)
   (METHOD_DATA = (DIRECTORY=/etc/check_mk/oracle_wallet))
 )
....


So that the connections can also be resolved the SIDs must be stored as an
alias in `tnsnames.ora`. Examples for a configuration can be found
in link:monitoring_oracle.html#files[{CMK}], and in your Oracle installation.
The configuration can look like this, for example:


./etc/check_mk/tnsnames.ora
....
MYINST1
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = MYINST1)
    )
  )
....


There will be no further need to save access data in `mk_oracle.cfg` and
you can simply enter a leading slash (/), and possibly the user role:

./etc/check_mk/mk_oracle.cfg
....
DBUSER='/::::'
ASMUSER='/::SYSASM::
....


The monitoring user’s access data will now administered entirely from the database
server, and no longer from the monitoring server.
Further access data can also be added to the wallet at a later date.


[#bakery]
== Using the Agent Bakery for a configuration

=== Initial setup


image::CME.png[float=left,width=60]

Under Linux, AIX and Solaris, with the
link:wato_monitoringagents.html#bakery[Agent Bakery] a configuration will be greatly simplified,
since syntax errors in the configuration files can be avoided, and 
adaptations to changing environmental conditions can be done simply.
The basic difference from a manual installation is that it is then only
necessary to work in the ORACLE host’s command line if a special,
ORACLE-specific configuration is required. The Bakery currently has no
facility for configuring a monitoring of ORACLE under Windows.


For the first installation it is sufficient if the
link:monitoring_oracle.html#dbuser[Database user] is created on the ORACLE host,
and an appropriate rule created in the Bakery.
The rule set can be found in [.guihint]#WATO|Monitoring Agents|Rules#. By entering
‘`oracle`’ in the search field the rule set can also be searched-for:

image::monitoring_oracle_bakery.png[]


If the same user has been created for all of the instances the [.guihint]#Login Defaults#
can be used. Otherwise use the [.guihint]#Login for selected databases# option,
and enter the instance’s SID in addition to the login data:

image::monitoring_oracle_login.png[]



For the [.guihint]#Authentication Method# there is a choice between the standard entry
of a username/password, or the link:monitoring_oracle.html#wallet[ORACLE Wallet].
With the latter no futher configuration is needed since everything has
already been stored in the wallet.


The other fields are optional for the login. Here the role can be set as sysdba,
and a specific hostname and port defined.


The entry mask for logins always has basically the same structure,
or at least one very similar, so that one only needs to use the entry procedure
once for it to become familar.


Once the rule has been saved and the the agents actualised on the ORACLE server,
the link:monitoring_oracle.html#simple_config[initial setup] as described at the beginning
of this section has been completed.


=== Further options


In the Agent Bakery there is also the possibility of fine-tuning the ORACLE
instances’ monitoring.
The options in the link:monitoring_oracle.html#advanced_config[extended configuration]
are also available for this purpose. Note that the sections to be retrieved must
be defined fundamentally with a one-off action using the
[.guihint]#Sections -- data to collect# option. If this option is not activated {CMK}
will use the plug-in’s default.


You will then be able to exclude individual sections for specific instances
with the [.guihint]#Exclude some sections on certain instances# option.

image::monitoring_oracle_exclude.png[]


A link:monitoring_oracle.html#remote_instances[remote instances] monitoring can also
be configured with the Agent Bakery. Here again is the first example from
link:monitoring_oracle.html#remote_instances[above]. In the example we have used ‘1’ as
the parameter ID. So that we can illustrate it here,
the [.guihint]#Unique ID# must be appropriately adapted:

image::monitoring_oracle_remote.png[]


Every removed instance must receive an explicit ID.
The host on which the data will be displayed in {CMK} can also be specified.
In this case the [.guihint]#Unique ID# will be altered to [.guihint]#Use monitoring host name#, and
the host name entered into the [.guihint]#Monitoring host this database should be mapped to#
option. Otherwise this field can remain blank.


[#windows]
== Configuration in Windows



A detailed description will follow shortly. For this reason, we provide only basic information here. The plug-in and the configuration file are stored under the path where you installed the agent. In the example, this is the default path. You can find information about the contents of the configuration file in the script itself. Note that the paths in the old agent are slightly different. The table therefore shows the paths for the Windows agent as it is from Version VERSION[1.6.0] (standard), and for the old agent (legacy):



Windows usually prevents the execution of scripts that have not
been signed. You can now easily work around this problem by
modifying the guidelines for executing Powershell scripts for the user
that runs the checkmk agent:


{c-start}
UP(C:\Program Files (x86)\check_mk\>):Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine
UP(C:\Program Files (x86)\check_mk\>):Get-ExecutionPolicy -Scope LocalMachine
Bypass
{c-end}

This option is useful if you want to test a script or the general functionality of the checkmk agent. In order not to jeopardize the security of your system, it is better for production servers to just add the scripts to the exceptions belonging to the agent. The output from the second command is abreviated for clarity in this example:

{c-start}
UP(C:\Program Files (x86)\check_mk\>):Get-ExecutionPolicy -Scope LocalMachine
RemoteSigned
UP(C:\Program Files (x86)\check_mk\>):Unblock-File -Path .\plugins\mk_oracle.ps1
<<<oracle_instance>>>
<<<oracle_sessions>>>
<<<oracle_logswitches>>>
<<<oracle_undostat>>>
{c-end}

Make sure that the configuration script is also added to the exceptions.

*Important:* It is currently not possible to perform a configuration
for Windows using the Agent Bakery.


== Diagnostic possibilities


To test whether a configuration on an ORACLE host is correct, the plug-in can be
invoked with the `-t` option. First therefore, the path to the console
session’s configuration files must be known:

{c-start}
{c-root}export MK_CONFDIR="/etc/check_mk/"
{c-root}/usr/lib/check_mk_agent/plugins/mk_oracle -t
{c-end}

Note that the file path for the plug-in can differ under some circumstances.
How the path for the plug-ins can be identified was explained earlier in
link:monitoring_oracle.html#install_plugin[Installing plug-ins]. The output from a
successful connection will look something like this:

{c-start}
<<<oracle_instance>>>
<<<oracle_sessions>>>
<<<oracle_logswitches>>>
<<<oracle_undostat>>>
<<<oracle_recovery_area>>>
<<<oracle_processes>>>
<<<oracle_recovery_status>>>
<<<oracle_longactivesessions>>>
<<<oracle_dataguard_stats>>>
<<<oracle_performance>>>
<<<oracle_tablespaces>>>
<<<oracle_rman>>>
<<<oracle_jobs>>>
<<<oracle_ts_quotas>>>
<<<oracle_resumable>>>
<<<oracle_locks>>>
<<<oracle_instance>>>
<<<oracle_asm_diskgroup>>>
-----------------------------------------------
Logincheck to Instance: +ASM  Version: 12.1
Login ok User: SYS on ora12c.local
SYNC_SECTIONS= instance
ASYNC_SECTIONS= asm_diskgroup
-----------------------------------------------
Logincheck to Instance: MYINST1  Version: 12.1
Login ok User: CHECK_MK on ora12c.local
SYNC_SECTIONS= instance sessions logswitches undostat recovery_area processes recovery_status longactivesessions dataguard_stats performance
ASYNC_SECTIONS= tablespaces rman jobs ts_quotas resumable locks
{c-end}


If the connection has not been successful, its output will show the problem.
An unsuccessful login could be due to an incorrect syntax
in `mk_oracle.cfg`, for example. Here it is especially important to
code a colon ( : ) between the individual parameters.

The login can also be tested by logging in to the Host in ORACLE with the
configured user. If this is successful, also check that the appropriate
permissions have been defined. Note that the user name is coded with
capitals in the SQL query:

{c-start}
{c-root}export ORACLE_SID=MYINST1
{c-root}sqlplus check_mk
UP(sqlplus>):select * from user_role_privs where username='CHECK_MK'

USERNAME                       GRANTED_ROLE                   ADM DEF OS_
------------------------------ ------------------------------ --- --- ---
CHECK_MK                       SELECT_CATALOG_ROLE            NO  YES NO

UP(sqlplus):select * from user_sys_privs where username='CHECK_MK'

USERNAME                       PRIVILEGE                                ADM
------------------------------ ---------------------------------------- ---
CHECK_MK                       CREATE SESSION                           NO
{c-end}


For debugging it is generally very useful to start first with the simplest
possible configuration for the ORACLE monitoring, and then to increase the
complexity step by step. In this way it can be quickly identified up to what point 
the configuration works, and then which change caused it to fail. 
Also make careful use of the configuration examples for this purpose. 
The path can be found in the following chapter.


[#files]
== Files and directories

=== On the ORACLE host

[cols="55,~"]
|===
|Path |Function 

|/usr/bin/check_mk_agent |The agent that collects all data for the host.
|/usr/lib/check_mk/plugins/ |The standard directory in which the plug-ins are stored.
|/etc/check_mk/oracle.cfg |The configuration file for the plug-in.
|/etc/check_mk/sqlnet.ora |The configuration file required for the ORACLE wallet.
|tnsnames.ora |The configuration file which defines an alias for a schema. Example files are also found in the ORACLE installation, but since the actual path depends on the installation there is no simple standard version.
|===


=== On the {CMK} Server

[cols="55,~"]
|===
|Path |Function 

|share/check_mk/agents/plugins/cfg_examples/ |Here can be found examples of the configuration files required on the ORACLE host.
|share/check_mk/agents/plugins/mk_oracle |The plug-in that retrieves the data on the ORACLE host.
|share/check_mk/agents/plugins/mk_oracle_asm |The ASM instance can be monitored with this plug-in.
|share/check_mk/agents/plugins/mk_oracle_crs |This plug-in provides data for an ORACLE Cluster Manager.
|===


//TI:Oracle-Datenbanken überwachen
//DT:draft
//SA:agent_linux,wato_monitoringagents,check_plugins_catalog
//MT:Oracle Datenbanken effizient überwachen
//MD:Mit dem Plugin fÜr Windows, Linux, Solaris und AIX überwachen Sie vollumfänglich Oracle-Datenbanken. Details zur Konfiguration erfahren Sie hier.
//
//
//H1:Einleitung
//
//{CMK} bietet Ihnen umfangreiche Möglichkeiten, Oracle-Datenbanken
//zu überwachen. So können Sie mit dem Plugin nicht nur Tablespaces
//oder die aktiven Sitzungen einer Datenbank abrufen, sondern
//zusätzlich noch viele andere Metriken. Eine vollständige
//Liste der Überwachungsmöglichkeiten können Sie in unserem
//link:check_plugins_catalog.html[Katalog der Check-Plugins] nachlesen. Wir erweitern
//dieses Plugin regelmäßig, so dass sich ein Blick in den Katalog immer
//wieder lohnt. Unter anderem kann {CMK} die folgenden Werte überwachen (einige
//der Plugins erst ab Version VERSION[1.6.0]):
//
//LI:link:check_oracle_recovery_status.html[Check Checkpoint and user managed Backup state of datafiles]
//LI:link:check_oracle_undostat.html[Check Undo Retention of Oracle Instances]
//LI:link:check_oracle_dataguard_stats.html[Check apply and transport lag of Oracle Data-Guard]
//LI:link:check_oracle_rman.html[Check the RMAN Backup Status]
//LI:link:check_oracle_sql.html[Custom SQLs for Oracle DBs]
//LI:link:check_oracle_logswitches.html[Log switch activity of ORACLE database]
//LI:link:check_oracle_sessions.html[Number of active sessions in ORACLE database]
//LI:link:check_oracle_asm_diskgroup.html[ORACLE ASM Disk Groups]
//LI:link:check_oracle_jobs.html[ORACLE Database Jobs]
//LI:link:check_oracle_locks.html[ORACLE Database Locks]
//LI:link:check_oracle_longactivesessions.html[ORACLE Database Long Active Sessions]
//LI:link:check_oracle_processes.html[ORACLE Database Processes]
//LI:link:check_oracle_recovery_area.html[ORACLE Database Recovery Area]
//LI:link:check_oracle_rman_backups.html[ORACLE RMAN Backups]
//LI:link:check_oracle_performance.html[ORACLE tablespaces: perfomance data]
//LI:link:check_oracle_crs_res.html[Oracle Clusterware: Cluster Resources]
//LI:link:check_oracle_crs_version.html[Oracle Clusterware: Version Information]
//LI:link:check_oracle_crs_voting.html[Oracle Clusterware: Voting Check]
//LI:link:check_oracle_instance.html[Oracle Database Instance]
//LI:link:check_oracle_tablespaces.html[Various aspects of ORACLE tablespaces]
//LI:link:check_oracle_version.html[Version of an ORACLE database checked by login]
//
//Um die Datenbanken überwachen zu können, brauchen Sie lediglich das
//Plugin zusätzlich zu dem Agenten auf dem Datenbankserver. Unterstützt
//werden dafür zur Zeit die Betriebssysteme Linux, AIX, Solaris, HP-UX und
//Windows. Zusätzliche Software wird weder auf der {CMK}-Instanz noch auf
//dem Datenbankserver für eine Überwachung benötigt.
//
//Viele Schritte, um die ÜBerwachung einzurichten sind zwischen Linux und
//Windows gleich. Aus diesem Grund werden zunächst die allgemeinen Schritte
//beschrieben und danach die spezifischen für Windows und Linux. Bitte beachten
//Sie, dass die Einrichtung mittels der link:monitoring_oracle.html#bakery[Agent Bakery]
//derzeit nur für Linux, Solaris und AIX zur Verfügung steht.
//
//
//H1:Allgemeine Schritte zur ersten Einrichtung#first_steps
//
//H2:Benutzer anlegen
//
//Prinzipiell ist die erste Einrichtung schnell und in nur drei Schritten
//erledigt. Der erste Schritt dabei ist es natürlich, dass es einen
//Benutzer gibt, welcher die Datenbanken auch abfragen darf. Sofern Sie
//keine link:monitoring_oracle.html#rac[RAC] nutzen, legen Sie dafür auf jeder
//zu überwachenden Datenbank einen Benutzer an. Wie Sie sich auf eine
//Instanz einloggen, unterscheidet sich je nachdem, welches Betriebssystem
//Sie einsetzen. Für Linux Sie können das zum Beispiel erledigen, indem Sie
//zuerst immer die jeweilige Instanz als Umbegungsvariable setzen, für die ein
//Benutzer angelegt werden soll. Normalerweise wechselt man dafür zuvor auf
//den `oracle`-Benutzer. Das kann sich aber je nach Setup unterscheiden:
//
//C+:
//RP:su - oracle
//UP(oracle@myhost):export ORACLE_SID=MYINST1
//C-:
//
//Danach loggen Sie sich auf die Instanz ein und legen einen Benutzer für das
//Monitoring an. Um an alle Daten zu kommen, werden auch die nachfolgenden
//Berechtigungen benötigt. In dem nachfolgendem Beispiel heißt der neu
//angelegte Benutzer `checkmk`. Sie können auch jeden anderen Namen
//wählen:
//
//C+:
//UP(sqlplus>):create user checkmk identified by myPassword;
//UP(sqlplus>):grant select_catalog_role to checkmk;
//UP(sqlplus>):grant create session to checkmk;
//UP(sqlplus>):connect checkmk/myPassword
//UP(sqlplus>):exit
//C-:
//
//Wie der Login auf eine bestimmte Instanz genau funktioniert, können Sie in
//der Dokumentation seitens Oracle erfahren.
//
//
//H3:Multitenant Datenbanken
//
//Man kann auch den Login für Multitenant Datenbanken konfigurieren. Das
//wird normalerweise mit einem speziellen Benutzer und in der config mit dem
//Präfix `C##` getan.
//
//
//H2:Konfigurationsdatei und Benutzer anlegen#user_config
//
//Nachdem Sie einen Benutzer angelegt haben, sorgen Sie als zweites
//dafür, dass das Agenten-Plugin später diese Informationen auch
//bekommt. Die einfachste Möglichkeit ist es dann, wenn Sie für alle
//Instanzen die gleichen Login-Daten gesetzt haben und einen Standard in der
//Konfiguration setzen können. Legen Sie also nun auf dem Oracle-Host eine
//Konfigurationsdatei für link:monitoring_oracle.html#linux[Linux, AIX, Solaris] oder
//für link:monitoring_oracle.html#windows[Windows] an. In dem folgenden Beispiel sehen
//Sie die Datei für die unixoiden Systeme:
//
//F+:/etc/check_mk/mk_oracle.cfg
//# Syntax:
//# DBUSER='USERNAME:PASSWORD'
//DBUSER='checkmk:myPassword'
//F-:
//
//Für Windows sieht das sehr ähnlich aus. Hier setzen Sie die Variable in
//einem Powershell-Skript:
//
//F+:C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
//# Syntax:
//# $DBUSER = @("USERNAME","PASSWORD")
//$DBUSER = @("checkmk","myPassword")
//F-:
//
//Der Standardbenutzer ist das einzige, was das Plugin zwingend benötigt. Alle
//anderen Optionen, die Sie unter link:monitoring_oracle.html#adv_linux[unixoiden Systemen]
//oder unter link:monitoring_oracle.html#adv_windows[Windows] verwenden können,
//sind optional.
//
//
//H2:Skript und Konfiguration auf den Host bringen
//
//Nachdem Sie nun also einen Benutzer angelegt und diesen in der
//Konfigurationsdatei hinterlegt haben, bringen Sie noch das Plugin in
//das richtige Verzeichnis des Agenten. Wie der Pfad für Agentenplugins
//korrekt lautet, wird in den Artikel zu link:agent_linux.html#plugins[Linux] und
//link:agent_windows.html#plugins[Windows] beschrieben. Für Solaris und AIX können
//Sie in der Regel den gleichen Pfad nutzen, wie unter Linux.  Achten Sie unter
//Linux (und auch unter AIX oder Solaris) darauf, dass das Plugin ausführbar
//ist und korrigieren Sie das gegebenenfalls:
//
//C+:
//RP:cd /usr/lib/check_mk_agent/plugins/
//RP:ls -lA
//-rw-r--r-- 1 root root 120808 Jan 25 11:29 mk_oracle
//RP:chmod +x mk_oracle
//RP:ls -lA
//-rwxr-xr-x 1 root root 120808 Jan 25 11:29 mk_oracle
//C-:
//
//
//H2:Nutzung der Oracle-Wallet
//
//Alternativ dazu, den Benutzer direkt und mit Passwort in einer
//Konfigurationsdatei anzugeben, können Sie auch die _Oracle Wallet_
//nutzen. Das hat den Vorteil, dass sie nicht mehr die Zugangsdaten
//unverschlüsselt sowohl auf dem {CMK}-Server, als auch auf dem Oracle-Host
//ablegen müssen. Denn selbst. wenn Sie die Rechte der Konfigurationsdatei
//auf dem Oracle-Host entsprechend angepasst haben, haben die Zugangsdaten
//dennoch den Server verlassen und befinden sich auf dem {CMK}-Server.
//
//Die _Oracle Wallet_ wiederum legt die Zugangsdaten verschlüsselt
//auf dem zu überwachenden Host ab, so dass sie nur benutzt werden können,
//aber keine Logindaten explizit bekannt gemacht werden müssen. {CMK} kann
//diese Wallet also nutzen, so dass die Zugangsdaten prinzipiell nur dem
//Datenbankadministrator (DBA) bekannt sein müssen. Legen Sie -- oder der
//DBA -- dazu eine Wallet auf dem entsprechenden Server an:
//
//C+:
//RP:mkstore -wrl /etc/check_mk/oracle_wallet -create
//C-:
//
//Auf diese Datei wird das Plugin später immer dann zugreifen, wenn eine
//Verbindung zu einer Instanz hergestellt werden soll. Damit die nötigen
//Bentuzerdaten auch gefunden werden, müssen Sie diese einmalig in der
//Wallet eintragen. In dem folgenden Beispiel fügen wir also den Benutzer
//`checkmk` für die Instanz `MYINST1` hinzu:
//
//C+:
//RP:mkstore -wrl /etc/check_mk/oracle_wallet -createCredential MYINST1 check_mk myPassword
//C-:
//
//Damit das Plugin weiß, wo es nach der Wallet suchen muss, muss es
//zwei Dateien finden. Die erste Datei ist die `sqlnet.ora` in
//welcher hinterlegt wird, wo die Wallet zu finden ist. Die zweite Datei --
//`tnsnames.ora` bestimmt die Adresse der Instanz und kann diese dann
//auch über seinen Alias ansprechen. Damit das Agenten-Plugin diese Dateien
//findet, können Sie entweder den Pfad unter Linux, Solaris und AIX über
//die link:monitoring_oracle.html#tns_config[erweiterte Variable `TNSALIAS`]
//setzen. Das ist vor allem dann von Vorteil, wenn die Dateien bereits
//existieren. Alternativ und können Sie sie auch explizit anlegen. Unter
//Windows ist es sogar erforderliche, dass sie diese manuell bestimmen.
//
//Legen Sie zunächst die Datei `sqlnet.ora` an. In dieser Datei sucht
//das Plugin alternativ nach den Zugangsdaten, so dass hier also der korrekte
//Pfad zu der eben erstellten Wallet-Datei angegeben werden muss. Achten
//Sie dabei darauf, dass Sie den Parameter `SQLNET.WALLET_OVERRIDE`
//auf `TRUE` setzen:
//
//F+:/etc/check_mk/sqlnet.ora
//LOG_DIRECTORY_CLIENT = /var/log/check_mk/oracle_client
//DIAG_ADR_ENABLED = OFF
//
//SQLNET.WALLET_OVERRIDE = TRUE
//WALLET_LOCATION =
// (SOURCE=
//   (METHOD = FILE)
//   (METHOD_DATA = (DIRECTORY=/etc/check_mk/oracle_wallet))
// )
//F-:
//
//Jetzt weiß das Plugin, welche Zugangsdaten benutzt werden sollen. Damit
//es auch die korrekte Adresse ansteuert, legen als zweite Datei die
//`tnsnames.ora` an. Beispiele zu einer Konfiguration finden Sie auf dem
//link:monitoring_oracle.html#files_cmk[{CMK}-Server] und auch auf dem Oracle-Host. Die genaue Syntax können Sie der Dokumentation seitens Oracle entnehmen, aber als Beispiel könnte die Datei so aussehen:
//
//F+:/etc/check_mk/tnsnames.ora
//MYINST1
//  (DESCRIPTION =
//    (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))
//    (CONNECT_DATA =
//      (SERVER = DEDICATED)
//      (SERVICE_NAME = MYINST1_ALIAS)
//    )
//  )
//F-:
//
//Mit diesem letzten Schritt haben Sie die Voraussetzungen geschaffen,
//um die Zugangsdaten aus der Konfigurationsdatei des Agenten-Plugins
//herauszunehmen. Stattdessen tragen Sie lediglich noch ein `/`
//(Schrägstrich) ein:
//
//F+:/etc/check_mk/mk_oracle.config
//DBUSER='/:'
//F-:
//
//Sie können natürlich zu einem späteren Zeitpunkt weiteren Zugangsdaten
//der Wallet hinzufügen. Lediglich die Datei `tnsnames.ora` muss dann
//gegebenenfalls erweitert werden.
//
//
//H1:Linux, AIX, Solaris#linux
//
//H2:Plugin- und Konfigurationspfade
//
//Unter unixoiden Systemen verwendet {CMK} ein einheitliches Plugin. Das
//reduziert zum einen den Aufwand der Pflege, da SQLs nicht dupliziert werden
//müssen und zum anderen, dass Sie nur ein einziges Plugin zu beachten
//haben. Auf allen unterstützten Systemen sind die Pfade für die Agenten
//gleich oder sehr ähnlich. Konkret benötigen Sie die folgenden Verzeichnisse,
//wenn Sie diese nicht verändert haben:
//
//<table>
//
//<tr>
//<th style="width:25%">OS</th>
//<th>Plugin-Pfad</th>
//<th>Konfigurationspfad</th>
//</tr>
//
//<tr>
//<td>Linux, Solaris, HP-UX</td>
//<td>/usr/lib/check_mk_agent/plugins/</td>
//<td>/etc/check_mk/</td>
//</tr>
//
//<tr>
//<td>AIX</td>
//<td>/usr/check_mk/lib/plugins/</td>
//<td>/usr/check_mk/conf/</td>
//</tr>
//
//
//
//H2:Erweiterte Optionen#adv_linux
//
//In link:monitoring_oracle.html#first_steps[allgemeinen Einrichtung] haben Sie
//bereits erste Variablen kennengelernt, um Überwachungsdaten von ihren
//Oracle-Instanzen zu bekommen. Je nach Anwendungszenario werden Sie aber
//schnell weitere Möglichkeiten benötigen, um die Überwachung besser und
//individuell pro Instanz steuern zu können.
//
//
//AN:adv_user_linux
//H3:Erweiterte Benutzerkonfiguration
//
//Mit dem Standardlogin können Sie reguläre oder vielleicht sogar alle
//Instanzen einer Datenbank abfragen. Es gibt jedoch Sonderfälle, in denen
//Sie für einzelne Instanzen individuelle Zugangsdaten benötigen. Bei
//der Konfigurationsdatei haben Sie daher die folgenden drei Möglichkeiten
//Benutzer anzugeben:
//
//<table>
//
//<tr>
//<th style="width: 25%">Parameter</th>
//<th>Beschreibung</th>
//</tr>
//
//<tr>
//<td class=tt>DBUSER</td>
//<td>Der Standard, wenn keine individuellen Zugangsdaten für die
//Datenbankinstanz definiert sind.</td>
//</tr>
//
//<tr>
//<td class=tt>DBUSER_MYINST1</td>
//<td>Zugangsdaten für eine ganz bestimmte Datenbankinstanz. In diesem Fall
//für die Instanz `MYINST1`. Die Logindaten werden nur für diese
//SID benutzt.</td>
//</tr>
//
//<tr>
//<td class=tt>ASMUSER</td>
//<td>Spezielle Zugangsdaten für das Automatic Storage Management (ASM).</td>
//</tr>
//
//
//*Wichtig*: Für eine _ASM_ kann immer nur ein Login angegeben werden.
//
//Zusätzlich erlauben diese Variablen noch mehr Optionen, außer Benutzername
//und Passwort. Sie können auch bestimmen, ob es sich bei dem Benutzer um
//einen _SYSDBA_ oder _SYSASM_ handelt, auf welcher Kombination von
//Adresse und Port die Instanz lauscht und sogar, welcher _TNSALIAS_
//benutzt werden soll. Diese Angaben sind aber immer optional und -- im
//Gegensatz zu Benutzer und Passwort -- optional. Zusätzlich zu dem obigen
//Beispiel kann also eine Konfiguration dann so aussehen:
//
//F+:/etc/check_mk/mk_oracle.cfg
//# Syntax
//# DBUSER='USERNAME:PASSWORD:ROLE:HOST:PORT:TNSALIAS'
//DBUSER='checkmk:myPassword'
//
//DBUSER_MYINST1='cmk_specific1:myPassword1:SYSDBA:localhost:1521'
//DBUSER_MYINST2='cmk_specific2:myPassword2::localhost::INST2'
//
//ASMUSER='cmk_asm:myASMPassword:SYSASM'
//F-:
//
//Ein paar Erläuterungen zu dem Beispiel:
//
//LI:Sie können beliebig viele individuelle Zugangsdaten definieren. Diese werden immer dem Standard bevorzugt.
//LI:Jede Option wird von den anderen durch ein _:_ (Doppelpunkt) voneinander getrennt.
//LI:Wird ein optionales Feld mittendrin ausgelassen, muss der Doppelpunkt geschrieben werden. Siehe `DBUSER_MYINST2`, bei dem keine spezielle Rolle angegeben wurde.
//LI:Werden -- ab einem bestimmten Punkt keine optionalen Felder mehr gebraucht, können Sie die Doppelpunkte weglassen. Siehe `ASMUSER`, bei dem weder der Host, noch der Port angegeben wurde.
//
//
//AN:skip_include
//H3:Instanzen ein- oder ausschließen
//
//In manchen Fällen wollen Sie Instanzen nicht in die Überwachung mit einbeziehen. Das kann zum Beispiel sein, weil es nur eine Spielwiese für Entwickler ist oder aus anderen Gründen. Um die Konfiguration im Einzelfall möglichst einfach zu machen, haben Sie verschiedene Möglichkeiten, um eine oder mehrere Instanzen ganz oder teilweise auszuschließen:
//
//<table>
//
//<tr>
//<th style="width: 25%">Parameter</th>
//<th>Beschreibung</th>
//</tr>
//
//<tr>
//<td class=tt>ONLY_SIDS</td>
//<td>Hier kann bestimmt werden, welche Instanzen überwacht werden sollen. Alle anderen werden dann ignoriert. Natürlich werden die Instanzen weiterhin auch nur dann überwacht, wenn sie auch von dem Plugin gefunden werden. Die Option eignet sich also sehr gut, wenn die Menge der zu überwachenden Instanzen kleiner ist, als die Anzahl derer, die ignoriert werden sollen.
//</td>
//</tr>
//
//<tr>
//<td class=tt>SKIP_SIDS</td>
//<td>Alle Instanzen, die hier mit Leerzeichen separiert übergeben werden, werden komplett ignoriert und nicht überwacht. Diese Option eignet sich sehr gut, wenn die Anzahl der zu ignorierenden Instanzen kleiner ist, als diejenige, die überwacht werden soll.
//</td>
//</tr>
//
//<tr>
//<td class=tt>EXCLUDE__{SID}_</td>
//<td>Mit dieser Option können Sie Instanzen teilweise ausschließen. Zwar können Sie auch hier mit dem Wert `ALL` alle Sektionen ausschließen und daher dasselbe erreichen, als würden Sie sie zu `SKIP_SIDS` hinzufügen. Allerdings können Sie auch nur bestimmte Sektionen für bestimmte Instanzen abschalten und so nur eine Submenge des Möglichen überwachen. *Wichtig*: Eine ASM (`+ASM`) kann mit dieser Option nicht komplett abschalten.
//</td>
//</tr>
//
//
//Sie werden es schon ahnen: Die Reihenfolge der Verarbeitung dieser
//Optionen bestimmt das Ergebnis. Tatsächlich werden die Angaben auch
//genau in der Reihenfolge _pro Instanz_ verarbeitet, wie sie oben
//angegeben sind. Wenn also die Variable `ONLY_SIDS` gesetzt ist, wird
//`SKIP_SIDS` gar nicht mehr ausgewertet und auch nicht mehr, ob eine
//Angabe der Variable `EXCLUDE_` auf `ALL` für diese Instanz
//gibt. Ist `ONLY_SIDS` nicht gesetzt, geht es dann entsprechend der
//Reihenfolge weiter. Im Zweifel -- also als Standardverhalten -- wird die
//Instanz entsprechend dann auch überwacht.
//
//Nachfolgend ein Beispiel, bei dem alle Variablen gesetzt sind und wie das Verhalten ist:
//
//F+:/etc/check_mk/mk_oracle.cfg
//ONLY_SIDS='INST1 INST2 INST5'
//SKIP_SIDS='INST7 INST3 INST2'
//EXCLUDE_INST1='ALL'
//EXCLUDE_INST2='tablespaces rman'
//F-:
//
//Da die positive Liste aus der ersten Zeile immer bevorzugt wird, werden
//entsprechend auch die zweite und dritte Zeile nicht mehr ausgewertet. Lediglich
//die vierte (=letzte) Zeile wird zu einem späteren Zeitpunkt berücksicht,
//da hier die Instanz nur teilweise ausgewertet werden soll.
//
//In der Praxis ist es also nur sinnvoll, _eine_ der Variablen zu nutzen,
//um die Menge der zu überwachenden Instanzen zu bestimmen.
//
//
//AN:sections
//H3:Zu holende Daten bestimmen
//
//Wie Sie im vorherigen Abschnitt gelernt haben, ist nicht nur möglich
//Instanzen komplett abzuschalten, sondern diese vielmehr auch nur
//teilweise zu überwachen. Auch sind die Einsatzzwecke vielfältig und vor
//allem dann sinnvoll, wenn sie bestimmte, lang laufende Sektionen nicht
//überall berücksichtigen wollen oder auf Testinstanzen nur grundlegende
//Informationen haben wollen. Um Sektionen global einzuschränken, setzen
//Sie die entsprechenden Variablen direkt - um nur bestimmte Instanzen
//einzuschränken, können Sie die Variable `EXCLUDE__{SID}_` nuten,
//die Sie in dem link:monitoring_oracle.html#skip_include[vorherigen Abschnitt] bereits
//kennengelernt haben. Die globalen Variablen sind:
//
//<table>
//
//<tr>
//<th style="width: 25%">Parameter</th>
//<th>Beschreibung</th>
//</tr>
//
//<tr>
//<td class=tt>SYNC_SECTIONS</td>
//<td>Sektionen, die synchron -- das heißt bei jedem Lauf des Agenten -- abgefragt werden sollen. Da das Abfrageintervall im Standard bei 60 Sekunden liegt, müssen die benutzten SQLs entsprechend schnell durchlaufen. Wird die Variable nicht angegeben, werden alle Sektionen abgefragt.
//</td>
//</tr>
//
//<tr>
//<td class=tt>ASYNC_SECTIONS</td>
//<td>Sektionen, die asynchon -- das heißt nur alle x Minuten -- abgefragt werden sollen. Wie lange die Daten gültig sind, bestimmt die Variable `CACHE_MAXAGE` weiter unten in der Tabelle.
//</td>
//</tr>
//
//<tr>
//<td class=tt>SYNC_ASM_SECTIONS</td>
//<td>Hier greift der gleiche Mechanismus für Sektionen der ASM, wie das bei der anderen Variable `SYNC_SECTIONS` der Fall ist.
//</td>
//</tr>
//
//<tr>
//<td class=tt>ASYNC_ASM_SECTIONS</td>
//<td>Hier greift der gleiche Mechanismus für Sektionen der ASM, wie das bei der anderen Variable `ASYNC_SECTIONS` der Fall ist.
//</td>
//</tr>
//
//<tr>
//<td class=tt>CACHE_MAXAGE</td>
//<td>Mit dieser Variable bestimmen Sie, wie lange asynchron abgerufene Daten valide sind. Wird die Variable nicht angegeben, wird ein Standard von 600 Sekunden (=10 Minuten) benutzt.
//</td>
//</tr>
//
//
//Der Mechanismus erlaubt es demnach einen in der Konfigurationsdatei
//einen Standard zu setzen und diesen je Instanz bei Bedarf noch einmal zu
//überschreiben. Eine Konfiguration könnte dann zum Beispiel so aussehen:
//
//F+:/etc/check_mk/mk_oracle.cfg
//# DEFAULTS:
//# SYNC_SECTIONS="instance sessions logswitches undostat recovery_area processes recovery_status longactivesessions dataguard_stats performance locks"
//# ASYNC_SECTIONS="tablespaces rman jobs ts_quotas resumable"
//# SYNC_ASM_SECTIONS="instance processes"
//# ASYNC_ASM_SECTIONS="asm_diskgroup"
//# CACHE_MAXAGE=600
//
//SYNC_ASM_SECTIONS='instance'
//ASYNC_SECTIONS='tablespaces jobs rman resumable'
//
//CACHE_MAXAGE=300
//
//EXCLUDE_INST1='undostat locks'
//EXCLUDE_INST2='jobs'
//F-:
//
//Wie Sie in dem Beispiel sehen, werden die ASM-Instanzen noch lediglich
//die Sektion `instance` abgefragt und zusätzlich auf allen
//regulären Instanzen ein Minimalset für die asynchronen Sektionen
//angegeben. _Zusätzlich_ werden auf der Instanz `INST1` auf die
//synchronen Sektionen `undostat` und `locks` verzichtet. Da
//die synchronen Sektionen nicht explizit angegeben wurden, werden auf allen
//anderen Instanzen alle synchronen Sektionen abgerufen. `INST2`
//wiederum fragt nur drei der vier asynchronen Sektionen ab, da `jobs`
//zusätzlich ausgeschlossen wurde. Und zuletzt wird der Cache von 10 Minuten
//auf 5 Minuten (=300 Sekunden) heruntergesetzt, da es ausreichend ist, um
//alle Daten in diesem Zeitraum zu holen.
//
//*Wichtig*: Wenn Sie in der Konfigurationsdatei bestimmen, welche
//Sektionen auf welche Weise abeholt werden sollen -- Sie können ja auch eine
//normalerweise asynchrone Sektion zu einer synchronen machen -- müssen Sie
//*alle* Sektionen angeben, welche in dem jeweiligen Bereich ausgeführt
//werden sollen. Wollen Sie zum Beispiel nur `locks` aus der synchronen
//Abfrage rausnehmen, geben Sie die gesamte synchrone Liste an und lassen
//lediglich `locks` weg:
//
//F+:/etc/check_mk/mk_oracle.cfg
//# Just exclude 'locks' from sync sections:
//SYNC_SECTIONS='instance sessions logswitches undostat recovery_area processes recovery_status longactivesessions dataguard_stats performance'
//F-:
//
//Gleiches gilt auch für die anderen drei Variablen, in denen die Sektionen
//bestimmt werden.
//
//
//AN:tns_config
//H3:TNSALIAS und TNSADMIN konfigurieren
//
//Coming soon. Hiermit kann dem TNSALIAS einer Instanz ein Post- oder Prefix hinzugefügt werden.
//
//Zusätzlich kann man den `TNSADMIN` setzen, um die Pfad zu existierenden sqlnet.ora und tnsnames.ora anzugeben.
//
//
//H2:Entfernte Datenbanken überwachen#remote_instances
//
//Unter unixoiden Systemen können Sie nicht nur lokal laufende Instanzen
//abrufen, sondern auf entfernte verbinden und diese abrufen. Das ist zum
//Beispiel dann von Vorteil, wenn Sie keinen Zugriff auf das darunter liegende
//System haben, aber die Datenbank dennoch überwachen wollen. Um entfernte
//Datenbanken zu überwachen, gibt es allerdings die folgenden Voraussetzungen:
//
//LI:Die [.guihint]#Linux AIO access library# ist installiert. Unter RHEL/CentOS heißt das Paket `libaio`.
//LI:Der link:https://www.oracle.com/database/technologies/instant-client.html[Instant Client for Oracle Database] ist installiert.
//LI:SQLPlus ist in der Installation schon vorhanden oder muss ggf. als Erweiterungspaket zu dem Client installiert werden.
//
//In der Regel sind die Voraussetzungen schon erfüllt, wenn sich auf dem
//Host, auf dem das Plugin ausgeführt werden soll, eine Oracle-Installation
//befindet. Andernfalls holen Sie dies über die entsprechenden Pakete nach.
//
//Damit sich das Plugin auf die entfernte Datenbank verbinden kann, hinterlegen Sie zunächst in der Konfigurationsdatei die Zugangsdaten. Diese sind ähnlich zu den Angaben, die Sie bereits vom `DBUSER` kennen. Allerdings gibt es zusätzlich noch eine Reihe mehr an -- verpflichtenden -- Angaben:
//
//F+:/etc/check_mk/mk_oracle.cfg
//# Syntax:
//# REMOTE_INSTANCE_[ID]='USER:PASSWORD:ROLE:HOST:PORT:PIGGYBACKHOST:SID:VERSION:TNSALIAS'
//
//REMOTE_INSTANCE_1='check_mk:mypassword::myRemoteHost:1521:myOracleHost:MYINST3:11.2'
//REMOTE_INSTANCE_myinst1='/:::myRemoteHost:1521::MYINST1:11.2:INST1'
//
//REMOTE_ORACLE_HOME='/usr/lib/oracle/11.2/client64'
//F-:
//
//In dem Beispiel sind zwei entfernte Instanzen konfiguriert. Damit jede
//Zeile eindeutig ist, wird jeder Variable eine ID übergeben. Diese können
//Sie frei wählen -- sie muss lediglich pro Konfigurationsdatei einzigartig
//sein. Wie wahrscheinlich schon gesehen haben, gibt es auch bei den Werten
//nach der Portangabe noch weitere, die neu gesetzt wurden. Diese sind teilweise
//optional und teilweise notwendig, um eine Verbindung aufbauen zu können.
//
//Der erste zusätzlich verwendete Wert (=_PIGGYBACKHOST_) bei der
//Instanz `MYINST3` ist `myOracleHost`. Durch diese Angabe werden
//die Ergebnisse für die Abfrage dem angegebenen Host zugeordnet. Ist dieser
//in Checkmk als Host vorhanden, werden die neuen Services entsprechend dort
//erscheinen, anstatt auf dem Host, auf dem das Plugin läuft. Auf der zweiten
//Instanz `MYINST1` sehen Sie diese Angabe nicht; die Zurordnung zu
//einem anderen Host ist _optional_.
//
//Der zweite neue Wert (=_SID_)ist die Angabe des Instanznamens. Da
//das Plugin auf dem entfernten Host nicht schauen kann, welche Instanzen dort
//laufen, muss für jede entfernte Instanz eine Konfigurationszeile angegeben
//werden -- der Wert ist also _notwendig_ und damit nicht optional.
//
//Der dritte Wert (=_VERSION_) ist ebenfalls notwendig und dem Umstand
//geschuldet, dass viele Meta-Informationen nur zur Verfügung stehen, wenn
//man sich direkt auf dem Host befindet. Die Versionsangabe kann daher auch
//nicht weggelassen werden und bestimmt, welche SQLs an die Instanz übergeben
//werden können. In dem Beispiel verwenden beide Instanzen die Version `11.2`.
//
//Der vierte und letzte Wert (=_TNSALIAS_) ist wieder optional und
//kann verwendet werden, wenn Sie auf die entfernte Instanz per Wallet oder
//LDAP/Active Directory zugreifen möchten. Für den Fall, dass die Instanz dann
//nur auf einen bestimmten TNS-Alias antwortet, können Sie diesen hier angeben.
//
//Um auch das Programm _sqlplus_ zu finden, geben Sie über die Variable
//`REMOTE_ORACLE_HOME` an, wo sich der Oracle-Client auf dem Host
//befindet, der das Plugin ausführt. Nur dann sind alle Ressourcen verfügbar,
//die für die Abfragen benötigt werden.
//
//*Wichtig*: Bei der Abfrage von entfernten Instanzen gelten ein paar
//Einschränkungen und Besonderheiten:
//
//LI:Sie können -- logischerweise -- entfernte Instanzen nicht per `SKIP_SIDS` ausschließen und brauchen sie im Gegenzug auf nicht bei `ONLY_SIDS` zu berücksichtigen.
//LI:Instanzen mit gleichem Namen dürfen nicht demselben Host zugewiesen werden. Das ist vor allem dann relevant, wenn Sie Instanzen von mehreren entfernten und/oder dem lokalen Host abrufen und dort identische Namen verwendet werden.
//
//
//H2:Einrichtung über die Agent Bakery#bakery
//
//[CEE]Die Einrichtung kann unter Linux, AIX, Solaris und HP-UX mit der
//link:wato_monitoringagents.html#bakery[Agent Bakery] stark vereinfacht werden, da
//Syntaxfehler in den Konfigurationsdateien vermieden werden und Anpassungen
//an sich verändernde Umgebungen einfacher umgesetzt werden können. Der
//wesentliche Unterschied zu einer manuellen Konfiguration ist, dass Sie nur
//noch dann auf dem Oracle-Host auf der Kommandozeile arbeiten müssen, wenn
//Sie spezielle Oracle-spezifische Konfigurationen vornehmen wollen.
//
//Nichtsdestotrotz können Sie nicht alle Funktionen des Plugins über
//die Agent Bakery konfigurieren. Zum einen, wenn es sich um veraltete
//Konfiguratinsoptionen handelt, die nur noch aus Kompatibilitätsgründen
//vorhanden sind. Diese lassen sich dann entsprechend durch die
//aktuellen Optionen ersetzen. Zum anderen, wenn es Funktionen sind,
//welche einen größeren Eingriff benötigen und eine klare Expertise
//voraussetzen. Entsprechend sind die [monitoring_oracle#custom_sqls|Custom
//SQLs] nicht direkt in der Agent Bakery konfigurierbar.
//
//// MA:Hier fehlt noch eine Anleitung, wie man das mit Custom-Dateien und mk_oracle.d machen kann.
//
//Über [.guihint]#WATO|Monitoring Agents|Rules|ORACLE Databases (Linux, Solaris, AIX)# legen Sie eine Regel an. Hier finden Sie alle Optionen, die Ihnen für die Konfiguration des Plugins zur Verfügung stehen:
//
////BI:monitoring_oracle_bakery_rulset.png
//
//
//H3:Benutzer konfigurieren
//
//Auch in der Agent Bakery haben Sie die Möglichkeit, Standardbenutzer
//und Ausnahmen für spezielle Instanzen anzulegen. Die Optionen, die Sie
//in der Konfigurationsdatei mit Doppelpunkt separiert finden, finden Sie
//hier als einzelne Optionen, die Sie dann entsprechend ausfüllen. In der
//link:monitoring_oracle.html#user_config[einfachsten Konfiguration] sieht das dann etwa
//so aus:
//
////BI: monitoring_oracle_bakery_login1.png
//
//Natürlich können Sie auch hier die Wallet nutzen, indem Sie in dem Dropdown
//[.guihint]#Authentication method# einfach auf {{Use manually created ORACLE password
//wallet}} wechseln.
//
//Die Konfiguration für eine _ASM_ erledigen Sie analog über die Option
//[.guihint]#Login for ASM# und die Ausnahmen für spezifische Instanzen finden Sie
//bei [.guihint]#Login for selected databases#.
//
//
//H3:Erweiterte Optionen
//
//In der folgenden Tabelle finden Sie die restlichen Optionen des Regelsets [.guihint]#ORACLE Databases (Linux, Solaris, AIX)# zusammen mit einem Verweis darauf, wo Sie eine Beschreibung zu der Option finden:
//
//<table>
//
//<tr>
//<th>Option</th>
//<th>Beschreibung</th>
//</tr>
//
//<tr>
//<td>[.guihint]#Instances to monitor#</td>
//<td>Diese Option fast mehrere Optionen der Konfigurationsdatei zusammen, mit denen Sie Instanzen link:monitoring_oracle.html#skip_include[aus- oder einschließen] können.</td>
//</tr>
//
//<tr>
//<td>[.guihint]#Add pre or postfix to TNSALIASes#</td>
//<td>Mit dieser Optionen können Sie den link:monitoring_oracle.html#tns_config[TNSALIAS] entweder global oder für eine spezifischen Instanz erweitern.</td>
//</tr>
//
//<tr>
//<td>[.guihint]#Sections - data to collect#</td>
//<td>Alle verfügbaren Sektionen sind unter dieser Option gelistet und können individuell auf globaler Ebene konfiguriert werden. Sie enstprechen daher den beiden Variablen `SYNC_SECTIONS` und `ASYNC_SECTIONS`, sowie deren Gegenstück bei einer _ASM_ aus dem Abschnitt, wo es um die link:monitoring_oracle.html#sections[zu holenden Daten] geht.</td>
//</tr>
//
//<tr>
//<td>[.guihint]#Exclude some sections on certain instances#</td>
//<td>Wenn Sie mit `EXCLUDE_{SID}` nicht die gesamte Instanz, sondern nur ein paar Sektionen ausschließen wollen, können Sie das über diese Option machen. Eine genauere Beschreibun finden Sie bei den Optionen zu den [monitoring_oracle#skip_include|Instanzen] und link:monitoring_oracle.html#sections[Sektionen].</td>
//</tr>
//
//<tr>
//<td>[.guihint]#Cache age for background checks#</td>
//<td>Legen Sie hier fest, wie lange Asynchrone Sektionen gültig sein sollen. Der Standardwert liegt bei 600 Sekunden (=10 Minuten).</td>
//</tr>
//
//<tr>
//<td>[.guihint]#Sqlnet Send timeout#</td>
//<td>Diese Option wird der `sqlnet.ora` hinzugefügt und setzt ein Timeout für die Instanz selbst.</td>
//</tr>
//
//<tr>
//<td>[.guihint]#Remote instances#</td>
//<td>link:monitoring_oracle.html#remote_instances[Entfernte Instanzen] konfigurieren Sie mit dieser Option. Sie enthält alle Elemente der Konfiguration, die Sie bereits kennen. Für die Bestimmung des ID der Variable haben Sie über die [.guihint]#Unique ID# die Wahl zwischen verschiedenen Möglichkeiten. Diese wirken sich lediglich auf die erwähnte ID aus und muss lediglich einzigartig sein.</td>
//</tr>
//
//<tr>
//<td>[.guihint]#ORACLE_HOME to use for remote access#</td>
//<td>Hier können Sie bestimmen, wo das Agenten-Plugin das Programm `sqlplus` findet. Sie müssen es dann angeben, wenn Sie eine link:monitoring_oracle.html#remote_instances[entfernte Instanz] überwachen wollen, aber `sqlplus` nicht über die Umgebungsvariablen gefunden werden kann.</td>
//</tr>
//
//<tr>
//<td>[.guihint]#TNS_ADMIN to use for sqlnet.ora and tnsnames.ora#</td>
//<td>Haben Sie bereits die entsprechenden Dateien an einem andern Ort angelegt, können Sie mit dieser Option -- link:monitoring_oracle.html#tns_config[wie weiter oben beschrieben] -- auf die den Pfad zu den Dateien verweisen. Andernfalls wird unter `/etc/check_mk/` danach gesucht.</td>
//</tr>
//
//
//
//H1:Windows#windows
//
//H2:Plugin- und Konfigurationspfade
//
//Unter Windows verwendet {CMK} Powershell als Skriptsprache. Die Funktionalität
//ist an das Plugin unter link:monitoring_oracle.html#linux[unixoiden Systemen]
//angelehnt, enthält aber nur einen Teil davon. Um das Plugin unter Windows
//nutzen zu können, benötigen Sie die folgenden Pfade, wenn Sie diese nicht
//verändert haben:
//
//<table>
//
//<tr>
//<th style="width:20%">OS</th>
//<th>Plugin-Pfad</th>
//<th>Konfigurationspfad</th>
//</tr>
//
//<tr>
//<td>Windows</td>
//<td>C:\ProgramData\checkmk\agent\plugins</td>
//<td>C:\ProgramData\checkmk\agent\plugins</td>
//</tr>
//
//<tr>
//<td>Windows (Legacy Agent)</td>
//<td>C:\Program Files (x86)\check_mk\plugins\</td>
//<td>C:\Program Files (x86)\check_mk\config\</td>
//</tr>
//
//
//*Hinweis*: Da der Legacy-Agent nur noch in sehr seltenen Ausnahmefällen
//benötigt wird, wird er bei der folgenden Beschreibung nicht beachtet. Es
//wird sich daher immer auf die aktuellen Architektur des Agenten bezogen.
//
//Um das Plugin `mk_oracle.ps1` zu aktivieren, kopieren Sie entweder
//das Plugin von `C:\Program Files (x86)\checkmk\service\plugins\`
//in das oben beschriebene Pluginverzeichnis. Alternativ können Sie in der
//Konfigurationsdatei des Agenten auf die Datei im Installationspfad verweisen.
//
//
//H2:Besonderheiten unter Windows und Powershell
//
//Windows verhindert normalerweise die Ausführung von Skripten, wenn diese
//nicht signiert sind. Sie können dieses Problem nun sehr einfach umgehen,
//indem Sie die Richtlinien zur Ausführung von Powershell-Skripten für den
//Benutzer anpassen, welche den checkmk-Agenten ausführt:
//
//C+:
//UP(C:\ProgramData\checkmk\agent\>):Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine
//UP(C:\ProgramData\checkmk\agent\>):Get-ExecutionPolicy -Scope LocalMachine
//Bypass
//C-:
//
//Diese Option ist praktisch, wenn man kurz ein Skript oder die generelle
//Funktionalität des checkmk-Agenten testen möchte. Um die Sicherheit Ihres
//Systems nicht zu gefährden, setzen Sie nach dem Test die Einstellung auf
//produktiven Servern wieder zurück:
//
//C+:
//UP(C:\Program\checkmk\agent\>):Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine
//UP(C:\Program\checkmk\agent\>):Get-ExecutionPolicy -Scope LocalMachine
//RemoteSigned
//C-:
//
//Verständlicherweise haben Sie wahrscheinlich keine Lust, alle 60 Sekunden die
//Richtilinien umzustellen. Sie setzen daher eine permanente Ausnahme nur für
//die relevanten Skripte. Beachten Sie, dass hier auch das Konfigurationsskript
//zu den Ausnahmen hinzugefügt wird. Die Ausgabe wurde zu Gunsten der Lesbarkeit
//komplett weggelassen:
//
//C+:
//UP(C:\ProgramData\checkmk\agent\>):Unblock-File -Path .\plugins\mk_oracle.ps1
//UP(C:\ProgramData\checkmk\agent\>):Unblock-File -Path .\config\mk_oracle_cfg.ps1
//C-:
//
//
//H2:Erweiterte Optionen#adv_windows
//
//In der link:monitoring_oracle.html#user_config[allgemeinen Einrichtung] haben Sie
//bereits erste Variablen kennengelernt, um Überwachungsdaten von Ihren
//Oracle-Instanzen zu bekommen. Weitere Optionen, die Ihnen auch unter Windows
//zur Verfügung stehen, finden Sie in den nachfolgenden Abschnitten.
//
//
//AN:adv_user_windows
//H3:Erweiterte Benutzerkonfiguration
//
//Wie unter link:monitoring_oracle.html#adv_user_linux[Linux] können Sie auch bei
//dem Windows-Plugin nicht nur einen Standardlogin definieren, sondern auch
//individuelle für einzelne Instanzen. Sie haben also die gleichen drei
//Möglichkeiten, Benutzer anzugeben:
//
//<table>
//
//<tr>
//<th style="width: 25%">Parameter</th>
//<th>Beschreibung</th>
//</tr>
//
//<tr>
//<td class=tt>DBUSER</td>
//<td>Der Standard, wenn keine individuellen Zugangsdaten für die
//Datenbankinstanz definiert sind.</td>
//</tr>
//
//<tr>
//<td class=tt>DBUSER_MYINST1</td>
//<td>Zugangsdaten für eine ganz bestimmte Datenbankinstanz. In diesem Fall
//für die Instanz `MYINST1`. Die Logindaten werden nur für diese
//SID benutzt.</td>
//</tr>
//
//<tr>
//<td class=tt>ASMUSER</td>
//<td>Spezielle Zugangsdaten für das Automatic Storage Management (ASM).</td>
//</tr>
//
//
//*Wichtig*: Auch hier kann für eine _ASM_ immer nur ein Login
//angegeben werden.
//
//Zusätzlich können auch hier noch mehr Optionen, außer Benutzername
//oder Passwort angegeben werden. Diese zusätzlichen Angaben sind auch hier
//optional. Allerdings muss jede Angabe ausgefüllt werden, wenn Sie benutzt
//wird. Eine Konfiguration kann dann zum Beispiel so aussehen:
//
//F+:C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
//# Syntax
//# DBUSER = @("USERNAME", "PASSWORD", "ROLE", "HOST", "PORT")
//# Default
//# DBUSER = @("", "", "", "localhost", "1521")
//$DBUSER = @("checkmk", "myPassword", "SYSDBA", "localhost", "1521")
//
//@DBUSER_MYINST1 = @("cmk_specific1", "myPassword1", "", "10.0.0.73")
//@DBUSER_MYINST2 = @("cmk_specific2", "myPassword2", "SYSDBA", "localhost", "1531")
//
//@ASMUSER = @("cmk_asm", "myASMPassword", "SYSASM")
//F-:
//
//Ein paar Erläuterungen zu dem Bespiel:
//
//LI:Sie können beliebig viele individuelle Zugangsdaten definieren. Diese werden immer dem Standard bevorzugt.
//LI:Jede Option wird in einer Liste definiert. Die Reihenfolge der Einträge darf nicht vertauscht werden.
//LI:Soll ein optionales Feld nicht verändert werden, aber ein danach folgendes, so müssen beide korrekt angegeben werden. Siehe `DBUSER_MYINST2`, bei dem der `HOST` weiterhin auf _localhost_ gesetzt wird, obwohl nur der `PORT` verändert werden soll.
//LI:Werden ab einem bestimmten Punkt keine optionalen Felder mehr gebraucht, können sie weggelassen werden. Siehe `ASMUSER`, bei dem nur die Rolle des Bentzers angegeben wurde.
//LI:Soll dem Bentzer keine spezielle Rolle zugewiesen werden, aber der `HOST` oder `PORT` angepasst werden, tragen Sie an der Stelle lediglich zwei Anführungszeichen (`""`) ein.
//
//AN:skip_include_windows
//H3:Instanzen ein- oder ausschließen
//
//Auch unter Windows möchte man bestimmte Instanzen nicht immer
//einbeziehen. Gründe dafür wurden ja in dem Abschnitt für
//link:monitoring_oracle.html#skip_include[Linux] bereits beschrieben. Zwei der drei
//Möglichkeiten, die sie von Linux kennen, können Sie auch hier verwenden:
//
//<table>
//
//<tr>
//<th style="width: 25%">Parameter</th>
//<th>Beschreibung</th>
//</tr>
//
//<tr>
//<td class=tt>ONLY_SIDS</td>
//<td>Hier kann bestimmt werden, welche Instanzen überwacht werden sollen. Alle anderen werden dann ignoriert. Natürlich werden die Instanzen weiterhin auch nur dann überwacht, wenn sie auch von dem Plugin gefunden werden. Die Option eignet sich also sehr gut, wenn die Menge der zu überwachenden Instanzen kleiner ist, als die Anzahl derer, die ignoriert werden sollen.
//</td>
//</tr>
//
//<tr>
//<td class=tt>EXCLUDE__{SID}_</td>
//<td>Mit dieser Option können Sie Instanzen teilweise ausschließen. Zwar können Sie auch hier mit dem Wert `ALL` alle Sektionen ausschließen und daher dasselbe erreichen, als würden Sie sie zu `SKIP_SIDS` hinzufügen. Allerdings können Sie auch nur bestimmte Sektionen für bestimmte Instanzen abschalten und so nur eine Submenge des Möglichen überwachen. *Wichtig*: Eine ASM (`+ASM`) kann mit dieser Option nicht komplett abschalten.
//</td>
//</tr>
//
//
//Die Verarbeitung erfolgt in der oben angebenen Reihenfolge pro Instanz. Es
//wird also zuerst geprüft, ob sich die Instanz in `ONLY_SIDS` befindet
//und erst danach, ob bestimmte Sektionen ausgeschlossen werden sollen. Ist
//weiter die Variable `EXCLUDE_` auf `ALL` gesetzt, so wird auch
//keine Sektion ausgeführt.
//
//Nachfolgend ein Beispiel, bei dem beide Variablen einmal gezeigt werden:
//
//F+:C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
//$ONLY_SIDS = @("MYINST1", "MYINST3")
//$EXCLUDE_INST1 = "tablespaces rman"
//$EXCLUDE_INST3 = "ALL"
//F-:
//
//Beachten Sie, dass es sich bei `ONLY_SIDS` um eine Liste handelt,
//während bei `EXCLUDE_INST1` ein String ausreicht, bei dem Sektionen,
//separiert durch eine Leerzeichen, notiert werden.
//
//
//AN:sections_windows
//H3:Zu holende Daten bestimmen
//
//Die Angabe, welche Sektionen überhaupt zu holen sind, erfolg äquivalent
//zu link:monitoring_oracle.html#sections[Linux]. Daher hier nur ein Beispiel der
//Konfiguration:
//
//F+:C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
//# DEFAULTS:
//# $SYNC_SECTIONS = @("instance", "sessions", "logswitches", "undostat", "recovery_area", "processes", "recovery_status", "longactivesessions", "dataguard_stats", "performance", "locks")
//# $ASYNC_SECTIONS = @("tablespaces", "rman", "jobs", "ts_quotas", "resumable")
//# $SYNC_ASM_SECTIONS = @("instance", "processes")
//# $ASYNC_ASM_SECTIONS = @("asm_diskgroup")
//# $CACHE_MAXAGE = 600
//
//$SYNC_ASM_SECTIONS = @("instance")
//$ASYNC_SECTIONS = @("tablespaces", "jobs", "rman", "resumable")
//
//$CACHE_MAXAGE = 300
//
//$EXCLUDE_INST1 = "undostat locks"
//$EXCLUDE_INST2 = "jobs'
//F-:
//
//*Wichtig*: Wenn Sie in der Konfigurationsdatei bestimmen, welche
//Sektionen auf welche Weise abeholt werden sollen -- Sie können ja auch eine
//normalerweise asynchrone Sektion zu einer synchronen machen -- müssen Sie
//*alle* Sektionen angeben, welche in dem jeweiligen Bereich ausgeführt
//werden sollen. Wollen Sie zum Beispiel nur `locks` aus der synchronen
//Abfrage rausnehmen, geben Sie die gesamte synchrone Liste an und lassen
//lediglich `locks` weg:
//
//F+:C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1
//# Just exclude 'locks' from sync sections:
//$SYNC_SECTIONS = @("instance", "sessions", "logswitches", "undostat", "recovery_area", "processes", "recovery_status", "longactivesessions", "dataguard_stats", "performance")
//F-:
//
//Gleiches gilt auch für die anderen drei Variablen, in denen die Sektionen
//bestimmt werden.
//
//
//H2:Entfernte Datenbanken überwachen
//
//Die Überwachung entfernter Datenbanken ist derzeit nicht über das
//Windows-Plugin möglich. Wenn Sie entfernte Datenbanken überwachen
//wollen, benötigen Sie daher einen Host mit einem kompatiblen
//link:monitoring_oracle.html#linux[unixoiden Betriebssystem].
//
//
//H2:Einrichtung über die Agent Bakery
//
//[CEE]Zur Zeit steht die Einrichtung über die Agent Bakery nur für die
//link:monitoring_oracle.html#linux[unixoiden Systeme] zur Verfügung.
//
//
//H1:Cluster-Instanzen
//
//H2:Standby-Datenbanken
//
//Oracle unterstützt sogenannten _Standby-Datenbanken_, welche bestimmte
//Aufgaben erfüllen können und in der Regel schlicht Kopien von produtiven,
//bzw. primären Datenbanken sind. Diese Datenbankkonzepte benötigen auch
//spezielle Mechanismen in der Überwachung. Welche das sind, erfahren Sie in
//den folgenden Abschnitten.
//
//
//AN:cluster_adg
//H3:Mit _Active Data Guard_ (ADG)
//
//Haben Sie ADG lizensiert und aktiviert, müssen Sie keinerlei Verändungen in
//der Konfiguration des Agenten-Plugins vornehmen, da Sie jederzeit von einer
//Standby-Instanz lesen können, ohne die Synchronisation mit der primären
//Instanz unterbrechen zu müssen.
//
//
//H3:Ohne _Active Data Guard_ (DG)
//
//Wenn die Instanzen nicht über ADG verfügen, benötigt der Benutzer, mit
//dem die ÜBerwachungsdaten der Standby-Instanzen geholt werden soll, die
//Rolle _sysdba_. Durch diese Berechtigung ist der Benutzser auch dann
//inder Lage zumindest einen Teil der Daten zu holen, wenn die primäre Instanz
//ausfällt und auf der Standby-Server die Instanz noch nicht von _MOUNTED_
//auf _OPEN_ umgestellt wurde.
//
//Weisen Sie die Berechtigung dem Benutzer zu, welcher die Daten von der oder
//den Instanzen abholen darf. *Wichtig*: Wie das funktioniert kann von
//dem Beispiel abweichen. Die Rolle wird hier dem Benutzer zugewiesen, wie er
//in dem Beispiel oben angelegt wurde:
//
//C+:
//sqlplus> grant sysdba to checkmk;
//C-:
//
//Damit die Daten im Fehlerfall von dem Agenten-Plugin auf dem Standby-Server
//abgefragt werden können, legen Sie den Benutzer auf der primären Instanz
//an und kopieren die Passwortdatei danach auf den Standby-Server. In der
//Konfigurationsdatei des Plugins setzen Sie noch die Rolle des Benutzers dann
//auf `sysdba`:
//
//F+:/etc/check_mk/mk_oracle.cfg
//# Syntax:
//# DBUSER='USER:PASSWORD:ROLE:HOST:PORT:TNSALIAS'
//DBUSER='checkmk:myPassword:sysdba'
//F-:
//
//Beachten Sie, dass die Angabe eines Hosts, Ports oder des TNS-Alias optional
//ist und wie immer weggelassen werden kann. Zusätzlich muss natürlich
//das Agenten-Plugin sowohl auf dem primären Oracle-Host, als auch auf den
//Standby-Hosts installiert sein.
//
//
//AN:clustered_services
//H3:Clustered Services einrichten
//
//Auf der Seite von {CMK} ist es notwendig, dass Sie -- egal, ob Sie ADG
//oder DG nutzen -- die Services anpassen und einem _Cluster-Host_
//zuweisen. Die entsprechenden Checkplugins wurden bereits soweit vorbereitet,
//dass Sie auch als link:cluster_hosts.html[_Clustered Services_] konfiguriert
//werden können. Legen Sie also einen Cluster-Host in {CMK} an und ordnen
//diesem Host die einzelnen Oracle-Hosts zu, denen die primäre und die
//Standy-Instanzen zugeordnet sind. Danach weisen Sie die folgenden Services
//diesem Cluster-Host zu:
//
//LI:ORA .* RMAN Backup
//LI:ORA .* Job
//LI:ORA .*Tablespaces
//
//Danach brauchen Sie sich nicht mehr darum zu kümmern, von welcher Instanz
//die Daten kommen und haben auch im Falle eines Schwenks der primären Instanz
//eine nahtlose Überwachung der oben erwähnten Services sichergestellt.
//
//
//H2:Real Application Cluster (RAC)#rac
//
//Da es in einem RAC einen zentralen Speicher für die Daten gibt, reicht es hier, den Benutzer für das Agenten-Plugin nur einmal anzulegen. Lediglich das Agenten-Plugin muss auf jedem Knoten des Oracle-Clusters installiert und konfiguriert werden.
//
//*Wichtig*: Richten Sie immer die Knoten des Clusters selbst ein und verzichten Sie auf die Abfrage des _SCAN_-Listeners. Nur dadurch ist gewährleistet, dass der Zugriff über das Plugin funktioniert.
//
//
//H3:Clustered Services einrichten
//
//Auch bei einem RAC ist es sinnvoll, bestimmte Services in einem
//Cluster-Host zusammenzufassen. Zusätzlich zu den Services, die Sie bei einem
//link:monitoring_oracle.html#cluster_adg[_(Active) Data Guard_] dem Cluster-Host
//zuordnen, weisen Sie auch die folgenden Services zu, um im Falle eines
//Schwenks eine nahtlose Überwachung sicherzustellen":
//
//LI:ASM .* Diskgroup
//LI:ORA .* Recovery Area
//
//
//#H1:Cluster Ready Services (CRS)
//
//
//H1:Eigene SQLs überwachen (Custom SQLs)#custom_sqls
//
//H2:Warum eigene SQLs bestimmen?
//
//{CMK} bietet mit dem offiziellen Plugin bereits eine große Menge an SQLs,
//mit denen Sie ihre Datenbankinstanzen überwachen können. Damit diese für
//eine möglichst große Menge an technischen und inhaltlichen Anforderungen
//passend sind, sind diese natürlich sehr allgemein gehalten.
//
//Um die individuellen Anforderungen eines jeden Unternehmens an die
//ÜBerwachung einer konkreten Datenbank erfüllen zu können, bietet {CMK}
//ab der VERSION[1.6.0] die Möglichkeit, eigene SQLs zu definieren und mit dem
//Plugin `mk_oracle` abfragen zu lassen. Diese werden dann automatisch
//in der Weboberfläche als eigene Services erkannt und überwacht.
//
//*Wichtig*: Es gibt nur unter Linux, AIX und Solaris die Möglichkeit,
//eigene SQLs abzufragen. Unter Windows steht diese Option _nicht_
//zur Verfügung.
//
//
//H2:Einfache eigene SQLs einbinden
//
//H3:Abzufragende SQLs schreiben
//
//Die einfachste Weise, so ein SQL anzubinden, ist die Nutzung
//des [check_oracle_sql| Check-Plugins {{Custom SQLs for Oracle
//DBs}}]. Erstellen sie dafür zunächst die Datei `mySQL.sql` in dem
//Agenten-Konfigurationsverzeichnis des Hosts, auf dem das SQL ausgeführt
//werden soll. Nachfolgend ein Dummy, welcher die Syntax veranschaulicht:
//
//F+:/etc/check_mk/MySQL.sql
///*Syntax help in comments. The first word is alwyas the key word and ends with a ":"*/
//
///*details:Text to display in the service detail output*/
//prompt details: Some details for the service output;
//
///*perfdata:METRIKNAME=CURRENTVALUE;WARN;CRIT;MAX METRIKNAME=CURRENTVALUE2;WARN;CRIT;MAX*/
//prompt perfdata:MyMetricName1=10;15;20;30 MyMetricName2=16;15;20;30;
//prompt perfdata:MyMetricName3=21;15;20;30 MyMetricName4=15;15;20;30;
//
///*long:Text to display in the long output of the service*/
//prompt long: Here comes some long output for the service;
//prompt long: Here comes some more long output for the service;
//
///*exit:Status of the service as a number*/
//prompt exit:2;
//F-:
//
//Das Beispiel zeigt zum einen, dass sie in einer solchen Datei beliebig
//viele Anweisungen definieren können. Zum anderen ist die Syntax dem eines
//link:localchecks.html[Local-Checks] vor allem mit Blick auf die Performance-Werte
//sehr ähnlich. Im Detail ist diese Syntax hier wesentlich mächtiger, da sie
//mehrzeilige Ausgaben erzeugen können und diese dann auf dem {CMK}-Server
//als ein Service verarbeitet werden. Prinzipiell sind alle Zeilen optional
//und müssen nicht befüllt werden. Die möglichen Schlüsselwörter sind
//im einzelnen:
//
//LI:`details`: Hier können Sie bestimmen, was im [.guihint]#Status Detail# des erzeugten Service ausgegeben werden soll. Die Zeile wird mit dem Schlüsselwort und einem Doppelpunkt eingeleitet. Der Rest der Zeile ergibt die Ausgabe.
//LI:`perfdata`: Performancedaten werden mit diesem Schlüsselwort übergeben. Innerhalb einer Zeile können Sie beliebig viele Metriken -- getrennt durch ein Leerzeichen -- erzeugen. Sie können die Ausgabe der Metriken auch über mehrere Zeilen verteilen. Beginnen Sie dabei einfach immer mit dem Schlüsselwort `perfdata:`.
//LI:`long`: Wenn der Service einen link:wato_services.html#discovery_auto[[.guihint]#Long Output#] haben soll, können Sie diesen hier angeben. Auch dieses Schlüsselwort können Sie mehrmals verwenden, um mehrere Zeilen im [.guihint]#Long Output# zu erzeugen.
//LI:`exit`: Soll die Ausgabe einen bestimmten Status haben, können Sie diesen hier bestimmen. Es stehen Ihnen dabei die bekannten Zuordnungen 0,1,2,3 für die Status {OK}, {WARN}, {CRIT}, {UNKNOWN} zur Verfügung.
//
//*Hinweis*: Das Schlüsselwort `elapsed` müssen Sie nicht manuell
//definieren. Es wird während der Laufzeit automatisch erzeugt, um zu prüfen,
//wie lange die von Ihnen definierten Anweisungen gebraucht haben.
//
//
//H3:`mk_oracle`-Plugin konfigurieren
//
//Nachdem Sie nun Ihr erstes, sehr einfaches SQL definiert haben, machen Sie
//es dem Plugin bekannt. Das erfolgt über die bekannte Konfigurationsdatei,
//die Sie entsprechend erweitern:
//
//F+:/etc/check_mk/mk_oracle.cfg
//SQLS_SECTIONS="mycustomsection1"
//
//mycustomsection1 () {
//    SQLS_SIDS="INST1"
//    SQLS_DIR="/etc/check_mk"
//    SQLS_SQL="MySQL.sql"
//}
//F-:
//
//Mit der ersten Option (`SQLS_SECTIONS`) bestimmen Sie, welche individuellen Sektionen Sie ausführen lassen möchten. In dem Beispiel haben wir nur eine angegeben und diese dann direkt danach näher beschrieben. Jede Sektion ist also eigentlich eine kleine Funktion, die vom `mk_oracle`-Plugin aufgerufen wird.
//
//In dieser Funktion können Sie dann weitere Details bestimmen und festlege,
//für welche Instanzen (`SQLS_SIDS`) diese Sektion gilt. Außerdem
//bestimmen Sie zusätzlich, wo sich die Datei mit den SQL-Anweisungen befindet
//(`SQLS_DIR`) und wie diese Datei heißt (`SQLS_SQL`). Diese
//einfache Konfiguration reicht bereits aus, damit um das Ergebnis in {CMK} sehen zu können. Führen Sie dafür eine Service-Erkennung durch und aktivieren Sie den neuen Service. Danach sehen Sie ihn bei den anderen Services in der Übersicht des Hosts:
//
////BI:custom_sqls_list.png
//
//
//H2:Erweiterte Optionen
//
//Die Möglichkeiten eigene SQLs zu überwachen gehen natürlich über den
//einfachen -- oben gezeigten -- Fall hinaus. Im nachfolgenden finden Sie
//eine kleine Übersicht der verfügbaren Variablen. Für eine ausführliche
//Beschreibung können Sie auch das Plugin mit der Option `--help`
//aufrufen. *Wichtig*: Variablen, die nur außerhalb oder nur innerhalb einer
//Sektions-Funktion gesetzt werden können, sind entsprechend markiert. Alle
//anderen können in beiden Bereichen definiert werden. Werden Sie außerhalb
//einer Sektion gesetzt, gelten sie global für alle Sektionen.
//
//<table>
//
//<tr>
//<th style="width:10%">Variable</th>
//<th>Kurzbeschreibung</th>
//<th style="width:5%">optional</th>
//</tr>
//
//<tr>
//<td class=tt>SQLS_SECTIONS</td>
//<td>Die selbst definierten Sektions-Funktionen, die von dem Plugin ausgeführt werden sollen. *Wichtig*: Diese Variable kann nur außerhalb einer Sektions-Funktion (=_global_) gesetzt werden</td>
//<td>nein</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_SIDS</td>
//<td>Die Instanzen, welche die Sektion(en) ausführen sollen. Kann global oder pro Sektion gesetzt werden</td>
//<td>nein</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_DIR</td>
//<td>Der Pfad, in dem die eigenen SQLs abgelegt wurden. Kann global oder pro Sektionen</td>
//<td>nein</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_SQL</td>
//<td>Die Datei, welche die Anweisungen für eine Sektion enthält.</td>
//<td>nein</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_PARAMETERS</td>
//<td>tbd</td>
//<td>ja</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_SECTION_NAME</td>
//<td>Der Sektionssname, wenn Sie ein eigenes Checkplugin für die individuellen SQLs geschrieben haben.</td>
//<td>ja</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_SECTION_SEP</td>
//<td>Der Separator der einzelnen Elemente in einer Zeile als Ascii-ID. Diese Variable kann nur in Verbindung mit der Variable `SQLS_SECTION_NAME` benutzt werden.</td>
//<td>ja</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_ITEM_NAME</td>
//<td>Bestimmt einen individuellen Identifikator für den Servicenamen. Normalerweise wird die SID und der Dateiname der SQLs genommen. *Wichtig*: Diese Variable kann _nicht_ zusammen mit der Variable `SQLS_SECTION_NAME` benutzt werden und kann auch nur innerhalb einer Sektions-Funktion gesetzt werden.</td>
//<td>ja</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_ITEM_SID</td>
//<td>tbd</td>
//<td>ja</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_MAX_CACHE_AGE</td>
//<td>Erfüllt dieselbe Aufgabe, wie link:monitoring_oracle.html#sections[`CACHE_MAXAGE`].</td>
//<td>ja</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_DBUSER</td>
//<td>Bestimmt einen individuellen Benutzer für die Sektionen.</td>
//<td>ja</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_DBPASSWORD</td>
//<td>Bestimmt ein individuelles Passwort für die Sektionen.</td>
//<td>ja</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_DBSYSCONNECT</td>
//<td>Erweitert die Verbindung über eine SYS-Rolle für die Sektionen.</td>
//<td>ja</td>
//</tr>
//
//<tr>
//<td class=tt>SQLS_TNSALIAS</td>
//<td>Setzt einen individuellen link:monitoring_oracle.html#tns_config[TNSALIAS] für die Sektionen.</td>
//<td>ja</td>
//</tr>
//
//
//
//H2:Eigene Checkplugins nutzen
//
//Sollten Ihnen die Möglichkeiten der oben beschriebenen Syntax nicht
//ausreichen, können Sie über die Variable `SQLS_SECTION_NAME` auch
//eine eigene Sektionsname für ein oder mehrere SQLs ausgeben lassen. Das setzt
//allerdings voraus, dass Sie auch ein entsprechendes Checkplugin geschrieben
//und in Ihre {CMK}-Instanz eingebunden haben.
//
//Haben Sie ein solche Checkplugin geschrieben, sind Sie komplett frei in der
//Syntax der Plugin-Ausgabe und können ganz eigene Wege gehen.  Da dieser
//Weg der umfangreichste und auch schwierigste ist, ist er hier nur der
//Vollständigkeit erwähnt. Er setzt voraus, dass Sie wissen, wie man einen
//{CMK}-Check programmiert und in die Monitoring-Instanz einbindet. Danach ordnen
//Sie lediglich die individuellen SQLs mit den Variablen diesem Checkplugin zu.
//
////Hinweis auf die Check-Doku?
//
//
//H1:Diagnosemöglichkeiten
//
//H2:Verbindung testen
//
//H3:Linux, AIX, Solaris
//
//Sollten Sie Problem mit der Verbindung zu einer oder mehreren Instanzen auf
//einem Oracle-Server haben, können Sie als erstes grundlegende Parameter
//prüfen lassen. Mit der Option `-t` geben Sie die Details zu einer
//Verbindung aus. In der Ausgabe wurden die _Dummy-Sektionen_ zugunsten
//der Lesbarkeit weggelassen. Beachten Sie außerdem, dass dem Plugin zuvor
//der Pfad zu seiner Konfigurationsdatei bekannt gemacht werden muss, da er
//sich darauf verlässt. Im Folgenden also das Beispiel auf einem Linux-Server:
//
//C+:
//RP:export MK_CONFDIR="/etc/check_mk/"
//RP:/usr/lib/check_mk_agent/plugins/mk_oracle -t
//---login----------------------------------------------------------------
//    Operating System:       Linux
//    ORACLE_HOME (oratab):   /u01/app/oracle/product/11.2.0/xe
//    Logincheck to Instance: XE
//    Version:                11.2
//    Login ok User:          checkmk on ORA-SRV01 Instance XE
//    SYNC_SECTIONS:          instance dataguard_stats processes longactivesessions sessions recovery_status undostat logswitches recovery_area performance
//    ASYNC_SECTIONS:         tablespaces rman jobs ts_quotas resumable
//------------------------------------------------------------------------
//C-:
//
//Da man diesen Aufruf eher im Fehlerfall machen wird, werden Sie natürlich
//auch dann eine Ausgabe erhalten und in dieser zusätzlich noch die
//Connection-String, welcher für die Verbindung benutzt wurde und auch die
//ersten 100 Zeichen der Fehlermeldung, welche die Instanz zurückgegeben
//hat. Mit Hilfe dieser Informationen können Sie bereits schnell einfache
//Konfigurationsprobleme identifizieren und dann auch entsprechend beheben.
//
//
//H3:Windows
//
//tbd
//
//
//H2:Ein Log erstellen lassen
//
//H3:Linux, AIX, Solaris
//
//Falls der Fehler nicht durch die Prüfung einer einfachen Verbindung gefunden
//werden kann, können Sie als nächsten Schritt ein komplettes Log anlegen
//lassen, welches sämtliche Schritte des Plugins protokolliert. Auch hier
//benötigen Sie den Pfad zu der Konfigurationsdatei und zusätzlich auch den
//Pfad zu den zwischengespeicherten Daten des Plugins. Auch hier wurde die
//Ausgabe der Sektionen übersprungen, um die Lesbarkeit zu erhöhen:
//
//C+:
//RP:export MK_CONFDIR="/etc/check_mk/"
//RP:export MK_VARFDIR="/var/lib/check_mk_agent/"
//RP:/usr/lib/check_mk_agent/plugins/mk_oracle -l
//Start logging to file: /var/lib/check_mk_agent/log/mk_oracle.log
//C-:
//
//Mit Hilfe dieses Logs können Sie im Zweifel sehr genau identifizieren,
//an welcher Zeile des Scripts das Problem auftritt.
//
//
//H3:Windows
//
//tbd
//
//
//H2:Debugging des Plugins
//
//H3:Linux, AIX, Solaris
//
//Wenn Sie auch mit Hilfe des Logs nicht an das Problem kommen, bietet das
//Plugin die komplette Ausgabe aller Schritte als letzte Möglichkeit der
//Fehleranalyse. Diese Ausgabe ist entsprechend auch die umfangreichste und
//sicherlich auch die am schwersten zu lesende Möglichkeit an die Ursache
//eines Problems zu kommen und sollte daher auch nur als letztes Mittel
//eingesetzt werden. Sie können das Debugging mit der Option `-d`
//aufrufen. Vergessen Sie nicht die notwendige Umgebungsvariable:
//
//C+:
//RP:export MK_CONFDIR="/etc/check_mk/"
//RP:/usr/lib/check_mk_agent/plugins/mk_oracle -d
//C-:
//
//*Wichtig*: In dieser Ausgabe werden keine sensiblen Daten wie Passwörter
//maskiert. Es ist also alles und jede Variable in Klartext lesbar.
//
//
//H3:Windows
//
//tbd
//
//
//H1:Dateien und Verzeichnisse
//
//H2:Auf einem Oracle-Host unter Linux, AIX und Solaris
//
//<table>
//
//<tr>
//<th style="width: 55%">Pfad</th>
//<th>Bedeutung</th>
//</tr>
//
//<tr>
//<td class=tt>/usr/bin/check_mk_agent</td>
//<td>Der Agent, welcher alle Daten zu dem Host sammelt.</td>
//</tr>
//
//<tr>
//<td class=tt>/usr/lib/check_mk/plugins/mk_oracle</td>
//<td>Das übliche Verzeichnis, wo das Plugin liegt. Beachten Sie, dass der Pfad unter *AIX* etwas anders ist: `/usr/check_mk/lib/plugins/mk_oracle`</td>
//</tr>
//
//<tr>
//<td class=tt>/etc/check_mk/oracle.cfg</td>
//<td>Die Konfigurationsdatei für das Plugin. Auch hier unterscheidet sich *AIX:* `/usr/check_mk/conf/mk_oracle.cfg`</td>
//</tr>
//
//<tr>
//<td class=tt>/etc/check_mk/sqlnet.ora</td>
//<td>Die Konfigurationsdatei, welche für die Oracle Wallet benötigt wird.</td>
//</tr>
//
//<tr>
//<td class=tt>/etc/check_mk/tnsnames.ora</td>
//<td>Die Konfigurationsdatei, welche einen
//Alias für ein Schema bestimmt, wenn Sie sie manuell angeben. Beispieldateien liegen auch in der Oracle-Installation,
//aber da sich der Pfad je nach Installation unterscheidet,
//kann er nicht pauschal angegeben werden.</td>
//</tr>
//
//
//
//H2:Auf einem Oracle-Host unter Windows
//
//<table>
//
//<tr>
//<th style="width: 55%">Pfad</th>
//<th>Bedeutung</th>
//</tr>
//
//<tr>
//<td class=tt>C:\Program Files (x86)\checkmk\service\check_mk_agent.exe</td>
//<td>Der Agent, welcher alle Daten zu dem Host sammelt.</td>
//</tr>
//
//<tr>
//<td class=tt>C:\ProgramData\checkmk\agent\plugins\mk_oracle.ps1</td>
//<td>Das übliche Verzeichnis, wo die Plugins abgelegt werden.</td>
//</tr>
//
//<tr>
//<td class=tt>C:\ProgramData\checkmk\agent\config\mk_oracle_cfg.ps1</td>
//<td>Die Konfigurationsdatei für das Plugin.</td>
//</tr>
//
//<tr>
//<td class=tt>C:\ProgramData\checkmk\agent\config\sqlnet.ora</td>
//<td>Die Konfigurationsdatei, welche für die Oracle Wallet benötigt wird.</td>
//</tr>
//
//<tr>
//<td class=tt>C:\ProgramData\checkmk\agent\config\tnsnames.ora</td>
//<td>Die Konfigurationsdatei, welche einen
//Alias für ein Schema bestimmt, wenn Sie sie manuell angeben. Beispieldateien liegen auch in der Oracle-Installation,
//aber da sich der Pfad je nach Installation unterscheidet,
//kann er nicht pauschal angegeben werden.</td>
//</tr>
//
//
//
//H2: Auf dem {CMK}-Server#files_cmk
//
//<table>
//
//<tr>
//<th style="width: 55%">Pfad</th>
//<th>Bedeutung</th>
//</tr>
//
//<tr>
//<td class=tt>share/check_mk/agents/cfg_examples/mk_oracle.cfg</td>
//<td>Hier befinden sich Beispiele zu der Konfigurations unter Linux, AIX oder
//Solaris. Eine solche Konfiguration benötigt das Plugin, um Daten abholen
//zu dürfen, da dort u.a. auch Zugangsdaten definiert werden können.</td>
//</tr>
//
//<tr>
//<td class=tt>share/check_mk/agents/windows/cfg_examples/mk_oracle_cfg.ps1</td>
//<td>Beispiele zu der Konfiguration unter Windows befinden sich hier.</td>
//</tr>
//
//<tr>
//<td class=tt>share/check_mk/agents/plugins/mk_oracle</td>
//<td>Das Plugin, welches auf dem Oracle-Host die Daten holt.</td>
//</tr>
//
//<tr>
//<td class=tt>share/check_mk/agents/plugins/mk_oracle_crs</td>
//<td>Dieses Plugin liefert Daten zu einem Oracle Cluster Manager.</td>
//</tr>
//
