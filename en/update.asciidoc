include::global_attr.adoc[]
= Updates and Upgrades
:revdate: 2020-06-16
:title: Updating {CMK}
:description: No matter whether it is a free, open source or enterprise edition: updating checkmk has been made as easy as possible. The principles are explained here.

{related-start}
link:cmk_versions.html[{CMK} Versions]
link:cmc.html[The {CMK} micro core (CMC)]
link:cmc_migration.html[Migration to the CMC]
{related-end}

== Introduction

Updating {CMK} is a bit different than most other software packages that
you may be familiar with. Why is that?

The reason is that {CMK} not only allows multiple independent _instances_
(sites) to run on a single server, but it also allows multiple
_link:cmk_versions.html[software versions]_ to be installed simultaneously. With
this system each instance is assigned to an installed version of the software.
To illustrate, we can take the following situation on a fictional server:

image::update1.png[width=300]

Here the instance `mysite1` uses version `1.6.0p13.cee`,
but the instances `mysite2` and `mysite3` use
version `1.6.0p10.cre`. The {CMK}-Version `1.6.0p2.demo` is
actually installed, but is currently not being used.

This example makes it clear that an update does not simply mean the installation
of a new {CMK} RPM/DEB package on a server.
Another additional step is also required. Let us take the following
situation as an example:

image::update2.png[width=300]

Here the instance `mysite` is to be updated to the
{CMK}-version `1.6.0p13.cee`. The first step is to download and install
the appropriate RPM/DEB-Packet. This is performed exactly as with the
link:install_packages.html[initial installation]. At first the newly-installed version will
not be used by any instance, and it will look like this:

image::update3.png[width=300]


The second step will now be an update of the instance from `1.6.0p10.cre`
to `1.6.0p13.cee`. This is achieved with the `omd update` command,
which we will discuss in detail below:

image::update4.png[width=300]

Following the update, the (likely) no longer required version `1.6.0p10.cre`
can be deleted by uninstalling the appropriate package.


== Preface

Since we are unable to detect and handle your local customizations or any
third-party extensions for {CMK} during an update, before updating your {CMK}
instance you should check that these are compatible with your new {CMK} version.
Enter the following command to get an overview of the so-called local structure:

[{shell}]
----
{c-omd} find ~/local -follow -type f
----

In a freshly-installed {CMK}, this command would normally only find a file
named `README.TXT`. Everything else that is displayed should -- in the
event of a problem with the update -- be available from your
link:update.html#diagnose[Fault Diagnosis].



[#detailed]
== Updating of {CMK} in detail


=== Installation of newer versions

As described in the introduction, the first step with an update is the
link:install_packages.html[installation] of the desired new link:cmk_versions.html[version] of {CMK}.
This is achieved in exactly the same way as with the initial installation --
it will however proceed somewhat more quickly since most of the dependent packages
have already been installed. In the following example we are installing the
package for Ubuntu 20.04 (Focal Fossa):

[{shell}]
----
{c-root} gdebi check-mk-enterprise-1.6.0p13_0.focal_amd64.deb
----

A list of your installed {CMK}-versions can be displayed at any time with the
`omd versions` command:

[{shell}]
----
{c-root} omd versions
1.5.0p20.cre
1.5.0p24.cee
1.6.0p13.cee (default)
2020.06.10.cee
----

One of these listed versions is marked with `(default)`.
This _default version_ will be used automatically when creating
new sites, as long as no other version is specified with
`omd -V myversion create mysite`. When working with existing sites this
is irrelevant. The current default version can be queried with `omd version`,
and it can be altered with `omd setversion`:

[{shell}]
----
{c-root} omd version
1.5.0p20.cre
{c-root} omd setversion 1.6.0p13.cee
{c-root} omd version
1.6.0p13.cee
----


The default version plays no role when updating or managing _existing_ instances.
The `omd` command always starts itself automatically in the version
appropriate to the instance.

A listing of the current instances and the versions they use is provided
by the `omd sites` command:

[{shell}]
----
{c-root} omd sites
SITE             VERSION          COMMENTS
mysite           1.5.0p24.cre
test             1.6.0p13.cee     default version
----


[#execute]
=== Performing the update

Once the desired new version has been installed, the instance can be updated.
No `root`-permissions are required for this.
The best way to do this is as an instance user:

[{shell}]
----
{c-root} su - mysite
----

Ensure that the instance has been stopped:

[{shell}]
----
{c-omd} omd stop
----

The update – in effect switching to a different version – can now simply be
performed with the `omd update` command:

[{shell}]
----
{c-omd} omd update
----

If more than one target version is available, a selection list will open:

image::omd-update-2.png[width=340]

When updating from a {RE} to the {CSE} you will be alerted to that fact:

image::update_raw_to_enterprise.png[width=210]

An important part of an update is the refreshing of the
_originally provided_ configuration files. Here changes that had possibly
been made to these files by the user will not simply be discarded, rather they
will be merged. This functions very much like version control systems which
attempt to amalgamate changes made to a single file simultaneously by multiple
developers.

Occasionally -- when the changes affect the same location in the file --
that won't function, and a _conflict_ occurs. How you can solve such conflicts
will be explained link:update.html#conflicts[later below].

The update provides a listing of all modified files and directories:

[{shell}]
----
2020-06-16 14:25:20 - Updating site 'mysite' from version 1.6.0p10.cre to 1.6.0p13.cee...

[green]#pass:[*]# Installed dir  var/check_mk/rrd
[green]#pass:[*]# Installed dir  var/check_mk/reports
[green]#pass:[*]# Installed dir  var/check_mk/reports/archive
[green]#pass:[*]# Installed file etc/logrotate.d/cmc
[green]#pass:[*]# Installed file etc/logrotate.d/mknotifyd
[green]#pass:[*]# Installed file etc/logrotate.d/liveproxyd
Executing update-pre-hooks script "cmk.update-pre-hooks"...OK
Output: Initializing application...
Loading GUI plugins...
Updating {CMK} configuration...
 + Rewriting WATO tags...
 + Rewriting WATO hosts and folders...
 + Rewriting WATO rulesets...
 + Rewriting autochecks...
 + Cleanup version specific caches...
Done

Finished update.
----

Once everything has been successfully processed, the instance can be switched
to the new version...

[{shell}]
----
{c-omd} omd version
1.6.0p13.cee
----

 &#8230; and can then be started:

[{shell}]
----
{c-omd} omd start
----


=== Incompatible changes


Software development of course consists of changes. Because we are always actively
working to keep {CMK} modern, sometimes cutting dead weight and making changes
that turn out to be _incompatible_ is unavoidable. That means that when
updating it may _possibly_ be necessary to adapt your configuration,
or you should at least check it.

A typical example of such a situation is with new check plug-ins which replace
existing plug-ins. If you use one of the affected plug-ins, a fresh
link:wato_services.html[service discovery] will be required on the affected host.

An overview of all changes in {CMK}, including a search function,
can be found online in our
link:https://checkmk.com/check_mk-werks.php[Werks].
Even more practical however is the built-in search function in the version
release notes. This is accessed by clicking on the version number
at the top-left of the side bar:

image::update_click_version.png[width=75%]

{CMK} tracks _new_ changes automatically,
and issues appropriate warnings if they are incompatible:

image::update_unacked.png[width=75%]

You can then inspect these ‘Werks’ (‘works’), and approve them with a mouse click.
You can also find a listing covering the complete history of
the changes, including a search function:

[{image-border}]
image::update_incomp_werks.png[width=75%]


=== The update in detail

Are you curious about what exactly is happening ‘under the hood’ of an
update? Or have data conflicts appeared when `omd update` is running?
If so, here is some further reading.

Three actions take place during `omd update`:

. The refreshing of the default files under `etc/` and `var/` – i.e., files created by `omd create`.
. The switching of the active version to the target version by changing the symbolic link `version` which is found in the Site-directory.
. Post-processing by various packages (e.g., {CMK}). In particular, an [.guihint]#Activate Changes# will be automatically executed in order to generate a valid configuration for the core.


==== Actualising files, merging changes


The first step is by far the most comprehensive. Here {CMK} demonstrates a
big advantage in comparison to the typical software installation --
{CMK} helps you to adapt all of the standard configuration files to the
prerequisites of the new version. This resembles the procedure for updating a
Linux-Distribution, but goes further in the implementation.
{CMK} can handle a multiplicity of situations, for example:

* The merging of file changes with changes made locally by the user
* Files, directories and symbolic links which are obsolete in the new version, or which have been deleted by the user
* Changes to permissions
* Changes to a file type (a symbolic link derived from a file or directory, or vice versa)
* Changes to the target of a symbolic link

{CMK} always ensures that your local changes are retained, and that all
of the changes required by the new version are simultaneously implemented.

[#conflicts]

==== Merging and conflicts

If the new version intends changing a configuration file on which the user has
also made changes, {CMK} automatically attempts to merge both sets of changes.
This is achieved using the same methods as used by version-control systems.

The fewest problems are experienced when your and {CMK}’s changes have a clear
physical separation in the text (at least a few lines apart). The merge will
then be effected automatically, and without needing the user’s intervention.

If two changes ‘collide’ because they both affect the same location in the data,
{CMK} cannot and will not decide which of the changes is more important.
In such a situation the user will be alerted, and be able to solve the conflict
interactively:

image::omd-update.png[width=500]

In the situation shown above, you now have the following options:

[cols="5,~"]
|===

|*d* |This shows the differences between the new default version and your version of the file in the form of a ‘unified diff’ (`diff -u`).
|*y* |This is similar to the above, but based on the preceeding default version shows which changes you have made to the file.
|*n* |This third option in effect ‘closes the triangle’ by showing the changes which {CMK} intends making to the file.
|*t* |By selecting *t*, your original file – without the already successfully-merged changes – will be opened in an editor. Now edit the file in order to bypass possible conflicts. Once the editor has been closed {CMK} will reattempt the merge.
|*k* |Here you can decide whether to accept the data ‘as is’. The successfully inserted changes are retained. Apart from this the file remains as customised by the user.
|*r* |With this you can fall back to the old version of your file, and go without {CMK}’s update for this file. Any customisations that may be required must be performed manually.
|*i* |Install the new default file: your changes in the old file will be lost.
|*s* |If you are uncertain, you can open a shell with *s*. You will find yourself in a directory containing the relevant file, and there can get a picture of the situation. Quit the shell with Strg-D in order to proceed with the update.
|*a* |Abort the update. The instance retains the old version. Files that have already been changed during the update however remain changed! A new update attempt can be started at any time.
|===



==== Further conflict situations

Alongside the content-merging of files there is a whole series of further
situations in which {CMK} requires your decisions. Some of these are very
unusual situations, that nevertheless need to be handled correctly.
In these cases {CMK} will always give you the choice of keeping your version,
or of adopting the new default version. What is more, there is always the option
of aborting an update, or of opening a shell.
Examples of such ‘difficult’ situations are:

* conflicting changes to file types (e.g., when a file is replaced by a symbolic link)
* conflicting changes to file permissions
* changed files that are not required by the new sofware version
* files, directories or links created by a user, which conflict with a new version’s files/directories/links


==== Explanation of the tasks in an update

The update procedure will always output a line of explanation when it makes
a change to a file automatically. The following situations are possible –
files are referred to here, but this also applies analogously to links and directories:

[cols=2]
|===

|Updated |A file has been changed with the new version. Since you have not made a change to the file, {CMK} simply installs the new default version of the file.
|Merged |A file has been changed with the new version, and at the same time the user has made other changes to the file. Both versions of the file can be merged into one without conflict.
|Identical |A file has been changed in the new version, and at the same time the user has already made identical changes to the file. {CMK} must not perform any action.
|Installed |The new version includes a new configuration file which has just now been installed.
|Identical{nbsp}new |The new version includes a file, an identical copy of which the user has already installed.
|Obsolete |The new version has obsoleted a file (also applies to a link or a directory). The user has anyway already deleted it. No action.
|Vanished |Another file is obsolete in the new {CMK}, and the user has neither deleted nor changed the existing version. {CMK} deletes this file automatically.
|Unwanted |The user has deleted a file which is normally present. Because the version in the new {CMK} has no changes from the last version of the file, {CMK} allows the file to be absent.
|Missing |The user has already deleted a file, but in the new {CMK} this file contains changes from the previous version. {CMK} installs the new file, and logs a notification of this action to the user.
|Permissions |{CMK} has updated a file’s permissions because different permissions are set in the new version.
|===



=== Updating without user interaction

Would you like to automate {CMK}’s software updates? You may at first
have difficulties with the interactive responses from `omd update`.
There is a simple solution for this scenario: the command has options that
have been especially conceived for use in scripts:

* The options `-f` or `--force` directly following `omd` inhibit all types of “Are you sure... ?” questions.
* The option `--conflict=` directly following `update` determines the desired behaviour if a file conflict occurs.

Possible values for `--conflict=` are:

[cols=2]
|===

|--conflict=keepold |In the case of a conflict, the user’s own modified version of the file is retained. It is however possible that {CMK} may not be executable, and that manual rectification will be required.
|--conflict=install |In the event of a conflict, the new standard version of the file will be installed. With this, local changes to the file will be at least partly lost.
|--conflict=abort |In the event of a conflict the update is stopped. That does *not* necessarily mean that _everything_ will fall back to the old state. A number of configuration files may have already been updated. The software version will however remain the old version.
|--conflict=ask |This is the standard procedure, so in this form the option is actually superfluous.
|===


Below is an example of the complete command for an automated update
to version `1.6.0p13` of the `mysite` instance:

[{shell}]
----
{c-root} omd stop mysite ; omd -f -V 1.6.0p13.cee update --conflict=install mysite && omd start
----

Through the `&amp;&amp;` before `omd start` a restarting of the
instance will be prevented if the `omd update` is aborted by an error.
Replace the `&amp;&amp;` with a semicolon (`;`)
if a start should definitely be attempted even in such a situation.


If you are certain that only a single {CMK}-instance is running on the server,
the name to be used in a shell script can simply be trapped in a variable:

[{shell}]
----
{c-root} omd sites --bare
mysite
{c-root} SITENAME=$(omd sites --bare)
{c-root} echo $SITENAME
mysite
----

This enables the above line to be independent of the instance’s name.
For example, a small shell script could look like this:

.update.sh
[{file}]
----
#!/bin/bash
SITE=$(omd sites --bare)
VERSION=1.6.0p13.cee

omd stop $SITE
omd -f -V $VERSION update --conflict=install $SITE  && omd start $SITE
----


== Updating the Docker container

Updating a {CMK} docker container from version {v15}p13 onward
is a breeze. Just follow the appropriate instruction in
link:managing_docker.html#update_easy[{CMK} in a Docker container].

For all {CMK} container prior to {v15}p13, a little bit more manual
labor is required and described in the
link:managing_docker.html#update_complex[detailed update instruction for older {CMK} images].


[#updatedemo]
== Upgrading from the {FE} to the full version

Was your first installation of {CMK} the {FE}?
Once you have a {SE} or {ME} subscription, you can simply upgrade your existing
instances to the full version.

The procedure is exactly the same as that for a ‘normal’ update.
The only difference is that a version's name with the `.demo` suffix
is upgraded to a name with the `.cee` suffix.
Simply install the desired package of the full version, and switch the existing
instance to this with `omd update`.

This upgrade can be most easily performed if both versions are identical,
apart from the `.demo` and `.cee` suffixes respectively.
What this means for the functionality is that the {FE} is completely
identical to the full version. Thus an upgrade makes no difference at all.

A simultaneous changeover of the actual version is however quite possible.
The fundamentals remain valid as for a normal update of {CMK}.

[#updatecma]
[#upgrade]
=== Upgrading the {CMK} Appliance

You can also upgrade a demo appliance to a full version with one of the {EE}
without data loss:

. Install a link:appliance_usage.html#cma_webconf_firmware[current firmware] of the full version on the appliance via its web GUI.
. Install a full version of one of the {EE} in the link:appliance_usage.html#manage_cmk[version management] of the appliance.
. Change the desired instances to that version in the link:appliance_usage.html#site_management[instance management] of the appliance.


[#updateraw]
== Upgrading from the {RE} to the {EE}

=== Introduction

An upgrade of the {CRE} to the {EE} is also possible. Here as well, the
procedure is the same as before: install the desired pacakge, and upgrade
the instances with `omd update`.

Since a number of modules and features of the {EE} are not available in the {RE},
following a changeover there are a couple of points to be aware of.
The key point is that when creating _new_ instances of {RE} or {EE}
_different default settings_ are set.


=== Nagios vs. CMC

Since the CRE only supports Nagios as its core, this is preinstalled in instances
created by the CRE. This is retained when an upgrade to the CEE is made.
That means that after an upgrade, processing will initially continue with
a Nagios core. A migration to the CMC is performed with `omd config`,
and this precedure will be described in its link:cmc_migration.html[own article].


=== RRD-Format

The CEE supports an alternative format for saving historic performance data,
one which requires significantly less hard drive-I/O. This is preinstalled
in new CEE-instances. CRE-instances will not be changed over automatically
by an upgrade. How the migration can be performed is described in its own
link:graphing.html#rrdformat[chapter] in the article covering
link:graphing.html[Performance data and graphing].


=== Notification spooler

The CRE has no notification spooler. Thus following the changover to the CEE
it is not active at first. How to activate it can be learned
link:distributed_monitoring.html#activatemknotifyd[here].


== Uninstalling {CMK}

=== Overview

The uninstallation of no longer required {CMK} versions is performed using the
operating system’s package manager. To do this, enter the installed package’s
name – NOT the file name of the original RPM/DEB file. Important: Only delete
{CMK} versions that are no longer being used by any instance!

{CMK} instances that are no longer required can simply be removed with `omd rm`
(thereby deleting all data as well!):

[{shell}]
----
{c-root} omd rm mysite
----

=== SLES, RedHat, CentOS

Here is how to identify which {CMK} packages are being used in RPM-based systems:

[{shell}]
----
{c-root} rpm -qa | grep check-mk
check-mk-enterprise-1.5.0p24-el7-38.x86_64
check-mk-enterprise-1.6.0p13-el7-38.x86_64
check-mk-enterprise-2020.06.10-el7-38.x86_64
check-mk-raw-1.5.0p20-el7-38.x86_64
----

The deletion is performed with `rpm -e`:

[{shell}]
----
{c-root} rpm -e check-mk-enterprise-1.5.0p24-el7-38.x86_64
----

=== Debian, Ubuntu


Use the below to identify which packets are installed:

[{shell}]
----
{c-root} dpkg -l | grep check-mk
ii  check-mk-enterprise-1.5.0p24    0.bionic  amd64  Check_MK is a full featured system monitoring
ii  check-mk-enterprise-1.6.0p13    0.bionic  amd64  {CMK} - Best-in-class infrastructure & application monitoring
ii  check-mk-enterprise-2020.06.10  0.bionic  amd64  {CMK} - Best-in-class infrastructure & application monitoring
ii  check-mk-raw-1.5.0p20           0.bionic  amd64  Check_MK is a full featured system monitoring
----

The uninstallation is performed with `dpkg --purge`:

[{shell}]
----
{c-root} dpkg --purge check-mk-raw-1.2.8b9
(Read database ... 505719 Files and directories are currently installed.)
Remove from check-mk-raw-1.2.8b9 (0.trusty) ...
Delete the configuration files from check-mk-raw-1.2.8b9 (0.trusty) ...
----


[#diagnose]
== Fault Diagnosis


If an error occurs when updating {CMK}, it is usually due to one of the following three causes:

* You have installed an incompatible extension.
* There are incompatible scripts in the local structure of {CMK}.
* The manual intervention required by an incompatible item has not been performed.

[{shell}]
----
{c-omd} mkp list
{c-omd} mkp find
----

Check the output of these commands for extensions and files that may have been
in your {CMK} site for a long time and which may no longer be needed
(e.g. because their function is now provided directly by {CMK}), or which you
can no longer assign. To check their influence on the update, you can make
copies of these extensions and files and remove them from your check instance --
at least as a temporary measure.


== Files and directories

The files and directories relevant to this article can be found here.
As always, paths that _do not_ begin with `‘/’` apply after the home
directory of the (`/omd/sites/mysite`) instance:


[cols=2]
|===
|File path |Function 

|version |Symbolic link to the installation of the {CMK} version used by this instance.
|/omd/versions |Within this directory a subdirectory exists for every installed {CMK} version. The files belonging to `root` and are never changed.
|/omd/sites |Within this directory, for every instance there is a home directory containing its configuration files and variable data. This data belongs to the instance’s user, and can be changed by configuration and operations.
|/usr/bin/omd |Management command for {CMK} instances. This is a symbolic link to the default version’s `bin`-directory. When a particular instance is accessed the `omd`-command substitutes itself with that of the appropriate version.
|===

