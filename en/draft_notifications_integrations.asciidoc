= Alarmierungsmethoden
:revdate: draft
MT:Alarmierungsmethoden konfigurieren
MD:(CMK) kann über diverse Wege alarmieren, etwa Jira, PagerDuty, VictorOps oder Mail. Jede Methode muss individuell konfiguriert werden.
[.seealso][#notifications]

### Mails sind in notifications beschrieben

### Grundlegendes Individualskript in notifications beschrieben:
### Eventuell um Telegram erweitern? Eine Zeile mehr ...

### Jira in 5.6 beschrieben - Grundlage für Kapitelstruktur

COMMENT[ML: Frage: Warum kommen Custom Notifications aus den Kommandos bei OpsGenie und PagerDuty nicht an? Über Fake Check Results funktioniert es. Bei den Webhooks von Mattermost/Slack und den API-Keys bei VictorOps/Pushover funktionieren die Custom Notifications.]

== Event Console
=== Funktion
Die Event Console ist die native Anlaufstelle für Ereignisse beim Monitoring mit (CMK).
Auch eine Alarmierung ist letztlich solch ein Ereignis und kann entsprechend an die
Event Console weitergeleitet werden - quasi als (CMK)-interne Alarmierungsmethode.

=== Konfiguration
Die Einrichtung ist denkbar einfach und umfasst lediglich zwei Schritte:

. Wählen Sie in der Alarmierungsregel unter [.guihints]#Notification Method# den Punkt [.guihints]#Forward Notifications to Event Console;# optional können Sie auf eine [.guihints]#ec#syslogfacility => Syslog Facility# filtern, zum Beispiel [.guihints]#kern.}}# 
. Erstellen Sie eine [.guihints]#ec#rules-1 => Event-Console-Regel,# die die Alarmierung abfängt, beispielsweise gefiltert auf die _Syslog Facility._

Wenn die Event Console in einer entfernten Instanz läuft, können Sie in der Alarmierungsregel
natürlich auch dessen IP-Adresse als Ziel angeben.

== OpsGenie
=== Funktion
OpsGenie, mittlerweile Teil von Atlassian, bietet als Incident-Management-Plattform Alarmierungen
und Eskalationen für Teams und kann dabei viele externe Tools integrieren, darunter auch (CMK).
Die grundsätzliche Anbindung benötigt lediglich einen API-Schlüssel und eine URL, Sie können
in (CMK) jedoch auch weitere Optionen festlegen, beispielsweise zusätzliche Informationen
je nach Art der Quelle des Alarms.

=== Konfiguration OpsGenie
Zur Integration von (CMK) finden Sie direkt innerhalb von OpsGenie eine kurze
Anleitung -- die sich jedoch auf eine ältere (CMK)-Version bezieht, in der Sie noch eine
komplette URL samt API-Schlüssel übergeben mussten. In aktuellen Versionen geben Sie URL
und Schlüssel separat ein. Zudem ist die URL nur für in Europa gehostete Accounts nötig.

COMMENT[ML: In der Online-Hilfe wird eine URL in der Form my.app.eu.opsgenie.com genannt, korrekt ist aber api.eu.opsgenie.com. Da es die URL in der ersten Form ebenfalls gibt, sollte sie so aus der Hilfe verschwinden - oder die Hilfe ergänzt werden, sofern die URL in irgendeiner anderen Konfiguration in der my.app-Variante funktioniert. Und da zudem die Anleitung innerhalb von OpsGenie ebenfalls falsch ist, ist es derzeit ein wenig verwirrend ...]

. Legen Sie ein Team an oder rufen Sie ein bestehendes auf.
. Wählen Sie unter [.guihints]#Integrations/Add Integration# den Eintrag (CMK).
. In der nun angezeigten, fehlerhaften Anleitung finden Sie unter dem Punkt [.guihints]#Paste# eine URL samt Optionen und API-Key -- kopieren Sie den Domain-Teil der URL (https://api.eu.opsgenie.com).
. Kopieren Sie anschließend noch den API-Schlüssel und speichern Sie die Integration.

=== Konfiguration (CMK)
Für die Anbindung genügt in (CMK) nun die Angabe der beiden kopierten Daten:

. Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Opsgenie.}}# 
. Tragen Sie unter [.guihints]#API Key to use.# den kopierten Schlüssel ein.
. Aktivieren Sie -- als EU-Nutzer -- den Punkt [.guihints]#Domain# und fügen Sie die kopierte Domain ein.

Zum Testen können Sie wieder die [commands|Kommandos] nutzen und etwa einen Host über
[.guihints]#Fake check results# auf (DOWN) setzen. Die Funktion [.guihints]#Custom notification# generiert an
dieser Stelle hingegen keinen Alarm in OpsGenie.

Die Konfiguration der Alarmierungsmethode OpsGenie bietet Ihnen allerlei weitere Optionen,
insbesondere zum Anreichern und Ändern der Standardinhalte der Benachrichtigungen. Darüber
hinaus können Sie über den Punkt [.guihints]#Responsible teams# das OpsGenie-Team festlegen, wenn Sie
nicht wie hier beschrieben speziell für ein Team, sondern für den gesamten OpsGenie-Acccount
integriert haben -- was wiederum nur bei bestimmten Subskriptionen möglich ist.

Letztlich ist noch die Option [.guihints]#Custom Actions# erwähnenswert ...

COMMENT[ML: Was genau kommt da hin und was macht das? Testeingabe foobar war weder in der Notification innerhalb von (CMK) noch in OpsGenie zu sehen.]

COMMENT[ML: Der API-Schlüssel wird als Asterisks angezeigt - besser wäre als normaler Text, wie es auch beim Schlüssel von PagerDuty ist.]

== PagerDuty
=== Funktion
Die Incident-Managment-Plattform PagerDuty kann aus unterschiedlichsten Quellen
Meldungen empfangen und diese weiterverarbeiten, also zum Beispiel filtern, als
Alarmierungen versenden oder Eskalationen in Gang setzen. Aus (CMK) lassen sich
Benachrichtigungen ganz einfach über einen Schlüssel an die Plattform leiten.

=== Konfiguration PagerDuty
PagerDuty bietet Integrationen für viele populäre Werkzeuge, darunter auch (CMK).
Dazu benötigen Sie lediglich einen _Integration Key,_ den Sie unter PagerDuty
wie folgt anlegen:

. Erstellen Sie einen neuen Service oder öffnen Sie einen vorhandenen.
. Im entsprechenden Service erstellen Sie über den Reiter [.guihints]#Integrations# eine neue Integration.
. Vergeben Sie einen beliebigen Namen und wählen Sie als [.guihints]#Integration Type# den Punkt [.guihints]#Check_MK.}}# 
. Kopieren Sie den erzeugten [.guihints]#Integration Key.}}# 

=== Konfiguration (CMK)
In (CMK) beschränkt sich die Einbindung auf die Angabe des Integrationsschlüssels:

. Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#PagerDuty.}}# 
. Tragen Sie unter [.guihints]#Integration Key# den kopierten Schlüssel ein.

Die Filterung der erzeugten Benachrichtigungen können Sie wahlweise in (CMK) oder erst in
PagerDuty über die [.guihints]#Event Rules# umsetzen. Optional können Sie die PagerDuty-Anbindung
auch auf ein eigenes (CMK)-Nutzerkonto aufschalten. Erstellen Sie dazu einfach einen
Standard-Nutzer mit deaktiviertem Login und anschließend eine persönliche Alarmierungsregel.

*Achtung:* Sie können die Anbindung wie gewohnt über [commands|Kommandos] testen, allerdings
funktioniert das hier nicht über das Kommando [.guihints]#Custom notification.# Nutzen Sie stattdessen
das Kommando [.guihints]#Fake check results# und setzen Sie einen von der Regel erfassten Host darüber
auf (DOWN).

COMMENT[ML: Custom Notifications aus Commands funktionieren nicht - Fake Check Results schon. Warum?]


== Push Notifications
=== Funktion
Pushover ist ein einfacher Dienst, um Meldungen aus unterschiedlichsten Quellen an Apple-
oder Android-Mobilgeräte zu senden, wo sie dann als _Benachrichtigung_ auftauchen. Die
Anbindung erfolgt über zwei API-Schlüssel für eine Gruppe und eine App/Quelle.

=== Konfiguration Pushover
In Pushover müssen Sie sowohl eine Gruppe anlegen, auch wenn Sie nur eine „Gruppe“ haben,
als auch eine App explizit für (CMK) -- beide bekommen eigene API-Schlüssel:

. Legen Sie in Pushover eine neue Gruppe über [.guihints]#Create a Group# an.
. Kopieren Sie den angezeigten Gruppen-API-Schlüssel.
. Erstellen Sie eine App mit beliebigem Namen über [.guihints]#Create an Application/API Token.}}# 
. Kopieren Sie den angezeigten App-API-Schlüssel.

=== Konfiguration (CMK)
In (CMK) genügt grundsätzlich die Angabe der beiden Schlüssel:

. Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Push Notifications (using Pushover).}}# 
. Geben den App-API-Schlüssel unter [.guihints]#API Key# an.
. Geben den Gruppen-API-Schlüssel unter [.guihints]#User/Group Key# an.

Optional können Sie hier noch die Pushover-Funktionen [.guihints]#Priority# und [.guihints]#Select sound}}# 
aktivieren. Über die Priorität dürfen Sie zum Beispiel in Pushover konfigurierte
Ruhezeiten aushebeln -- und derartige Alarme mit dann auch mit passenden Tönen untermalen.

Zum Testen können Sie die [commands|Kommandos] [.guihints]#Fake check results# und
[.guihints]#Custom notification# verwenden.

== ServiceNow

COMMENT[ML: Keine Trial - scheinbar.]

=== Funktion
=== Konfiguration ServiceNow
=== Konfiguration (CMK)
### URL, Credential, "Caller ID", mehr ...

== Slack
=== Funktion
Über den Messenger <a href="https://slack.com/">Slack</a> können Sie Benachrichtigungen
einfach über einen Webhook empfangen. Das funktioniert sowohl auf selbst gehosteten
oder gemieteten Servern, als auch über den kostenlosen öffentlichen Slack-Dienst.

=== Konfiguration Slack
Um Webhooks zu aktivieren und einen neuen Webhook zu erstellen, müssen Sie zunächst
eine Slack App erstellen. Melden Sie sich bei Slack an und erstellen Sie einen
_Workspace._ Gehen Sie dann wie folgt vor:

. Erstellen Sie über <a href="https://api.slack.com/messaging/webhooks">diesen Link</a> eine neue App über die Slack-API.
. Vergeben Sie einen beliebigen Namen und wählen Sie Ihren Workspace.
. Im nächsten Dialog wählen Sie als Funktion der App [.guihints]#Incoming Webhook.}}# 
. Aktivieren Sie anschließend Webhooks, indem Sie den Schalter auf [.guihints]#on# setzen.
. Erstellen Sie den Webhook über die Schaltfläche [.guihints]#Add New Webhook to Workspace.}}# 
. Legen Sie zum Abschluss den Channel (Gruppe) fest, in den die App posten soll, und bestätigen Sie die Rechteanfrage.

Zum Testen bekommen Sie nach Abschluss eine curl-Anweisung, die _Hello World_ in den
gewünschten Channel postet. Kopieren Sie die Webhook-URL wenn es funktioniert
und wechseln Sie zu (CMK).

=== Konfiguration (CMK)
Die Konfiguration in (CMK) beschränkt sich auf die Angabe der Webhook-URL:

. Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Slack or Mattermost.}}# 
. Geben die kopierte Webhook-URL an.

Optional dürfen Sie URL-Präfixe angeben, um Links auf Ihre (CMK)-GUI innerhalb
der Benachrichtigung zu steuern. Statt die Webhook-URL hier direkt anzugeben,
können Sie ebenso den Passwortspeicher von WATO heranziehen und die URL aus einem
der Einträge auslesen.

== Mattermost
=== Funktion
<a href="https://mattermost.com">Mattermost</a> ist die selbst gehostete Open-Source-Alternative zu Slack und lässt
sich ebenfalls per Webhook mit Benachrichtigungen versorgen. 

=== Konfiguration Mattermost
Wenn Sie den Mattermost-Server frisch aufgesetzt haben, sind Webhooks bereits aktiviert. Sie
können sie aber in der Mattermost [.guihints]#System Console,# also der Verwaltungsoberfläche des Servers,
unter [.guihints]#Integrations => Integration Management# nachträglich freischalten.

Weitere Voraussetzung ist, dass Sie zumindest eine Gruppe angelegt haben -- ansonsten
können Sie die Webclient-Ansicht gar nicht erst aufrufen. Gehen Sie anschließend
wie folgt vor:

. Rufen Sie in der Gruppenansicht aus dem Hauptmenü den Punkt [.guihints]#Integrations# auf.
. Erstellen Sie einen neuen Webhook über [.guihints]#Incoming Webhooks => AddIncoming Webhook.}}# 
. Vergeben Sie nach Belieben Namen und Beschreibung und wählen Sie den Channel für die Postings mit den Benachrichtigungen.

Anschließend wird die Webhook-URL generiert -- kopieren Sie diese.

=== Konfiguration (CMK)
Die Aktivierung in (CMK) beschränkt sich wie auch bei Slack auf die Angabe der Webhook-URL:

. Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Slack or Mattermost.}}# 
. Geben die kopierte Webhook-URL an.

Optional dürfen Sie URL-Präfixe angeben, um Links auf Ihre (CMK)-GUI innerhalb
der Benachrichtigung zu steuern. Statt die Webhook-URL hier direkt anzugeben,
können Sie ebenso den Passwortspeicher von WATO heranziehen und die URL aus einem
der Einträge auslesen.

== SMS
=== Funktion
=== Konfiguration smstools
### https://www.thomas-krenn.com/de/wiki/SMS_Server_Tools_Installation_unter_Ubuntu
### Textdatei wird nur nach /var/spool/sms/outgoing/ kopiert
=== Konfiguration (CMK)
### Was machen die Parameter?

== Spectrum
=== Funktion
Der Spectrum Enterprise Manager kann SNMP-Traps empfangen und auswerten, die (CMK)
in dieser Konfiguration für die Alarmierung nutzt. 

COMMENT[ML: In Ermangelung eines Spectrum-Servers ist das Folgende ein wenig geraten. Ich habe hier aber einen SNMP-Trap-Receiver aufgesetzt und da kommen die Meldungen auch einfach durch. Falls jemand mehr weiß ...]

=== Konfiguration Spectrum
Für den Empfang von (CMK)-Alarmen müssen Sie auf dem Spectrum-Server keine zusätzliche
Konfiguration vornehmen, der Empfang von SNMP-Traps ist dessen Standardvorgehensweise.

=== Konfiguration (CMK)
Die Anbindung in (CMK) beschränkt sich auf die Angabe der Zugangsdaten, also
IP-Adresse und SNMP-Community/-Passwort:

. Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#Spectrum Server.}}# 
. Tragen Sie die IP-Adresse des Spectrum-Servers sowie das SNMP-Passwort ein.
. Vergeben Sie optional eine neue Basis-OID für die (CMK)-Traps.

Zum Testen können Sie die [commands|Kommandos] [.guihints]#Fake check results# und
[.guihints]#Custom notification# verwenden.

== VictorOpS
=== Funktion
Die Incident-Management-Plattform VictorOpS kümmert sich um das Verteilen von Meldungen
aus Dutzenden unterschiedlicher Quellen, die als Integrationen direkt in der
Weboberfläche ausgewählt werden können. Für (CMK) steht ein generisches
REST-Backend zur Verfügung. 

=== Konfiguration VictorOpS
Eine explizite Aktivierung der Benachrichtigungen aus (CMK) benötigen Sie nicht,
lediglich die REST-Endpoint-Adresse:

. Rufen Sie in VictorOps unter [.guihints]#Integrations# den Punkt [.guihints]#REST Generic# auf.
. Kopieren Sie die angezeigte REST-Endpoint-URL.

=== Konfiguration (CMK)
In (CMK) müssen Sie lediglich diesen Schlüssel angeben:

. Wählen Sie als [.guihints]#Notification Method# den Punkt [.guihints]#VictorOps.}}# 
. Tragen Sie unter [.guihints]#VictorOPS REST Endpoint# die kopierte URL ein.

Zum Testen können Sie die [commands|Kommandos] [.guihints]#Fake check results# und
[.guihints]#Custom notification# verwenden.


