= Host Administration
:revdate: 2018-07-05
[.seealso][#wato] [#wato_rules] [# wato_services]:title: Managing systems being monitored
:description: Scalability of care is part of the basic design of checkmk. The available options for easily maintaining and structuring hosts can be learned about here.


== Introduction

When setting up the monitoring, certainly the most important task is the
administration of the systems to be monitored -- the _Hosts_. It’s not
just about registering the correct master data (e.g., host name, IP address) -- settings
for the monitoring (e.g., alarms, threshholds, etc.) also need
to be attended to.

(CMK) has been developed from its beginning for environments with a large
number of hosts. In order for the configuration to be manageable for the user,
(CMK) pursues a different approach to configuration than other systems
that originated from the Nagios ecosystem. The most important principles are:

* a folder hierarchy in which the hosts are stored
* Host Tags, and based on these, a [wato_rules|rule based] configuration
* [wato_services|Automatic detection] of the services to be monitored


[#folder]
=== Folders and their hierarchies

Everyone who works with computers knows the principles of data sets and
folders.  WATO uses a similar principle for administering hosts, which in
effect take on the role of data sets.  Insofar as folders themselves can be
in folders, the result is a ‘tree structure’. There are three widely-used
criteria for building the host-tree:

* *Location* (e.g. Munich versus Shanghai)
* *Host type* (e.g. Switch versus Loadbalancer)
* *Organisation structure* (e.g. Database group versus Networker)

Naturally you can also mix these criteria in a tree with, for example,
subdivision by location in the first level, and by host type in the second.

If you love simple things you should pack the actual hosts only in the
tree’s _‘leaves’_ (although Checkmk also allows hosts in intermediate
folders). The following example shows a simple tree structured by host type:
The hosts _A_, _B_ and _C_ are in the folder _Servers_
and _D_, _E_ and _F_ in _Network_ :

image::bilder/wato_folders_step_2.png[align=center,width=430]


[#inheritance]
=== Attribute inheritance

If you build the tree cleverly you can use it to _pass on attributes_ in a
meaningful manner. This is especially useful with attributes that are the same for
large groups of hosts, e.g., the SNMP community, or _Host characteristics_
such as [.guihints]#Agent type}},# with which you define whether the host should be
monitored per SNMP or via a Checkmk agent.

The following example shows the passing-on of the [.guihints]#Agent Type# attribute
with the `cmk-agent` and `snmp-only` values, likewise the
[.guihints]#Criticality# attribute with the `prod` and `test` attributes:

image::bilder/wato_folders_step_4.png[align=center,width=500]

Attributes defined lower in the tree always have precedence. Values defined
directly at the host therefore overwrite everything that comes from the
folders. In the above example, the host _A_ receives the `prod`
and `cmk-agent` attributes, host _D_ receives `prod`
and `snmp-only`, and host _F_ -- because of the explicit attribute
`test` at the host -- receives the `test` and `snmp-only`
values.

A big advantage of this procedure over the the widely-used _copy & paste_
approach of data base oriented configuration systems is that you can PREdefine
attributes for hosts that will be registered *in the future*. This makes
your (or your colleagues’) work easier -- simply throw the new host into the
correct folder and all settings will automatically be correct!


=== Permissions

A further function of the folder is the assignment of _permissions for
creating and editing hosts_. Checkmk here differentiates between rights
in WATO and the contact allocation in monitoring. It’s not always the case
that the persons authorised to create a host are the same people who are
responsible for the host’s operational monitoring. The permissions are
explained in their [wato_user#wato_permissions|own article].

You create new folders via the ICON[button_new_folder.png] button. The
options are the same as when creating new hosts, which we will explain in
detail below.

[#create_hosts]
== Creating hosts in WATO

You can manage folders and hosts via the ICON[icon_folder.png] [.guihints]#Hosts}}# 
WATO module:

image::bilder/wato_hosts.jpg[]

The create host ICON[button_new_host.png] button, the clone
ICON[button_insert.png] button and the edit host ICON[icon_edit.png] button
take you to the page with the host’s _attributes_. This consists of
three sections:


=== The host name

Most important is the _host name_. Everywhere in Checkmk this field
serves to _explicitely identify_ the host. The host name is entered in
internal references, used as a component of the URL, serves as a part of file
names and indexes, and appears in log files, etc. There is in fact a function
for changing host names at a later date -- this is however a time-consuming
and complex procedure that is best avoided. You should therefore select
host names carefully. The host’s name does not necessarily _need_
to match the host’s DNS name, but it makes many things easier.

image::bilder/new_host_1.png[align=center,width=570]


[#dns]
=== Basic settings: alias and IP addresses

In the [.guihints]#Basic settings# under _Alias_ you can give the host an
alternative, descriptive name which will be displayed in many locations in
the GUI as well as in reports. If no alias is defined, the host’s name will be
used as an alias.

image::bilder/new_host_2.png[align=center,width=570]

You have four options for configuring the _IP address_:

[cols=, ]
|===


  <th style="width=5%">Option</th>
  <th style="width:50%">Procedure</th>
  <th>DNS Action</th>


  <td>1
  <td>You enter _no_ IP address. The host name must be resolvable via DNS.
  <td>with {{Activate changes}}


  <td>2
  <td>You enter an IP address – in the standard format.
  <td>never


  <td>3
  <td>Instead of an IP address you can alternatively enter a DNS-resolvable host name.
  <td>during check execution


  <td>4
  <td>Via [wato_rules|rules set] {{Hosts with dynamic DNS lookup during monitoring}} you
      determine hosts for a dynamic DNS. The result is similar to 3, except that the _host name_
      field is used for DNS query. 
  <td>during check execution

|===

With the _host name_ method Checkmk uses cached data in order to
minimise repeated DNS requests during an [.guihints]#Activate Changes# -- which is very
important for accelerating the activation procedure. Furthermore, the cache ensures
that a changed configuration can still be activated if the DNS stops working.

The catch is that Checkmk doesn't automatically notice the change to
an address in DNS. For this reason, in the host details there is the
ICON[button_update_dns_cache.png] button which deletes the entire DNS cache and
forces a new resolution at the next [.guihints]#Activate changes}}.# This file is found
under `~/var/check_mk/ipaddresses.cache` in your instance, by the way.
Deleting this file has the same effect as the button as described above.

(CMK) incidentally also supports monitoring via *IPv6* -- also in
Dualstack. Details can be found in its [ipv6|own article].


=== Host tags: Checkmk agent or SNMP

The final important setting can be performed in the [.guihints]#Host tags# box. The
attributes shown here can be extended as desired, and can be used via
[wato_rules|rules] to configure all host and service parameters very
efficiently.

(CMK) automatically creates four groups of tags, of which
*{{Agent type}}*# and *{{IP address family}}*# are important
because these have already been evaluated via existing rules, and are in
effect ‘armed’. [.guihints]#Criticality# and [.guihints]#Networking segment# are examples.

image::bilder/new_host_3.png[align=center,width=570]

For [wato_monitoringagents => {{Agenttype}}]# the three most important settings
are:

[cols=, ]
|===


  <td>{{Check_MK agent}}<td>The host should be monitored via the
  [wato_monitoringagents|(CMK) agents]
  (which must be installed of course).
  Select this setting also in the case of _special agents_, such as e.g., ESX-Monitoring


  <td>{{SNMP}}<td>The host should be monitored via [snmp|SNMP].
   This selection allows the {{SNMP Community}} field to appear in {{Basic settings}},
   with which you can define the SNMP-Community. Since this is generally the same for many hosts,
   it is rather recommended that it be defined in a folder.
   If nothing is specified `‘public’` is automatically assumed.
   


  <td>{{No agent}}
  <td>Such hosts are without agents and are monitored only with
  [active_checks|Active checks]. Rules for
  these are found under {{Host & Service Parameters|Active checks}} in WATO. If
  you don’t define at least one active check then (CMK) creates a PING
  service automatically.<br><br> The {{No agent}} setting is also the correct
  one if the host is to be monitored per
  {{piggyback technique}} from another host. This also applies to e.g.,
  VMs from ESX, on which _no (CMK) agent_ is installed.

|===


=== New features from version 1.6.0

Please note that as of version VERSION[1.6.0] of Checkmk the input dialog for the
hosts is structured more logically:

* The setting for the agent can now be found in the [.guihints]#Data Sources# box.
* The custom host tags, as well as the predefined example tags [.guihints]#Criticality# and [.guihints]#Networking Segment}},# are now located in the [.guihints]#Custom Attributes# box. There you will also find the new [.guihints]#Labels# box (more on this in a moment).
* The IP address has moved to its own box [.guihints]#Network Address}}.# 

[#labels]
=== Labels

Starting with version VERSION[1.6.0] of Checkmk there is the new concept of
[labels|Labels]. A host can have any number of labels. Labels are similar to
host tags, but unlike those, they do not have to be predefined -- you can assign
them freely.

Enter labels for the hosts by clicking [.guihints]#Add some Label# with the mouse. Press
*Enter* after each label to complete it! Use the crosses to remove labels.

image::bilder/wato_host_labels_entry.png[]

If you don't really need a value for a label, but just want to know whether a
certain label is attached to the host or not, you can simply enter `yes`
as value (`vm:yes`). If you follow this scheme consistently, you will
find it easier to define conditions for such labels later.

By the way, labels can also be automatically attached to hosts: on the one hand
by external connectors that automatically create hosts (e.g. automatically
detected hosts in cloud environments), on the other hand by rules.

=== Saving and more

After creating or cloning a host the next logical step is always
[.guihints]#Save & go to Services}}.# With this you enter the automatic service detection, a
subject we want to address in the next section. [.guihints]#Save & Test# takes you into
the diagnosis mode – with which you can test whether the settings being used
produce ANY data at all from the agent. Details about the diagnosis mode can
be found in the [wato_monitoringagents#diagnosticpage|article on the agents].


[#services]
== Configuring services

image::bilder/services_illu.png[align=border,left]

After creating a host the next step is the configuration of its [.guihints]#services}}# 
to be monitored. All details for the automatic detection and configuration
of the services can be found in its [wato_services|own article]. We will
describe only the most important here. <br><br>

There are various ways of accessing the list of a host's _configured_
services in WATO:

* with the [.guihints]#Save & go to Services# button on a host’s detail page
* with the ICON[button_services.png] button on a host’s detail page (without saving)
* with the ICON[button_services.png] symbol on the list of hosts in a folder
* in the ICON[icon_menu.png] menu, by selecting the [.guihints]#Check_MK Discovery# service with the ICON[button_services.png] [.guihints]#Edit Services# entry

image::bilder/wato_services.png[align=border]

A few relevant tips:

* The usual method when creating a *new* host is to use the [.guihints]#Save manual check configuration# button, which adopts all services to be found for monitoring ({{Available (missing) services}}).# 
* If you open an existing host’s page and find services that are not currently being monitored, then the [.guihints]#Activate missing# button is a sensible tool -- this adds the missing services.
* The [.guihints]#Full scan# button enables fresh, complete data to be obtained from a target device. Checkmk works with cached data to enable the rapid loading of pages for a normal monitoring’s displays. With SNMP devices the button starts an active search for new check plug-ins and can possibly find further services.
* [.guihints]#Automatic Refresh# is the same as a clearing and fresh detection of all services. This is useful for services which can recall the state detected by a discovery (e.g., the current state of switch ports).
* Via the check boxes you can select or deselect individual services. This is only a temporary solution as the service detection always highlights missing services. To permanently ignore a service requires the creation of a _rule_, and is achieved with the ICON[button_ignore.png] symbol.
* As always after every change an [.guihints]#Activate Changes# is necessary in order for them to take effect.
* All further information can be found in the article on [wato_services|Service configuration].


[#bulk_operations]
== Bulk operations

You may occasionally wish to perform tasks such as deleting, moving, editing
or service detection for a whole series of hosts simultaneously. WATO provides
so-called _bulk operations_ for this purpose. These always apply
for hosts that are located directly in a folder. You can restrict the selection by
entering a search text to the left of [.guihints]#Search}},# or via check boxes which
you activate with ICON[icon_checkbox.png]. With a final click on one of
the buttons in the Bulk bar the operation will be carried out or at least
be initiated for all hosts.

image::bilder/wato_bulk_operations.png[align=border]

Here are a few tips for the less self-explanatory operations:


=== Edit and cleanup

[.guihints]#Edit# enables changes to one or more attributes on all selected hosts.
The attribute is thereby entered explicitely in the hosts. Attention: there
is a difference between the host _inheriting_ an attribute from a folder,
and the attribute being set _explicitly_. Why? In the latter case a
change to the attribute in the folder would have no effect, as the values
defined directly in the host always have priority.

The [.guihints]#Cleanup# operation is available for this reason. With this you can
delete explicit attributes from the selected hosts and reinstate inheritance.
The same result can be achieved by opening every host individually and
deselecting the attributes via the check boxes.

It is generally a good idea to use as few explicit attributes as possible.
When everything is inherited correctly via the folders, errors are reduced
and the easy integration of new hosts is made possible.


=== Discovery

You can find details about Discovery in the article on
[wato_services#bulk_discovery|Services].


[#search]
== Host searches in WATO

WATO offers its own search function for _configured_ hosts, with which you
can search beyond the limits of folders. Why can’t you simply search via the
views in monitoring? That would certainly work with the search for a single
host. You could access this host via the ICON[icon_wato.png] symbol in WATO.

But let us remind ourselves: in the [wato|Introduction to WATO article] we
saw that the hosts in the _configuration environment_ are not necessarily
the same as those in the _operational monitoring environment_. The WATO
search additionally offers the possibility of performing bulk operations
immediately on the discovered hosts.

The search can be reached via the ICON[button_search.png] button you can
find in every folder. The search always preceeds from the current folder
recursively through all subfolders. To search globally, simply use the search
from the main folder. In the [.guihints]#Hostname# field an _infix search_ is
valid -- the entered text must only be a part of the host name. Furthermore,
you can restrict the search with characteristics or other attributes:

image::bilder/wato_search.png[align=border]

All search terms are connected with _AND_. The example in the above
image illustrates a search for all hosts with the [.guihints]#Test system# attribute
that also include [.guihints]#ora# in their name.

The resulting list behaves almost like a normal folder. This means that here
you can work with _Bulk operations_, in order, for example, to move all
discovered hosts into a specific folder. If you don’t like the results, you can adjust
and refine the seach at any time with ICON[button_refine_search.png].


[#import]
== Importing hosts from CSV data

If you wish to import a large number of hosts from a previous monitoring
system or from an Excel table, you can make the task easier by importing
with the help of CSV data. Checkmk is very flexible when reading such CSV data.
In the simplest case you just need a file in which every line contains a host
name that can be resolved via DNS:

.import.csv

----myserver01
myserver02
myserver03
----

During an import it is also possible to take on additional attributes. If the
CSV data has attribute names in the first line, Checkmk can even assign
these automatically. To this end Checkmk attempts to use a tolerant rather
than an exact syntax. In the following data WATO can automatically correlate
all four columns correctly:

.import.csv

----hostname;ip address;alias;agent
srvlnx17;10.0.0.10;web99;cmk-agent
srvlnx18;10.0.0.32;Backupserver;cmk-agent
switch47-11;;Backpserver23;snmp-only
----

The procedure is as follows: select or create a target folder for the
import. Switch to this folder and click on ICON[icon_bulk_import.png].
In the dialogue that opens either upload the data, or select {{Content
of CSV file# and copy the content into the input field that opens. You can
even automatically perform an immediate service discovery on the newly-imported
hosts with the [.guihints]#Perform automatic service discovery# option:

image::bilder/wato_bulk_import_step1.png[]

Selecting a separator in the next step is not necessary here, as it will be
recognised automatically. Here you select the [.guihints]#Has title line# option:

image::bilder/wato_bulk_import_step2.png[]

A click on [.guihints]#Update preview# displays the following table:

image::bilder/wato_bulk_import_step3.png[align=border]

If the automatic recognition of a column doesn’t work you can manually-select
the attribute to be assigned. Under the host attributes in the
CSV data it is essential that the attribute’s internal name be used (here
e.g. `cmk-agent`, and not [.guihints]#Checkmk agent (server)}}).# The exact
internal names can found with ICON[icon_hosttag.png] Host Attributes in the
WATO module.

If you have earlier selected [.guihints]#Perform automatic service discovery}},# the
same mask as used in [wato_services#bulk_discovery => {{Bulkdiscovery}}]# appears.
After the discovery completes, all that is needed is the familiar
[.guihints]#Activate Changes# for all of the new hosts to be in the monitoring!


[#parents]
== Creating parents

=== Creating parents manually

You have already learned how [monitoring_basics#parents|Parents] functions,
and what the states of [monitoring_basics#hosts|Hosts] and [monitoring_basics#notifications|Notifications]
are all about. But how does one actually create Parents? The answer is typically
(CMK): there are a number of different procedures -- manually, per scan, or via the Web-API.

A parent for a single host can be specified as follows: In [.guihints]#WATO => Hosts# open the
desired host’s attributes. In the [.guihints]#Basic Settings# section enter the parent using
its name or IP-address.
Once a parent has been specified, a further entry field for an additional parent will
be opened.

*Important*: Only direct Parent-Hosts may be specified.

image::bilder/parents_host_config.png[]


Similarly, parents can also be defined in a folder’s attributes,
and be inherited by the hosts they contain.
How this is achieved has already been seen in the section on
[wato_hosts#inheritance|Host-Management].


=== Creating parents using a scan

If the monitoring is a new installion, which from the very beginning has been
planned with an orderly folder and parents structure, there should be no real
problems with the inheriting of parents via folders. Parents can also be set up
automatically using a scan. The [.guihints]#Parent Scan# can be found in [.guihints]#WATO => Hosts}}# 
in each individual folder.

Via the IP-Protocol the scan searches for the last Gateway before a host on
the OSI-Model’s (Layer 3) Network Layer using _traceroute_.
If such a Gateway is found and its address belongs to one of your monitored hosts,
this host will then be set as a parent. If the Hop’s traceroute receives no
information from the targeted host, the info from the last successful Hop will be used.

If however no gateway with a monitored IP-address is found, as standard
(CMK) generates an artificial Ping-only-Host in the
[.guihints]#Parent# folder which will be simultaneously generated by default.

This standard setting can also produce undesirable results. For example, take a typical,
small network with the address range _192.168.178.0/24._ If a host with an address
in a different address space -- which cannot be pinged -- is added to this monitoring,
the scan will attempt to access it via the router,
and there it will find only a net-provider node.
Thus, for example, it can happen that a telecom-server in the WAN-network is defined
as a parent for this host. This option can of course be deactivated.

If you wish to scan a folder with new hosts for parents, proceed as follows:

First navigate to the desired folder and click on the
ICON[icon_parentscan.png] [.guihints]#Parent scan# icon.

image::bilder/parents_folder_scan3.png[align=border]

The Scan-Configuration will open. To fully scan in all hosts in all subfolders,
independently of possible manually-installed parents, under [.guihints]#Selection# choose
the [.guihints]#Include all subfolders# and [.guihints]#Scan all hosts# options.
In the [.guihints]#Performance# menu you can limit the scan-duration – which otherwise
can take a very long time if there is a large number of hosts.

In [.guihints]#Creation of gateway hosts# specify if, how, and under which alias new
parent-hosts should be created. Deactivate this function if it is to be
restricted to parents on monitored hosts.

image::bilder/parents_configuration.png[]

Now start the scan. The scan’s output can be followed live. On completion the
changes must as usual be activated with [.guihints]#Activate Changes.}}# 
Finally the configured parents and, if applicable, a new folder [.guihints]#Parents}}# 
can be viewed in [.guihints]#WATO => Hosts}}.# 

image::bilder/parents_host_list.png[align=border]

With this the scan has been completed.

Following a scan process the Parent-Child relationship will be automatically opened
as a topological diagram, which can also be displayed with [.guihints]#Views => Network Topology}}.# 

image::bilder/monitoring_parents.png[align=border]

*Tip:* If the result of a scan appears to be implausible at any point,
invoking a manual traceroute can sometimes help with analysing the individual hops.

By the way -- one can also scan selected hosts, rather than a complete folder:
in ICON[icon_checkbox.png] activate the check boxes, select the desired hosts,
and start the group-action [.guihints]#Parentscan}}.# 

image::bilder/parents_scan_selection.png[align=border]


=== Creating parents without WATO

For more experienced users there is the additional facility for configuring parents by
using [web_api_references|Web-API].


[#rename]
== Renaming hosts

Renaming hosts -- on the face of it a simple matter -- turns out to be an
astoundingly-complex operation on closer inspection. The reason for this
is that Checkmk uses the host’s name as the unique key for the host – and
this is used in numerous locations. These include log data, file names,
configuration rules, BI agreggations, reports, dashboards and much more.
The host name also appears in URLs.

WATO has a specific function for cleanly-renaming a host in all locations.
In a host’s details you can rename it by using the
ICON[button_rename_host.png] button, or in a folder rename multiple hosts
simultaneously with the ICON[button_bulk_renaming.png] button.

By utilising intelligent operations, [.guihints]#Bulk Renaming# allows systematic
name matching to be made. In the [.guihints]#Hostname matching# field you optionally
enter a regular expression that matches *the first characters* of
the names of the hosts that you wish to rename -- here as an example, all hosts
whose names begin with `mysrv`. Then enter one or more operations
*in the sequence* that they should be applied to the hosts. In the
following example, for all hosts everything after the first `‘.’`
will be truncated and replaced by the ending `‘.servers’`:

image::bilder/wato_bulk_renaming.png[]

Numerous operations are available. Please activate the Online Help
ICON[icon_help.png], and select the operation to receive an explanation
about it. Following the obligatory _“Are you sure...?”_ query...

image::bilder/wato_host_rename_sure.png[]

... the processing can take a while. During the renaming the monitoring will be
*completely stopped*! This is necessary to keep everything in a
consistent state. On completion you will receive on overview listing which
and where renames have taken place:

image::bilder/wato_host_rename_finish.png[]




== Host groups


=== Why have host groups?



Host groups are a part of the [monitoring_basics|monitoring basics in Checkmk].
They enable a second layer of groups of hosts across the folder structure.
For example: your locations are displayed based on the folders. Now you would like
to be able to view all Linux, or particular application-servers together.
By using a host group you can generate suitable [views|views], create NagVis-maps,
and likewise customise [notifications|notifications] and [alert_handlers|alert handlers].
In contrast to the situation in [wato_rules#hosttags|host tags],
host groups do not appear as selection criteria in rules: host groups serve the views,
while host tags serve the configuration.
Host groups can be found under [.guihints]#WATO => Host & Service Groups}}:# 

image::bilder/hostgroups_list2.png[align=border]



=== Creating and editing host groups



A new host group is created using ICON[button_new_hostgroup.png].
The creation is a trivial action, and is limited to specifying a unique name which
cannot be changed later, and likewise an alias:

image::bilder/hostgroups_config.png[]

To finish, as usual the modifications must be activated with [.guihints]#Activate Changes.}}# 




=== Including hosts in a host group



To add hosts to a host group, try the [.guihints]#Assignment of hosts to host groups}}# 
[wato_rules|rule set], which can be found under {{WATO|Host & Service Parameters|Grouping}}.
Create a new rule in the desired folder with ICON[button_create_rule_in_folder.png].
Next, in the [.guihints]#Assignment of hosts to host groups# panel specify to which host group
the hosts are to be assigned -- in the example below something like the group _myhostgroup_,
or respectively its alias _My Host Group:_

image::bilder/hostgroups_rule_assignment.png[]



Finally, in the [.guihints]#Conditions# panel, attend to these or to the filters.
You can filter hosts by host tags and folders, or specify particular hosts.
Filters can of course also be combined to restrict the group.
Should you wish to add hosts with two tags from the same attributes group
to the host group, you will need to create two separate rules. In general,
the group assignments are cumulative. Hosts can be in multiple groups and groups
can be filled with multiple rules. You can also specify hosts in the form of
[regexes|regular expressions] so that all hosts which include _backup_ but
not _testing_ in their names can be captured with a single entry.

image::bilder/hostgroups_rule_conditions.png[]




=== Checking a host’s host groups



You can check the result of your mappings on a host’s status page using
ICON[button_host_status.png] in the host properties.
Below, by default towards the bottom, is the line [.guihints]#Host groups the host is member of}}:# 

image::bilder/hostgroups_host_status.png[align=border]




=== Using host groups




As mentioned above, you can use host groups in three places:
you can create [views|views], build NagVis maps, and they can be used as filters
in rules for [notifications|notifications] and [alert_handlers|alert handlers].
Only the specification of [.guihints]#Hostgroups# as the data source is important.
The [.guihints]#Views# widget of course includes ready-made views, such as this handy summary:

image::bilder/hostgroups_view_summary.png[align=border]

Click on the names of the host groups to get a complete view of the hosts in this group.

When used in NagVis maps, for example, you get summaries of host groups via a hover
menu over each icon:

image::bilder/grouping_hostgroup_nagvis.png[]



When you use host groups in [notifications|notifications] and
[alert_handlers|alert handlers] they are available as
[wato_rules#conditions|conditions/filters]:

image::bilder/hostgroups_notifications_rule2.png[]


== The folder structure in the monitoring view

The tree structure derived from the folders is also visible to their users
in monitoring. On the one hand, there is a [.guihints]#WATO Folder# filter in all
[views|views] that you can use to restrict the current view to only those hosts
below a particular folder:

image::bilder/filter_wato_folder.png[align=center,width=50%]

On the other hand, via the [.guihints]#Folders# sidebar element you can restrict the
view on the right side to a single folder:

image::bilder/folders_snapin.png[align=center,width=50%]

This element functions in conjunction with the [.guihints]#Views# element. Once
selected, a folder is retained even if you select another view. This works
for dashboards as well. Try it for yourself!
