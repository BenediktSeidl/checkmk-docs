include::global_attr.adoc[]
= Time periods
:revdate: 2016-11-16
:title: Restricting actions to specific times of the day
:description: With time periods common restrictions, such as working or service times and others can be mapped. You can find out how this works here.

[{related-hint}]
{related-title}
--
* link:wato.html[Configuring Checkmk]
* link:basics_downtimes.html[Scheduled downtimes]
* link:wato_rules.html[Host and service parameters]
--


== Introduction

[{image-left}]
image::icon_timeperiods.png[width=107]

In order to adapt the monitoring to the working rhythms of humans, and so,
for example, to avoid senseless notifications, {CMK} has the capability of
making various settings dependent on both the time of day, or day of the week.

So that the configuration is simple and clear, this is achieved in two stages.
First, define the [.guihint]#time periods#. For example, a period could be called
‘Working Hours’, and contain Monday to Friday, and 8:00 to 17:00 (8 am to
5 pm). Thus every time period is either active or inactive at any particular
point in time.

These time periods can then subsequently be used in the configuration.
They are used in the following rules -- among others. What these rules all
have in common is that the application of time periods is optional, and that
the time periods restrict the rules’ chronological operation range:

[cols="30,~"]
|===

|[.guihint]#Notification period for ...# |A restriction to the times in which a link:notifications.html[notification] will be generated for a host or service. No alarm will be triggered outside the defined times and the chain of notification rules will not be actioned.
|Notification rules |Likewise, in each link:notifications.html#rules[notification rule] you can define a specific time period as a condition. For example, the notification method (Email or SMS) can be made dependent on the time of day.
|[.guihint]#Check period for ...# |With this the execution of checks can be restricted by time. The checks will not be executed outside the defined time period, and the status retains the same condition it had at the last check execution. Please use this carefully. A service can still remain flagged as {OK}, even though it may actually have been CRITICAL for hours.
|[.guihint]#Service period for ...# |With the aid of a service period you can calculate the percentage of the time a service is available over a specified time period.
|Event Console |The validity of rules in the link:ec.html[Event Console] can be dependent on a time period. For example, you can declare particular log messages to be unproblematic at certain times.
|Alert handler rules |The execution of link:alert_handlers.html[Alert handler rules] can likewise be controlled using time periods.
|Threshold values |Future versions of {CMK} may also enable time control of the threshold values from checks. A server’s threshold values for CPU load could be configured differently depending on day or night, for example.
|===



== Configuring time periods

=== Weekdays

Time periods are managed with the icon:icon_timeperiods[] [.guihint]#Time periods# link:wato.html[WATO] module.
The implicit, ever-present [.guihint]#Always# period is not shown in the list and therefore
can neither be altered nor deleted.

As usual in WATO, the time period definitions have an internal ID and a
display name ([.guihint]#Alias#).
Only the latter can be altered later, and this is the name which will be
shown in selection lists, etc. For every weekday you can enter three time ranges
for which the time period will be _active_. Use the 24-hour format for entries.

Important: to include a complete day up until midnight,
enter `00:00` -- `24:00`, even though the time 24:00 doesn’t actually exist.
You can either configure every single day of the week or set the same value
for all seven days via [.guihint]#Same times for all weekdays#.

image::create_timeperiod.png[]

=== Individual calendar days

With the aid of [.guihint]#Add Exception# you can enter single calendar days in the
‘International Date Format’ (YYYY-MM-DD) -- for example, `2017-12-25`.
On these days _only_ the values entered in
the Exceptions menu (see below) are effective:

image::timeperiods_exception.png[]

For example, an individual calendar of public holidays can be
created. The [.guihint]#Monday# to [.guihint]#Sunday# lines will be empty, and in each listed
day enter `00:00` -- `24:00` for the holidays as required.

=== Excluding time periods from other time periods

A holiday calendar such as this can be _excluded_ from another time period.
The most common example is excluding the holidays from a time period for normal
office hours. Simply check your ‘holidays calendar’ box in the [.guihint]#Exclude# field:

image::timeperiods_holidays.png[]

=== Importing a calendar from the internet

For vacation and holiday calendars, importing calendar data in the iCal-format
is conveniently available. Such files are easily found on the internet
and spare you the work of having to enter dates laboriously by hand.
For example, holidays for all German states can be found under
link:https://www.ferienwiki.de/exports/de[www.ferienwiki.de/exports/de].
No doubt there will be a similar source for your country as well.

Import such data with the icon:icon_ical[] button, and in the
mask specify the range of future years for which the regular holidays should be
entered into the time periods:

image::timeperiods_ical.png[]

A pre-filled time period definition will then be opened, in which you only need to
enter the ID and name -- once completed you can then exclude this time period from other
time periods, as described above.
