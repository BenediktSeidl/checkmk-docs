include::global_attr.adoc[]
= The user interface
:revdate: draft
:title: The user interface
:description: After the first login you land on the {CMK} start page. The most important elements are explained here: navigation bar, main page, side bar.

{related-start}
link:intro_welcome.html[Beginner's guide]
link:monitoring_basics.html[Basic principles of monitoring with Checkmk]
link:wato.html[Configuring Checkmk]
// link:graphing.html[Performance data and graphing]
{related-end}


== Introduction

{CMK}’s graphical user interface (GUI) has two functions:

* It displays in the *monitoring environment* the current status of all hosts, services and events.
* It is used in the *configuration environment* to manage and _setup_ the monitoring environment.

For these two functions {CMK} offers two views of the hosts and services -- and to get started with both functions also two menus: the [.guihint]#Monitor# and the [.guihint]#Setup# menu.

The following picture shows the start page of {CMK}, which can be seen directly after logging in:

image::gui.png[]

In this article, we will look at all the elements you see on this start page -- working our way through the {CMK} user interface from left to right: from the navigation bar to the xref:main_page[main page] to the xref:sidebar[sidebar].

////
A feature of {CMK}’s interface is that it can simultaneously display and configure multiple monitoring instances, and then perform like a large system.
////


[#navigation_bar]
== Navigation bar

// Start inc_navigation_bar.asciidoc
[{image-left}]
image::navbar.png[width=70]

With the _navigation bar_ on the left and the icons it
contains, you make the basic decisions about what {CMK} should do for you:

[.guihint]#Monitor# -- The monitoring itself

[.guihint]#Customize# -- For the customisation of interface elements useful for the monitoring (such as bookmarks, views, dashboards and graphs)

[.guihint]#Setup# -- for the setting up of the objects to be monitored (such as hosts and services)

Behind these three symbols are more or less extensive menus, the so-called
'mega menus' or symbol menus, whose entries are divided into several topics --
for example, in the [.guihint]#Setup# menu under the [.guihint]#Hosts# topic you will find entries
for configuring hosts, host groups, host tags and host-specific rules.
// We will use one of these entries in the xref:intro_setup_monitor#[next chapter] when setting up the first host.

At the bottom of the navigation bar, in the [.guihint]#User# menu, you will find entries that apply to your {CMK} user account.
At the top right of the menu you will see the current user name (currently `cmkadmin`) and the xref:wato_user#roles[role] (`admin`) assigned to this user. 
In this menu you can change the password, log out of the {CMK}
interface and personalise your profile. 
An overview of the personal settings can be found in xref:user_interface#user_menu [chapter on the User menu].

In the [.guihint]#Help# menu you will find the edition and version of {CMK} currently in
use and some entries with which you can call up documentation and information -- inside
{CMK} or outside. Among other things, you can also open this User guide. If there are incompatible changes after an xref:update#[Update], you will see the number in the [.guihint]#Help# menu icon. In the [.guihint]#Help# menu itself, a link in red background colour is then displayed with which you can open the list of _Werks_ of these incompatible changes. There are [.guihint]#Help# menu items for calling up version-specific information, including opening the release notes.

The navigation bar is completed at the very bottom by [.guihint]#Sidebar# (which allows
you to hide or show the sidebar by simply clicking on it) and at the very top by
the {CMK} logo. Clicking on the logo always takes you back to the default
dashboard displayed on the main page.
// End inc_navigation_bar.asciidoc


[#monitor_menu]
=== Monitor menu

// Start inc_monitor_menu.asciidoc
Your basic toolbox for completing all monitoring tasks is the [.guihint]#Monitor# menu,
which you can open via the navigation bar:

image::monitor_menu_less.png[]

In this menu you will find the tools that will provide you with answers to your
monitoring questions. The menu is subdivided according to _topics_.
You will find the menu items listed below each topic.

After selecting one of the entries in the [.guihint]#Monitor# menu, the requested
information is usually displayed on the main page either as a
dashboard or as a view -- each of
which we will cover in more detail in this article.

*Note:* You can also load the contents of the [.guihint]#Monitor# menu into the
sidebar -- as a snapin with the title [.guihint]#Views#. This snapin is not included in
the sidebar by default. But you can simply add it to the sidebar by clicking
icon:button_sidebar_add_snapin[] from the list of available snapins.
// End inc_monitor_menu.asciidoc


[#search_monitor]
=== Searching in the monitoring environment

// Start inc_searching_in_the_monitoring_environment.asciidoc
In the [.guihint]#Monitor# menu you can search for hosts and
services. The search is interactive, so as soon as you have typed something,
you will immediately see the results matching your input below the search field:

image::monitor_menu_search.png[width=65%]

The search function in the [.guihint]#Monitor# menu is identical to that offered to you by the [.guihint]#Quicksearch# snapin.

Here are a few tips for searching:

* Upper and lower case is not relevant to the search -- with the exception of the search for labels, which are only found if they are entered exactly as they are called in the syntax `key:value`.
* You can work freely with keywords, e.g. search for `pending service`.
* But you can also use filters to search for patterns within hostnames (with `h:`), patterns within service names (with `s:`) and you can combine the two. A search for `s:boot` will show you all services that contain `boot` and a search for `h:win s:cpu` will show you all services that contain `cpu` on any hosts that contain `win`.
* You do not have to select an entry from the suggestion list. After entering your search term, simply press the Enter key and you will receive the appropriate result on the main page in the form of a list of all hosts and/or services.
* You can save the search query in a bookmark.
// End inc_searching_in_the_monitoring_environment.asciidoc

To search for hosts and services, you can use a number of predefined filters and combine them, for example, to search for specific services on specific hosts. A search coded with `h:^myhost s:myservice` will find all services whose service description contains 'myservice' and run on hosts whose name begins with 'myhost'.

You can also use the filters multiple times and in combination. Multiple instances of a filter are linked with *OR*, different filters with *AND*. Exception: Multiple host tag filters (`tg:`) are always linked with *AND*.

The following filters are available:

[cols="20,10,~"]
|===
|Filter |Command |Example 

|Host name |`h:` |`h: oracle`
|Service description |`s:` |`s: cpu h: myhost`
|Host group |`hg:` |`hg: server hg: database`
|Service group |`sg:` |`sg: testing s: myservice`
|Host address |`ad:` |`ad: 192.168.200. s: test`
|Host alias |`al:` |`al: database al: _db`
|Host tag |`tg:` |`tg: windows tg: testing`
|Host label |`hl:` |`hl: os:windows`
|Service label |`sl:` |`sl: critical_interface:yes`
|===

In combination with regular expressions, this results in precise, complex filter possibilities, such as:

`h: ^My.\*Host$ s: ^my.*(\d|test)$ tg: mytag tg: mytest`

This will find: Services that begin with `my` and end
with a _digit_ or `test`, run on hosts that begin with `my`
and end with `host`, and finally have the two host tags `mytag`
and `mytest`.

You can use regular expressions for any single filter -- with the following exceptions: No regular expressions are allowed for host and service labels, i.e. the label must be entered in the syntax `key:value` exactly as it is called, e.g. `os:windows`. As soon as you set group or host tag filters in addition to filters for name, description, address or alias, the former must be specified explicitly, e.g. `hg: webserver s: apache`. Which is *not* possible: `hg: Web.* s: apache`. Background: The different filters address different sources with different data structures and functions. Of course, you can search out the concrete host groups using patterns (`hg: .*server`) and then use the result in the original query.

In the background, xref:livestatus#[livestatus] queries are created from these search queries. For example, `h: localhost s: mem s: cpu h:switch-intern`
would become:

[{shell}]
----
{c-omd} lq
GET services
Cache: reload
Columns: service_description host_name hostgroups servicegroups
Filter: host_name ~~ switch-intern
Filter: host_name ~~ localhost
Or: 2
Filter: service_description ~~ cpu
Filter: service_description ~~ mem
Or: 2
And: 2
Limit: 80

CPU utilization;localhost;;
Memory;localhost;;
CPU load;localhost;;
CPU utilization;myhost;;
Memory;myhost;;
CPU load;myhost;;

{c-omd} 
----

You also see the value `Limit: 80` in the live status query above. This means that the result list displays a maximum of 80 hits. However, you can change this value under [.guihint]#Setup > Global Settings > User Interface > Number of elements to show in Quicksearch#.

If you do not set a filter at all when searching, by default the system searches first in the entries of the [.guihint]#Monitor# menu and then passes through the filters for host name, host alias, host address and service description -- in that order. You can adjust the filters and their order in [.guihint]#Setup > Global Settings > User Interface > Quicksearch search order#.


[#customize_menu]
=== Customize menu

You can customise and extend elements of the graphical user interface that are useful for monitoring in the [.guihint]#Customize# menu:

image::customize_menu_more.png[width=65%]

Here you have access to, among other things 
xref:bookmarks[bookmarks],
xref:views#[views],
xref:dashboards#[dashboards],
xref:graphing#[graphs],
xref:forecast_graphs#[forecast graphs],
xref:reporting#[reports] and
xref:sla#[extended availabilities (SLA)].

When you call up one of the menu items, the list of already existing objects is displayed. In some lists you will find _builtin_ objects that {CMK} delivers and that you can edit or use as templates for your own objects.


[#setup_menu]
=== Setup menu

Your entry point to the xref:wato#[configuration of {CMK}] is the [.guihint]#Setup# menu, which you can open via the navigation bar:

image::setup_menu.png[]

In this menu you will find the tools with which you can set up and configure {CMK}. The menu is divided into _topics_. Below each topic you will find the menu items. For [.guihint]#Hosts#, [.guihint]#Services# and [.guihint]#Agents# you get access to different categories of rule sets. The concept of rule-based configuration is central to {CMK} and very powerful for customising xref:wato_rules#[host and service parameters].

*Note:* You can also load the contents of the [.guihint]#Setup# menu into the sidebar: as a snapin titled [.guihint]#Setup# (with titles and icons) or [.guihint]#Quick Setup# (with icons only).


[#search_setup]
=== Searching in the configuration environment

// Start inc_searching_in_the_configuration_environment.asciidoc
Using the search field in the [.guihint]#Setup# menu, you can search the configuration
environment of {CMK}, i.e. the [.guihint]#Setup# menu itself, with all of its visible
entries and additionally with some hidden ones.

The _search scope_ includes, among other things, all rule sets that are
grouped into topics in the [.guihint]#Setup# menu and the _Global settings_.
Searches are carried out in the titles and the parameter names.

You search with free text, i.e. without filter rules as in the [.guihint]#Monitor# menu.
You do not need to pay attention to upper and lower case. The search results are
displayed as you type:

image::setup_menu_search.png[]
// End inc_searching_in_the_configuration_environment.asciidoc


[#user_menu]
=== User menu

In the [.guihint]#User# menu you can change personal settings that are valid for your user account:

image::user_menu.png[width=65%]

Frequently used settings can be toggled by clicking directly in the [.guihint]#User# menu ([.guihint]#Quick toggle#), some by calling up a specific page, e.g. to change the password. Most settings, however, can be accessed and changed centrally via the [.guihint]#Edit profile# page. 

[cols=2]
|===
|Setting |Note 

|[.guihint]#Change password# |You must enter the existing password once and the new password twice. Password requirements for local accounts can be set globally: [.guihint]#Setup > Global Settings > Password policy for local accounts#
|[.guihint]#Notification rules# |Rules for xref:notifications#personal[user-defined notifications]. The entry is only displayed if [.guihint]#Setup > Global Settings > Rule based notifications# is switched on (which is the default).
|[.guihint]#Language# of the user interface |
|[.guihint]#Visibility of Hosts/Services# |Show all hosts and services or only those to which you are assigned as a contact.
|[.guihint]#Disable Notifications# |Switch off all notifications for a selectable period of time
|[.guihint]#Start URL to display in main frame# |Set the URL of the start page. If a xref:dashboards[Dashboard] is displayed on the main page, you can alternatively make this the start page via the [.guihint]#Dashboard# menu.
|[.guihint]#User interface theme# |Switching between [.guihint]#Dark# and [.guihint]#Light# is possible via [.guihint]#Quick toggle# directly in the [.guihint]#User# menu.
|[.guihint]#Sidebar position# |Here, too, you can switch between [.guihint]#Right# and [.guihint]#Left# with [.guihint]#Quick toggle#.
|[.guihint]#Navigation bar icons# |Show icons with title or icons only
|[.guihint]#Mega menu icons# |Show (green) icons by the topic or (coloured) icons by each menu item
|[.guihint]#Show more / Show less# |By default xref:intro_gui#show_less_more[show less or show more] or always show all
|[.guihint]#Logout# |
|===

*Note:* For some settings there are default values that can be changed globally for all users via [.guihint]#Setup > Global Settings#, mostly under the [.guihint]#User Interface# topic. In addition, the xref:wato_user#roles[role with its permissions] assigned to your user account determines whether certain settings are visible and can be changed.


[#main_page]
== Main page

What you see on the main page depends on where you are in Checkmk. After logging in, you will first see the standard or main dashboard.

The content of the main page changes depending on your selection in the navigation bar and also in the sidebar. For example, if you select [.guihint]#Hosts > All hosts# in the [.guihint]#Monitor# menu, the list of hosts will be displayed on the main page:

image::mainpage_all_hosts.png[]

Regardless of which page is currently displayed, you will usually find the following elements on the main page:

* 'Breadcrumb' path: Below the page title you see the path to the current page, always starting with the name of the menu from the navigation bar. These breadcrumbs prevent you from getting lost in the user interface. This way you know where you are in {CMK} even after complex actions -- currently on the [.guihint]#All hosts# page in monitoring.

* Menu bar: Below the breadcrumb path, the menu bar is displayed, which summarises the possible actions on this page in menus and menu entries. The menus are always context-specific in {CMK}, i.e. you only find menu entries for actions that make sense on the current page.

* Context-sensitive help (_inline help_): You can use the [.guihint]#Help# menu to show help texts on the current page with [.guihint]#Help > Show inline help#, which is very helpful on pages that contain many parameters. The selected mode also remains active for other pages that you call up until you deactivate it again with [.guihint]#Hide inline help#.

* Action bar: Below the menu bar you will find the action bar, in which the most important actions from the menus are offered as buttons for direct clicking. You can hide the action bar with the icon:button_hide_toolbar[] button to the right of the [.guihint]#Help# menu and show it again with icon:button_show_toolbar[]. When the action bar is hidden, icons for the hidden buttons are added to the right of the [.guihint]#Help# menu.

* Countdown for page update: In the monitoring environment, the update interval for the page is displayed in seconds at the top right of the page and the remaining time to the next update is visualised on the surrounding circle line.
+
By the way, you can change the refresh interval in the menu [.guihint]#Display > Modify display options#.

* Number of changes not yet activated: In the configuration environment, the number of changes not yet activated is displayed at the top right of the page instead of the countdown. A change made in the configuration environment is only transferred to the monitoring environment when it is activated.

After selecting one of the entries in the [.guihint]#Monitor# menu, the main page will usually show you the requested information either as xref:dashboards[dashboard] or as xref:views[view], which we will discuss in more detail in the following chapters.


[#dashboards]
=== Dashboards

// Start inc_dashboards.asciidoc
A dashboard presents the most important information on a topic on a single page,
such as the answer to the question "What is the status of my {CMK} site?"
Different visualizations of data are used and combined in a dashboard, such as views,
history graphs, tables, diagrams and many other elements. The aim is to present
the information from different perspectives to you in such a way that you can
grasp the essentials quickly and are not distracted by unnecessary details.

{CMK} provides several preconfigured dashboards that you can open from the [.guihint]#Monitor# menu: the [.guihint]#Main#, the [.guihint]#{CMK}# and the [.guihint]#Problem# dashboard:

image::dashboard_problem.png[]

If one of these dashboards is displayed, you can quickly switch to the others: in the menu bar to the right of the [.guihint]#Help# menu you will find the icons for the available dashboards. You can also promote the currently displayed dashboard to the start page: in the menu [.guihint]#Dashboard > Set as start URL#.

{cre-only}
The [.guihint]#Main# dashboard of the {EE}, which shows the state of the site, is not included in the {RE}. In the {RE}, the [.guihint]#Main# dashboard is the [.guihint]#Problem# dashboard of the {EE}.

A special feature of the {CMK}
dashboards is that by using an intelligent algorithm they automatically adapt to
the available screen dimensions and make optimal use of the screen size.

You can also use the individual elements of a dashboard, the so-called
*Dashlets*, to adapt existing dashboards and create new ones. You can learn
all the relevant details for this in the xref:dashboards#[article on the dashboards].
// End inc_dashboards.asciidoc


[#views]
=== Views

// Start inc_views.asciidoc
A view offers access in monitoring to various displays of hosts, services or other objects under a certain perspective as a table.

Such a view can have a context -- for example, if it shows all of the
services running on the `mycmkserver` host. Other views work globally -- for example,
the view that shows you all of the services that currently have a problem.

All of the *global* views can be opened from the [.guihint]#Monitor# menu,
below the respective topic, for instance [.guihint]#All Hosts#, [.guihint]#Service problems# or
[.guihint]#{CMK} sites#. After clicking on one of these menu items, the corresponding
view is displayed in the main page -- in the following example [.guihint]#Service problems#:

image::view_service_problems.png[]

In a view you have numerous control options, among others:

* You can navigate to other views by clicking on specific cells -- such as the host name or one of the services in the above example.
* By clicking on a column's title, you can sort by that column.
* The menu [.guihint]#Display > Modify display options# shows some settings for customising the view. In the [.guihint]#Number of columns# list you can change the number of columns displayed -- e.g. to make full use of your wide screen -- and in the [.guihint]#Refresh interval# list you can set the number of seconds after which the view is automatically reloaded -- after all, status data can change at any time.
* You can reduce the number of table entries after clicking [.guihint]#Filter# with the *filter bar* -- which is not really necessary in the example shown, but which is very helpful with long tables.
// End inc_views.asciidoc

*Note:* The views have many more possibilities -- both for
customisation and for creating your own views. You can find out how to do this
in the xref:views#[article on views].


[#sidebar]
== Sidebar

// Start inc_sidebar.asciidoc
The _sidebar_ is your {CMK} cockpit. It is the place where you have a
continuous overview of the most important monitoring information, as well as
quick access to the functions that you need most frequently in {CMK}.

image::sidebar_default.png[width=50%]

////
In the top row of the sidebar you will see a selection of 5 icons with important actions that many {CMK} users find particularly useful. Feel free to click through these icons in turn -- even if, due to the lack of monitored objects at this point, the information displayed is not yet more meaningful than on the [.guihint]#Main dashboard#, to which you can return by clicking on the first icon [.guihint]#Main#.
Below the 5 symbols begins the panel that you can arrange according to your own preferences.
////

You can compose the complete sidebar according to your preferences.
The sidebar elements, also called 'snapins', serve this purpose.
Snapins are compact GUI containers with predefined functions. Since the sidebar
is intended to hold *your* preferences, by default a new installation contains only a few snapins:

* [.guihint]#Overview# -- An overview of all monitored objects with their current status information
* [.guihint]#Bookmarks# -- Your personal bookmarks within {CMK}
* [.guihint]#Master control# -- Various main switches for the monitoring

If you click on icon:button_sidebar_add_snapin[] at the very bottom of the sidebar, the main page will show you all of the snapins that are currently
*not* in your sidebar and that you can add with a single click.
In this preview, the lower area of each snapin shows a short description about its meaning and purpose.
Try it out and fill the sidebar as a test.

Depending on the size of your screen, not all snapins may now be visible.
The fastest way to move vertically through the sidebar is to use the mouse wheel
while the mouse pointer is over the sidebar. On touchpads, this function is often
possible with the gesture 'slide two fingers up and down together' method.

In the sidebar you can manipulate the snapins like this:

* Expand or collapse: Click *in* the displayed title of the snapin. Alternatively, point to the title bar and then click icon:button_show_snapin[] or icon:button_hide_snapin[].
* Show more or less: Some snapins (like [.guihint]#Overview#) offer you two views -- either with only the most important information or with all information. Point the mouse at the title bar and click icon:button_showmore[] or icon:button_showless[] to switch between the two views.
* Move: Press the left mouse button *right next* to the title, drag the snapin up or down to another position in the sidebar and release the mouse button.
* Remove from sidebar: Point the mouse at the title bar and click icon:button_sidebar_close_snapin[].

So much for the options for customising the sidebar's content. As a whole, you
can hide and show the sidebar -- with [.guihint]#Sidebar# in the navigation bar -- and you
can move its position from right to left so that it docks with the navigation
bar -- in the menu [.guihint]#User > Sidebar position#.
// End inc_sidebar.asciidoc


[#overview]
=== Overview

// Start inc_overview(snapin).asciidoc
Prominently placed at the top of the sidebar you will find the [.guihint]#Overview# snapin:

image::overview_less.png[width=50%]

In the left column of this small table you will first see the number of hosts and
services you are monitoring. The third row shows [.guihint]#Events#. These only become
relevant for you if you have configured the monitoring of messages. This means,
for example, messages from syslog, SNMP traps and log files.
For this, {CMK} has its own very powerful module, which will be discussed in detail in the article of the same name, the xref:ec#[Event Console].

The right column shows the number of problems that have not yet been acknowledged.
Problems are objects that are currently in {WARN}/{CRIT}/{UNKNOWN} or {DOWN}/{UNREACH} status.
_Acknowledgement_ is a way of 'taking note' of a problem.
By the way, problems of services whose host is {DOWN} or in a scheduled downtime are not counted here.

You can click on the number in a cell to get a list of the objects that have been
counted here. This works for all cells in the [.guihint]#Overview#, by the way.

In the [.guihint]#Overview# you can also decide whether you want to
see less or more information.
With the icon:button_showmore[] button you can switch to the Show more mode:

image::overview_more.png[width=50%]

Between the two previously visible columns, the new second column now shows the
count for *all* problems, i.e. with the addition of those that have already
been acknowledged. In our example, the numbers in the second and third columns
are identical because we have not yet acknowledged any problem.

Finally, the last column on the far right shows the hosts or services whose
information is 'out of date' -- _Stale_ -- because no up-to-date monitoring
data is currently available for them. If, for example, a host is not currently
accessible, {CMK} cannot retrieve any information from its services. However, this does
not automatically mean that the services have a problem. Therefore, {CMK} does
not simply assume a new status for these services, instead it sets them to the
pseudo status 'Stale'. The column [.guihint]#Stale# will be omitted by {CMK} from the
display if it would only show a 0 in all cases.
// End inc_overview(snapin).asciidoc


[#bookmarks]
=== Bookmarks

// Start inc_bookmarks(snapin).asciidoc
For pages that you visit again and again, you can create bookmarks in the
sidebar with the [.guihint]#Bookmarks# snapin.

Do you really need these? After all, there are bookmarks in the Web browser.
Well, the {CMK} bookmarks have a couple of advantages of their own:

* A called bookmark only changes the content on the main page without reloading the sidebar.
* You can share bookmarks with other users.
* When setting bookmarks, the re-execution of actions is automatically prevented.

At first, the Bookmarks snapin is still empty:

image::empty_bookmarks.png[width=50%]

If you now click [.guihint]#Add Bookmark#, a new bookmark will be created for the content
currently displayed on the main page:

image::bookmarks.png[width=50%]

Your personal bookmarks are stored under [.guihint]#My Bookmarks#. 
// End inc_bookmarks(snapin).asciidoc


[#bookmarks_edit]
==== Editing bookmarks

{CMK} manages bookmarks in *lists*. Each list contains one or more bookmarks. In addition, each bookmark is assigned a _topic_.
In the [.guihint]#Bookmarks# snapin all bookmarks on the same topic are then collected.

Why so complicated? So that you can make a list of bookmarks visible to other users.  Then you can use the topics to define how the bookmarks are presented to other users in the [.guihint]#Bookmarks# snapin.
In this way, for your company you can build a navigation structure for selected {CMK} pages and even to external pages. 
Every user can nonetheless still create and manage their own bookmarks.

You can access the management of the bookmark lists in the [.guihint]#Bookmarks# snapin with the [.guihint]#Edit# button:

image::user_interface_bookmark_lists.png[]

You can now either edit an existing list with icon:icon_edit[] -- or create a new one with [.guihint]#New list#:

image::user_interface_new_bookmark_list_general_properties.png[]

In the [.guihint]#General Properties# box you enter the internal ID and the title of the list, whereby the [.guihint]#Title# is not important for the display of the bookmarks: it is only used for management. Via [.guihint]#Make this Bookmark list available for other users# you make the bookmarks of this list visible to other users. 
For this, however, your current user account needs a permission, which by default
is held only by the `admin` xref:wato_user#roles[role].

*Note* The principle of visibility is used by {CMK} in many locations, and is explained in more detail in the xref:views#edit[views] article.

In the [.guihint]#Bookmarks# box you can now define the new bookmarks with title and URL:

image::user_interface_new_bookmark_list_bookmarks.png[]

Where the bookmarks are sorted is decided by the [.guihint]#Default Topic# in the list, or respectively by a bookmark’s [.guihint]#Individual Topic# -- if this has been set. 
By the way, you can also give bookmarks their own icons.
Finally, save the new list with [.guihint]#Save & go to list#.

The new list created in the example now supplements the personal bookmarks under [.guihint]#My Bookmarks# for all users with three bookmarks on two new topics:

image::user_interface_bookmarks.png[width=50%]


[#master_control]
=== Master control

// Start inc_master_control.asciidoc
In the [.guihint]#Master control# snapin on the sidebar, you can switch various monitoring
functions off and on again individually, such as the [.guihint]#Notifications#.
This latter is very useful if you are carrying out major modifications to the
system and do not want to annoy your colleagues with unnecessary messages.

image::master_control.png[width=50%]

*Important:* Make sure that all switches are set to *on* during normal
operation, otherwise important monitoring functions may be switched off.
// End inc_master_control.asciidoc
