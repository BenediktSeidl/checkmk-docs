include::global_attr.adoc[]
= Notifications via Slack
:revdate: 2020-08-14
:title: Notifications via Slack
:description: Connect the messaging tool Slack to Checkmk and receive notifications there.

[TIP]
.Related Articles:
====
link:notifications.html[]

====


== Function

With the <a href="https://slack.com/">Slack</a> Messenger you can conveniently
receive notifications via a webhook. This works on self-hosted or rented servers,
as well as via the free public Slack service.


== Configuring Slack

To activate webhooks and create a new webhook, you must first create a Slack App.
Log in to Slack and create a _Workspace._ Then proceed as follows:

. Create a new app via <a href="https://api.slack.com/messaging/webhooks">this link</a> using the Slack API.
. Assign any name you like and choose your workspace.
. In the next dialog choose [.guihint]#Incoming Webhook# as the app function.
. Next activate webhooks by setting the switch to [.guihint]#on#.
. Create the webhook with the [.guihint]#Add New Webhook to Workspace# button.
. Finally, set the channel (group) where the app should post to, and confirm the rights request.

For testing purposes, on completion you will receive a curl statement which
posts _Hello World_ to the desired channel.
Copy the Webhook URL and switch to {CMK}.


== Configuration in {CMK}

The configuration in {CMK} requires only the specification of the webhook URL
copied above:

. For the [.guihint]#Notification Method}} select {{Slack or Mattermost#.
. Enter (insert) the copied Web Hook URL.

image::notifications_slack.png[]

Optionally, you may specify URL prefixes to control links on your {CMK} GUI
within the notification. Instead of specifying the webhook URL directly here,
you can also use WATO's password store and read the URL from one of its entries.

For testing you can use the [.guihint]#Fake check results#
and [.guihint]#Custom notification# link:commands.html[commands].
