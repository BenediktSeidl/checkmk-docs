include::global_attr.adoc[]
= Monitoring Linux
:revdate: draft
:title: Monitoring Linux - The new agent for Linux in detail
:description: The Linux agent of {CMK} version 2.1.0 adds the Agent Controller and new features to the agent script. You can learn how to use the agent here.

{related-start}
xref:agent_linux_legacy#[Monitoring Linux in legacy mode]
xref:wato_monitoringagents#[Monitoring agents]
xref:agent_deployment#[Automatic Agent Updates]
{related-end}


_In order to quickly provide you the new information for {CMK} version {v21}, we have had this draft machine translated for now. Update and language revision will follow later._


[#intro]
== The new agent

[{image-left}]
image::linux.png[alt="Linux-Logo.",width=120]
You can monitor Linux systems particularly well with {CMK}.
This is not so much because the {CMK} development team feels "at home" on Linux, but rather because Linux is a very open system and provides numerous well documented and easy to query interfaces for detailed monitoring.

Since most of the interfaces per se are not accessible via the network, the installation of a monitoring agent is inevitable.
Therefore {CMK} has its own agent for monitoring Linux. 
This is a simple shell script that is minimalistic, transparent and secure.

In the {CMK} version {v21} there is now a new Linux agent.
More precisely, the *Agent Script* `check_mk_agent` is joined by a new component: the *Agent Controller*.
The Agent Controller precedes the agent script, queries it and communicates with the {CMK} server in its place.
To do this, it registers with the *Agent Receiver*, which is also a new process running on the {CMK} server.

The new Linux agent thus on the one hand takes over the agent script, and thus its advantages.
On the other hand, it supplements the script in such a way that new functions can be added, such as TLS encryption of the communication, data compression -- and also reversal of the communication direction.
This means that in addition to the registered, encrypted and compressed *pull mode*, an equally *push mode* is possible.
More about this in the next chapter.

While push mode will be a feature of the next {CMK} version for the new {CMK} Plus Edition (CPE), TLS encryption and compression will be available for all {CMK} editions starting with version {v21} -- as long as both {CMK} server and agent have version {v21}.

The Agent Controller is started as a background process (_daemon_) by the init system `systemd`, so the agent requires a Linux distribution with `systemd`.
How to find out if the prerequisite is fulfilled for your Linux distribution can be found in the chapter xref:install[Installation.]

However, the new agent also supports a so-called *legacy mode* to be executable under Linux distributions without `systemd`.
In this mode the new agent works like the old one, i.e. without Agent Controller and therefore without registration at the {CMK} server.
For this case you can find all information in the article xref:agent_linux_legacy#[Monitor Linux in Legacy Mode].
There you will also learn how to set up the agent on Linux systems where neither an RPM nor a DEB package can be installed.

The article you are reading covers installation, configuration and extensions of the new Linux agent *with* Agent Controller.


[#architecture]
== Architecture of the agent

With the new agent, more software components are involved in communication than before.
Therefore, we briefly introduce the components and their interaction.
The architecture is identical for the Linux agent and the xref:agent_windows#agent_architecture[Windows agent].
Only the technical implementation is specific to the operating systems.

.Interaction of the software components
[{image-border}]
image::agent_linux_communication_flow.png[alt="Illustration of the communication between agent and site."]

The *Agent Script* `check_mk_agent` is and remains responsible for collecting the monitoring data.
For data collection, it calls existing system commands in order.
To also obtain those information that require `root` privileges to obtain, `check_mk_agent` is executed under `root`.

The agent script is:

* minimalist, because it makes do with minimal resources of RAM, CPU, disk space and network.
* secure, because it does not allow any access from the network.
* easily extensible, because you can write plug-ins in any programming or scripting language and have them executed by the agent script.
* transparent, because it is a shell script where you can see what commands it calls.

The *Agent Controller* `cmk-agent-ctl` is the new component of the agent and is responsible for transporting the data collected by the agent script.
It is run under the `cmk-agent` user, which has limited privileges, e.g. no login shell, and is used only for data transfer.
The `cmk-agent` user is created during the installation of the agent package.
The Agent Controller is started as a daemon of `systemd` and is coupled to it as a service.
It listens on TCP port 6556 for incoming connections of the {CMK} site and queries the agent script via a Unix socket (a `systemd` unit).

So why is the Agent Controller needed -- so far it worked very well without it?
Well, the new software architecture of the agent is the prerequisite for offering new features that cannot be implemented with the minimalistic design of the agent script, such as encryption of the communication via Transport Layer Security (TLS), data compression and reversal of the communication direction.
Previously, it was always the {CMK} server that initiated the communication and requested the data from the agent -- in what is known as pull mode.

With the Agent Controller, the push mode can now additionally be realized, in which the initiative comes from the agent.
Push mode is required for cloud-based configuration and in some compartmentalized networks.
In both cases, the {CMK} server cannot access the network where the hosts to be monitored are located.
Therefore, the agent periodically sends the data to the {CMK} server on its own.
Agent Controller and Agent Receiver are already prepared for push mode, although this mode will be available only with the next {CMK} version for the new {CMK} Plus Edition (CPE).

The *Agent Receiver* `agent-receiver` is a new component of the {CMK} server and the general endpoint for the Agent Controller communication, e.g. for connection registration.It also receives the data sent by the Agent Controller in push mode.
In pull mode, data is exchanged with the xref:cmc_differences.html#fetcher_checker[{CMK} fetchers] of the site.

All new features are implemented through the Agent Controller and Agent Receiver, i.e. {CMK} server and agent must have version {v21}.
Here, the first step is to register the Agent Controller with the Agent Receiver of the {CMK} site, with which a trust relationship is established.
During the registration, the TLS encryption of the communication is already set up.


[#install]
== Installation

{CMK} offers you various ways for installing the Linux agent -- from manual installation of the software package to fully automatic deployment including update function.
Some of them are only available in {EE}:

[cols="40,50,~,~",options="header"]
|===
|Method |Description |CRE |CEE
|Supplied RPM/DEB package |Simple installation of a standard agent with manual configuration via configuration files. 
The installation routine checks and configures `systemd` and `xinetd` in all editions -- in this order. |X |X
|RPM/DEB package from xref:glossar#agent_bakery [Agent Bakery] |Configuration via GUI, individual configuration per host possible. | |X
|xref:agent_deployment#[Automatic update] |The package from the Agent Bakery is installed for the first time by hand or by script and from then on automatically updated. | |X
|===


[#prerequisites]
=== Prerequisites

For the installation of the Agent Controller to work, this requires a Linux distribution with `systemd`, more precisely `systemd` in a version 220 or newer.

There is a good chance that this prerequisite is met on your host, as since 2015 most Linux distributions have adopted `systemd` as their init system, replacing other init systems such as SysVinit, e.g. SUSE Linux Enterprise Server from version 12, openSUSE from version 12.1, Red Hat Enterprise Linux from version 7, Fedora from version 15, Debian from version 8 and Ubuntu from version 15.04.
Unfortunately, comparing the version number alone does not bring certainty, since `systemd` may be missing even on a current Linux system if it has "only" been updated for years.

Therefore, check on the host on which the agent is to be installed whether `systemd` is running and in which version:  

[{shell-raw}]
----
{c-root} systemctl --version
systemd 245 (245.4-4ubuntu3.15)
----

If `systemd` is installed and running in the correct version as shown by the command output above, install the agent package and then run xref:registration[registration] to work with the agent in pull mode.

If `systemd` is not running, or only in a version that is too old, you can still install the agent as described in the rest of this chapter, and then use it in legacy mode.
In this case, you should still first read the xref:agent_linux_legacy#install[installation chapter] in the article for the Linux agent in legacy mode, since this mode requires a superserver such as `xinetd` to monitor ports and start the agent script.
Verification and, if necessary, installation of a superserver like `xinetd` should be done before installing the agent.


[#download]
=== Downloading the RPM/DEB package

You install the Linux agent by installing the RPM or the DEB package.
Whether you need RPM or DEB depends on the Linux distribution you want to install the package on:

[cols="10,10,~",options="header"]
|===
|Package |Extension |Install on
|RPM |`.rpm` |Red Hat Enterprise Linux, Fedora, CentOS, openSUSE, SLES, derivatives thereof
|DEB |`.deb` |Debian, Ubuntu, all other DEB-based distributions
|===

Before installation you have to get the package and bring it to the host (for example with `scp` or WinSCP) where the agent should run.
 

[#download_gui]
==== Getting package via {CMK} GUI

In the {CRE} you can find the Linux packages of the agent via [.guihint]#Setup > Agents > Linux#.
In the {EE}, you first get to the xref:wato_monitoringagents#bakery[Agent Bakery] in the [.guihint]#Setup# menu via [.guihint]#Agents > Windows, Linux, Solaris, AIX#, where you will find the baked packages.
From there, the [.guihint]#Related > Linux, Solaris, AIX files# menu item will take you to the list of agent files:

.On the download page you will find the RPM and DEB packages
image::agent_linux_agent_files.png[alt="Download page with the RPM/DEB packages."]

Everything you need can be found right in the first box named [.guihint]#Packaged Agents#:
The ready RPM and DEB packages for installing the Linux agent with default settings.


==== Getting package via HTTP

Sometimes downloading to a machine and then copying to the target machine using `scp` or WinSCP is very cumbersome.
You can also download the package from the {CMK} server directly to the target system via HTTP.
For this purpose, the downloads of the agent files are deliberately _without login_.
After all, the files do not contain any secrets.
Everyone can download and install {CMK} by himself and thus access the files.

The easiest way to do this is with `wget`.
You can get the URL from the browser.
If you already know the name of the package, you can easily compose the URL yourself.
Just put `/mysite/check_mk/agents/` in front of the filename, in the following example for the RPM package:

[{shell-raw}]
----
{c-root} wget http://mycmkserver/mysite/check_mk/agents/check-mk-agent-2.1.0b1-1.noarch.rpm
----

*Tip:* RPM even has a built-in `wget`.
Here you can download and xref:install_package[installation] with one command:

[{shell-raw}]
----
{c-root} rpm -U http://mycmkserver/mysite/check_mk/agents/check-mk-agent-2.1.0b1-1.noarch.rpm
----


==== Getting package via REST API

The xref:rest_api#[REST-API] of {CMK} provides the following ways to download agent packages from the {CMK} server:

* Downloading the provided agent.
* Downloading a baked agent by host name and operating system.
* Downloading a baked agent by hash of the agent and operating system.

Also via REST API you have the possibility to fetch the package from the {CMK} server directly to the target machine.
For example, the Linux agent's supplied DEB package can be fetched using the following `curl` command:

[{shell}]
----
{c-root} curl -OJG "http://mycmkserver/mysite/check_mk/api/1.0/domain-types/agent/actions/download/invoke" \
--header 'Accept: application/octet-stream' \
--header 'Authorization: Bearer automation myautomationsecret' \
--data-urlencode 'os_type=linux_deb'
----

This is just a simple example to demonstrate how this one REST API endpoint works to download the agent.
Details on this and other REST API endpoints can be found in the API documentation, which can be accessed in {CMK} via [.guihint]#Help > Developer resources > REST API documentation#.


[#install_package]
=== Installing the package

After fetching the RPM or DEB package and -- if necessary -- copying it to the host to be monitored using `scp`, WinSCP or other means, the installation is done with one command.

The installation of the RPM package is done under `root` with the command `rpm -U`:

[{shell}]
----
{c-root} rpm -U check-mk-agent-2.1.0b1-1.noarch.rpm
----

By the way, the `-U` option stands for "update", but it can also do an initial installation correctly.
This also means that you can use this command to update an already installed agent to the new version -- and use it for updates of the agent package in the future.

The installation of the DEB package -- and an update -- is done under `root` with the command `dpkg -i`:

[{shell}]
----
{c-root} dpkg -i check-mk-agent_2.1.0b1-1_all.deb
(Reading database ... 769314 files and directories currently installed.)
Preparing to unpack .../check-mk-agent_2.1.0b1-1_all.deb ...
Unpacking check-mk-agent (2.1.0b1-1) ...
Setting up check-mk-agent (2.1.0b1-1) ...

Deploying systemd units: check-mk-agent.socket check-mk-agent-async.service cmk-agent-ctl-daemon.service check-mk-agent@.service
Deployed systemd
Creating/updating cmk-agent user account (new) ...
Reloading xinetd
Activating systemd unit 'check-mk-agent.socket'...
Created symlink /etc/system/system/sockets.target.wants/check-mk-agent.socket → /lib/system/system/check-mk-agent.socket.
Activating systemd unit 'check-mk-agent-async.service'....
Created symlink /etc/systemd/system/multi-user.target.wants/check-mk-agent-async.service → /lib/systemd/system/check-mk-agent-async.service.
Activating systemd unit 'cmk-agent-ctl-daemon.service'...
Created symlink /etc/systemd/system/multi-user.target.wants/cmk-agent-ctl-daemon.service → /lib/systemd/system/cmk-agent-ctl-daemon.service.
----

Here, the package was installed for the first time on a previously agentless host.
The `cmk-agent` user was created and `systemd` was configured.


=== Installing with the Agent Bakery

{cee-only}
With the xref:wato_monitoringagents#bakery[Agent Bakery], the {CEE} have a software module for automatic packaging of customized agents.
A detailed description of this can be found in the general chapter about the xref:wato_monitoringagents#[agents].
Installation of the baked packages is done exactly as described for the included packages xref:install_package[above].


=== Automatic update
{cee-only}
If you use the Agent Bakery, you can set up automatic updates of the agent.
These are described in an xref:agent_deployment#[separate article].


[#post_install]
=== What happens after the installation?

If the Agent Controller could be set up with `systemd` during the installation, the next step is the xref:registration[registration], which sets up TLS encryption so that the encrypted agent output can be decrypted by the {CMK} server and displayed in monitoring.

There is a special feature when updating, i.e. when an already installed agent package has been updated to the new {v21} agent.
With such an update the agent switches to the unencrypted *legacy pull mode*, so that the {CMK} server is not cut off from the monitoring data and can continue to display it.
In the monitoring it looks like this:

.Warning in {CMK} Monitoring that TLS is not used yet
image::agent_linux_service_legacy_pull_mode.png[alt="The WARN state of the 'Check_MK' service due to lack of encryption."]

The {CMK} site detects from the agent output that the Agent Controller is present and thus TLS encryption is possible -- but not yet enabled.
The [.guihint]#Check_MK Agent# service changes to the {WARN} state and remains so until you register it after updating the agent.
After registration, only encrypted pull mode is used for communication.
The legacy pull mode is turned off and remains so.

The case is different if the Agent Controller could not register as a daemon with `systemd` during the installation.
Then the registration is not possible and the only communication path remains the *legacy mode*.
For legacy mode, the installation routine tries to configure a superserver like `xinetd` to monitor ports and start the agent script.
In this case, continue reading in the article xref:agent_linux_legacy#[Monitor Linux in legacy mode].


[#uninstall]
=== Uninstalling

Like the installation, the uninstallation of the agent is done with the package manager of the operating system.
Specify the name of the installed package here, not the filename of the original RPM/DEB file. 

To find out which DEB package is installed:

[{shell}]
----
{c-root} dpkg -l | grep check-mk-agent
ii check-mk-agent 2.1.0b1-1 all Checkmk Agent for Linux
----

The uninstallation of the DEB package is then done with `dpkg --purge`:

[{shell}]
----
{c-root} dpkg --purge check-mk-agent
(Reading database ... 769345 files and directories currently installed.)
Removing check-mk-agent (2.1.0b1-1) ...
Removing systemd units: check-mk-agent.socket, check-mk-agent-async.service, cmk-agent-ctl-daemon.service, check-mk-agent@.service
Deactivating systemd unit 'check-mk-agent.socket'...
Deactivating systemd unit 'check-mk-agent-async.service'...
Deactivating systemd unit 'cmk-agent-ctl-daemon.service'...
Reloading xinetd
Purging configuration files for check-mk-agent (2.1.0b1-1) ...
----

To find out which RPM package is installed:

[{shell}]
----
{c-root} rpm -qa | grep check-mk
----

Uninstalling the RPM package is done under `root` with the command `rpm -e`.


[#registration]
== Registration

=== Overview and requirements

During a new installation of the {CMK} agent, the host to be included in the monitoring cannot yet exchange data with the {CMK} server.
The reason is that a mutual trust relationship is missing - trust and encryption is mandatory from {CMK} {v21}.
How to establish this is shown in this chapter.
When updating the agent, the procedure is basically the same, even though unencrypted communication between {CMK} and the host in monitoring is possible here first.
In this case the service [.guihint]#Check_MK Agent# shows you in the state {WARN} that a change to encrypted communication is advised.

The registration and thus the establishment of the mutual trust relationship is done under a {CMK} user with access to the xref:rest_api#[REST API.]
For this purpose, the xref:glossar#automation_user[automation user] is a good choice, which is created automatically with every {CMK} Installation and whose password you can dice out.


=== Adding the host to monitoring

First create the new host via [.guihint]#Setup > Hosts > Add host# and then add it to monitoring by xref:glossar#activate_changes[Activate changes].

*Note:* In the host's properties in Setup, in the [.guihint]#Monitoring agents# box, you will find the [.guihint]#Checkmk agent connection mode# option, which offers pull mode and push mode as choices.
In {CMK} version {v21} only pull mode is supported. The push mode is a feature of the next {CMK} version for the new {CMK} Plus Edition (CPE).
The selection option is provided only to be prepared in case of a later upgrade or downgrade between {CMK} editions.


=== Registering host with server

Registration is done with the Agent Controller `cmk-agent-ctl`, which provides a command interface for configuring connections.
You can use the command `cmk-agent-ctl help` to get help on the options.

Now go to the host which should be registered.
Here, with `root` privileges, make a request to the {CMK} xref:glossar#site[site]:

[{shell}]
----
{c-root} cmk-agent-ctl register --hostname mynewhost \
    --server cmkserver --site mysite \
    --user automation --password test23
----

The host name behind the `--hostname` option must be specified exactly as it was before when creating it in Setup.
The `--server` and `--site` options specify the name of the {CMK} server and site.
The server name may also be the IP address, the site name (here `mysite`) corresponds to the one you see in the URL path of the web interface. 
The options are completed by the name and password of the automation user.
If you omit the `--password` option, the password will be requested interactively.

If the given values were correct, you will be asked to confirm the identity of the {CMK} site to which you want to connect.
We have shortened the server certificate to be confirmed for clarity:

[{shell}]
----
Attempting to register at cmkserver:8000/mysite. Server certificate details:

PEM-encoded certificate:
---BEGIN CERTIFICATE---
MIIC6zCCAdOgAwIBAgIUXbSE8FXQfmFqoRNhG9NpHhlRJ40wDQYJKoZIhvcNAQEL
[...]
nS+9hN5ILfRI+wkdrQLC0vkHVY8hGIEq+xTpG/Pxw==
---END CERTIFICATE---

Issued by:
	Site 'mysite' local CA
Issued to:
	localhost
Validity:
	From Thu, 10 Feb 2022 15:13:22 +0000
	To Tue, 13 Jun 3020 15:13:22 +0000

Do you want to establish this connection? [Y/n]
> #Y#
----

Confirm with `Y` to complete the process.

If no error message is displayed, the encrypted connection is established.
All data is transmitted in compressed form via this connection.


=== Checking trust relationship

The command `cmk-agent-ctl status` now shows exactly one trust relationship with the {CMK} server:

[{shell-raw}]
----
{c-root} cmk-agent-ctl status
Connection: 12.34.56.78:8000/mysite
	UUID: d38e7e53-9f0b-4f11-bbcf-d19617971595
	Local:
		Connection type: pull-agent
		Certificate issuer: Site 'mysite' local CA
		Certificate validity: Mon, 21 Feb 2022 11:23:57 +0000 - Sat, 24 Jun 3020 11:23:57 +0000
	Remote:
		Connection type: pull-agent
		Registration state: operational
		Host name: mynewhost
----

Afterwards you can perform a xref:glossar#service_discovery[service-discovery] on the {CMK} server, add the found services to the monitoring and finally activate the changes again.

*Note:* There can only ever be one trust relationship between host and site.
For example, if you register the already registered host `mynewhost` under a different name (`mynewhost2`) but with the same IP address, then the new connection replaces the existing one.
The connection from `mynewhost` to the site will be disconnected and no more agent data will be supplied for the host for monitoring.


=== Deregistering a host

On a host connected to the {CMK} server, you can revoke the trust relationship with this command:

[{shell}]
----
{c-root} cmk-agent-ctl delete d38e7e53-9f0b-4f11-bbcf-d19617971595
----

The Universally Unique Identifier (UUID) to be specified is the one that is output with the `cmk-agent-ctl status` command. 

On the {CMK} server, for each connection of a host that is in monitoring, there exists a soft link with the UUID pointing to the folder containing the agent output:

[{shell-raw}]
----
{c-omd} cd ~/var/agent-receiver/received-outputs
{c-omd} ls -l d38e7e53-9f0b-4f11-bbcf-d19617971595
lrwxrwx 1 mysite mysite 67 Feb 23 07:18 d38e7e53-9f0b-4f11-bbcf-d19617971595 -> /omd/sites/mysite/tmp/check_mk/data_source_cache/push-agent/mynewhost
----

If you delete this softlink, the host will need to be re-registered.


=== Registering on behalf

For easier registration of multiple hosts, any host on which the agent is installed can perform registration on behalf of others.
This involves exporting a JSON file, which can then be transferred to the target host and imported there.
Again, as before, the host registered in the job must already be set up in the site.

First, the registration is performed on any host in the monitoring as a substitute.
Here, of course, the {CMK} server is a good choice, as it is usually the first host to be included in the monitoring.
As with the example above, you can pass the password by option or be asked for it interactively if you omit the `--password` option.
We redirect the JSON output to a file in the example:

[{shell}]
----
{c-root} cmk-agent-ctl proxy-register \
    --hostname mynewhost3 \
    --server cmkserver --site mysite \
    --user automation > /tmp/mynewhost3.json
----

Now we transfer the file `/tmp/mynewhost3.json` to the host we registered for and import the file:

[{shell}]
----
{c-root} cmk-agent-ctl import /tmp/mynewhost3.json
----


[#test]
== Testing and error diagnosis

Once you have installed and registered the agent, you are probably wondering how to test out if you did everything correctly.
All the possibilities that exist from the {CMK} server are described in the general chapter about xref:wato_monitoringagents#diagnostics[agents].
But of course there are more diagnostic possibilities when logged in directly on the monitored host itself.

As the new agent introduces the two components Agent Controller on the host and Agent Receiver on the {CMK} server, the number of places where something can go wrong increases.
We work our way from the agent script to the Agent Controller to the {CMK} site.


[#script_output]
=== Output of the agent script

The agent script is a simple shell script that obtains data about your system and outputs it as loosely formatted text.
You can call it directly on the command line.
Since the output can be somewhat long, `less` is very handy here, which you can exit in the output with the Q key:

[{shell-raw}]
----
{c-root} check_mk_agent | less
<<check_mk>>
Version: 2.1.0b1
AgentOS: linux
Hostname: mynewhost
AgentDirectory: /etc/check_mk
DataDirectory: /var/lib/check_mk_agent
SpoolDirectory: /var/lib/check_mk_agent/spool
PluginsDirectory: /usr/lib/check_mk_agent/plugins
LocalDirectory: /usr/lib/check_mk_agent/local
AgentController: cmk-agent-ctl 0.1.0
----

This way you can test if all desired data is included in the output - for example, if all installed plug-ins provide data.

By the way, you do not have to be `root` to call the agent.
However, the output may then be missing some information that requires `root` privileges to obtain (e.g. multipath information and the output of `ethtool`).


=== Agent script in debug mode

To prevent possible error output from non-functioning plug-ins or commands from "contaminating" the actual data, the agent script generally suppresses the standard error channel.
If you are looking for a specific problem, you can re-enable it by calling the agent script in a special debug mode.
You do this with the `-d` option.
This will also print all shell commands that the script executes.

To work with `less` here, you have to combine standard output and error channel with `2>&1`:

[{shell}]
----
{c-root} check_mk_agent -d 2>&1 | less
----


=== Agent Controller in dump mode

The Agent Controller provides its own subcommand `dump` which displays the full agent output as it arrives in the monitoring:

[{shell-raw}]
----
{c-root} cmk-agent-ctl dump | less
<<check_mk>>
Version: 2.1.0b1
AgentOS: linux
Hostname: mynewhost
----

This allows you to verify that the data from the agent script has arrived at the Agent Controller. 
This output does not yet prove that the agent is also reachable over the network.


=== Connection test from outside

If it is ensured that locally the agent script and the installed plug-ins are executed correctly, you can check next from the {CMK} server via `netcat` (or `nc`) whether port 6556 is reachable:

[{shell}]
----
{c-omd} echo | nc 10.76.23.189 6556
16
----

The output `16` indicates that the connection establishment was successful and now the TLS handshake can take place.
Since everything else here is TLS encrypted, no detailed check is possible.

*Note:* If the communication between agent and {CMK} server is _still_ unencrypted (as in legacy pull mode) or is and remains unencrypted (as in xref:agent_linux_legacy#[legacy mode]), you will get the full unencrypted agent output with this command instead of the `16`.


=== Test with the {CMK} command line

Instead of using `nc`, you can use the {CMK} command line tool to request and display the complete agent output.
The `--debug -v` options add some debugging information. 

[{shell-raw}]
----
{c-omd} cmk --debug -v -d mynewhost
----

Eventually, the output will only contain a debug trace like this:

[{shell-raw}]
----
[TCPFetcher] Execute data source
Traceback (most recent call last):
  File "/omd/sites/mysite/lib/python3/cmk/core_helpers/tcp.py", line 194, in _wrap_tls
    return ctx.wrap_socket(self._socket, server_hostname=str(controller_uuid))
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 500, in wrap_socket
    return self.sslsocket_class._create(
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 1040, in _create
    self.do_handshake()
  File "/omd/sites/mysite/lib/python3.9/ssl.py", line 1309, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: TLSV1_ALERT_ACCESS_DENIED] tlsv1 alert access denied (_ssl.c:1129)
[...]
cmk.utils.exceptions.MKFetcherError: Error establishing TLS connection
----

In this case, you should first use `root` privileges on the new host to determine the status of the connection:

[{shell-raw}]
----
{c-root} cmk-agent-ctl status
----

If this command shows a correct registry on the {CMK} server, a simple restart of the Agent Controller daemon will suffice in many cases:

[{shell-raw}]
----
{c-root} systemctl restart cmk-agent-ctl-daemon
----


[#security]
== Security

=== Preliminary consideration

Security is an important criterion for any software, here monitoring must not make an exception.
Since the monitoring agent is installed on every monitored server, a security problem here would have particularly serious consequences.

That's why security was taken into account already during the design of {CMK} and since the first days of {CMK} there is an ironclad principle:
_The agent does not read data from the network. Period._ 
This certainly rules out the possibility of an attacker injecting any commands or script components through the 6556 monitoring port.


=== Transport Layer Security (TLS)

For an attacker, however, even a process list can be a first approach to draw conclusions about worthwhile targets.
Therefore, transport encryption between agent and {CMK} server with Transport Layer Security (TLS) is mandatory starting with {CMK} version {v21}.
Here, the {CMK} server "pings" the monitored host, which then establishes the TLS connection to the {CMK} server and transmits the agent output over it. 
Since only {CMK} servers with which a trust relationship exists can initiate this data transfer, there is no risk of data falling into the wrong hands.


=== Restricting access via IP addresses

Since only authorized {CMK} servers can retrieve data and unauthorized servers fail after a few bytes of handshake, the risk of a _Denial of Service (DoS)_ attack is very low.
For this reason, no further access restriction is currently planned.
Of course you can block port 6556 against unauthorized access via `iptables`.
A possibly existing rule to restrict access to certain IP addresses, which is transferred to clients via Bakery, is ignored by the Agent Controller.


=== Disabling built-in encryption

Especially when updating the agent, xref:agent_linux_legacy#encryption[built-in (symmetric) encryption] may be active, performed by the agent script itself.
If TLS encryption and built-in encryption are active at the same time, then the entropy of the transmitted data is so high that compression, which is active as of version {v21}, will not save any transmitted data - and will burden the CPUs of both the host and the {CMK} server with additional further encryption and decryption steps.

For this reason, you should disable the built-in encryption promptly after switching to TLS.
Under {CRE} you can do this by renaming the configuration file `/etc/check_mk/encryption.cfg`.

{cee-only} In the {CEE}, you can change existing rules to _Use TLS encryption_ in [.guihint]#Setup > Agents > Access to agents > Encryption (Linux, Windows)# in the [.guihint]#Encryption (Linux, Windows)# section and then xref:agent_deployment#[rebake] the agent packages.
After the next automatic agent update, the agent script encryption is disabled, but guaranteed encryption by the Agent Controller.
Note that after the automatic agent update, only registered hosts can provide monitoring data.


[#disabled_sections]
== Disabling sections

The output of the {CMK} agent is divided into sections.
Each of these sections contains related information and is usually simply the output of a diagnostic command.
Sections always start with a section header.
This is a line enclosed in `<<<` and `>>>`.

Except for {CMK}'s own sections, you can individually disable any of the 30+ sections that the agent generates by default.
Specifically, this means that the corresponding commands will not be executed by the agent at all, possibly saving computation time.
Other reasons for disabling could be that you are simply not interested in certain information from a certain group of hosts, or that a particular host is providing erroneous values and you want to suspend retrieval of that data for a short time.

As a user of one of the {CEE}, you can simply create a rule via [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Disabled sections (Linux agent)# which will then be taken into account by the xref:glossar#agent_bakery[Agent Bakery].

.In the {EE} you can disable sections by rule
image::agent_linux_disabled_sections.png[alt="List of agent rules for the Linux agent."]

In the rule, you will find a separate checkbox for each section that can be disabled.
For each checkbox selected, you will then find -- after the newly baked agent has been installed on the selected hosts -- a separate entry in the Agent Bakery `/etc/check_mk/exclude_sections.cfg` configuration file.
For example, if you were to select `Running processes` and `Systemd services`, the appropriate configuration file would look like this:

./etc/check_mk/exclude_sections.cfg
[{file}]
----
MK_SKIP_PS=yes
MK_SKIP_SYSTEMD=yes
----

Users of {CRE} can manually create the above `/etc/check_mk/exclude_sections.cfg` file and enter there the sections that should be disabled.
All sections that can be disabled are listed in the `~/share/check_mk/agents/cfg_examples/exclude_sections.cfg` file.


[#plugins]
== Extending the agent by plug-ins

=== What are agent plug-ins?

The agent script `/usr/bin/check_mk_agent` contains a whole set of sections which provide monitoring data for various check plug-ins which are then automatically found by the service discovery.
This includes all important monitoring of the operating system.

In addition, there is the possibility to extend the agent with _agent plug-ins_.
These are small scripts or programs that are called by the agent and extend it with additional sections with additional monitoring data.
The {CMK} project provides a number of such plug-ins, which -- if installed and configured correctly -- automatically provide new services in the service discovery.

Why aren't these plug-ins simply hard-coded into the agent?
For each of the plug-ins, there is one of the following reasons:

* The plug-in is written in a programming language other than shell and therefore cannot be implemented inline (example: `mk_logwatch`).
* The plug-in needs a configuration anyway, without which it would not work (example: `mk_oracle`).
* The plug-in is so special that it is not needed by most users (example: `plesk_domains`).


[#manualplugins]
=== Manual installation

The included plug-ins for Linux and Unix can all be found on the {CMK} server under `share/check_mk/agents/plugins`.
They are also available from the agents download page in the Setup menu (as described in the xref:download_gui[installation] chapter) in the [.guihint]#Plugins# box:

.The beginning of the long list of available agent plug-ins
image::agent_linux_files_agent_plugins.png[alt="Download page with agent plug-ins."]

For all agent plug-ins we provide, there are matching check plug-ins that can evaluate their data and generate services.
These are already installed, so that newly found services are immediately recognized and can be configured.

*Note:* Before you install a plug-in on the host, take a look at the corresponding file.
Often you will find important information there about the correct use of the plug-in.

The actual installation is then simple:
Copy the file to `/usr/lib/check_mk_agent/plugins`.
Make sure that it is executable.
If not, use a `chmod 755`.
The agent will not run the plug-in otherwise.
Especially if you do not transfer the files via `scp` but fetch them via HTTP from the download page, the execution permission will be lost.

As soon as the plug-in is executable and in the correct directory, it will be called automatically by the agent and a new section will be created in the agent output.
This usually has the same name as the plug-in.
Complex plug-ins (e.g. `mk_oracle`) even create a whole set of new sections.


[#pluginconfig]
=== Configuration

Some plug-ins need a configuration file in `/etc/check_mk/` to work.
For others, a configuration is optional and allows special features or customizations.
Still others just work that way.
You have several sources to get information:

* The documentation for the associated check plug-ins in your {CMK} site, which you can access via [.guihint]#Setup > Services > Catalog of check plugins#.
* Comments in the plug-in itself (often very helpful!).
* An appropriate article in this manual (e.g. about monitoring xref:monitoring_oracle#[Oracle]).


[#async_plugins]
=== Asynchronous execution

Just like xref:mrpe[MRPE], you can also have plug-ins executed asynchronously.
This is very useful if the plug-ins have a long runtime and the obtained state data does not need to be regenerated every minute anyway.

Asynchronous execution is not configured via a file.
Instead, you create a subdirectory under `/usr/lib/check_mk_agent/plugins` whose name is a number: a number of seconds.
Plug-ins in this directory are not only executed asynchronously, but at the same time you specify a minimum waiting time with the number of seconds before the plug-in should be executed again.
If the agent is queried again before the time expires, it uses cached data from the last time the plug-in was executed.
This allows you to configure a longer interval for the plug-in than the typical one minute.

The following example shows how to change the `my_foo_plugin` plug-in from synchronous execution to asynchronous execution with an interval of 5 minutes (or 300 seconds):

[{shell}]
----
{c-root} cd /usr/lib/check_mk_agent/plugins
{c-root} mkdir 300
{c-root} mv my_foo_plugin 300
----

*Note:* Note that some plug-ins already implement asynchronous execution on their own.
This includes `mk_oracle`.
Install such plug-ins directly after `/usr/lib/check_mk_agent/plugins`.


[#install_plugins_using_bakery]
=== Installation via the Agent Bakery

{cee-only}
In the {CEE}, the included plug-ins can be configured via the xref:glossar#agent_bakery[Agent Bakery].
This takes care of both the installation of the plug-in itself and the correct creation of the configuration file, should one be needed.

Each plug-in is configured via an agent rule.
You can find the appropriate rule sets in [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Agent Plugins#:

.List of rules for the agent plug-ins in the {EE}
image::agent_linux_rules_agent_plugins.png[alt="Page with rules for configuring agent plug-ins in the {EE}."]


=== Manual execution

Since agent plug-ins are executable programs, you can run them manually for testing and diagnostic purposes.
However, there are plug-ins that need certain environment variables set by the agent to find their configuration file, for example.
Set these before executing by hand:

[{shell-raw}]
----
{c-root} export MK_LIBDIR=/usr/lib/check_mk_agent
{c-root} export MK_CONFDIR=/etc/check_mk
{c-root} export MK_VARDIR=/var/lib/check_mk_agent
{c-root} /usr/lib/check_mk_agent/plugins/mk_foobar
<<foobar>>
FOO BAR BLUBB 17 47 11
----

Some plug-ins also know special call options for debugging.
Just take a look at the plug-in file.


[#e2e_monitoring]
== Including classic (Nagios) check plug-ins

[#mrpe]
=== Running plug-ins via MRPE

There are two good reasons to use Nagios plug-ins also under {CMK}.
If you migrated your monitoring from a Nagios based solution to {CMK}, you can continue to use older check plug-ins for which there is no {CMK} counterpart yet.
In many cases these are self-written plug-ins in Perl or Shell. 

The second reason for using Nagios plug-ins is true end-to-end monitoring.
Let's assume you have your {CMK} server, a web server and a database server distributed over a large data center.
In such a case, the response times of the database server measured from the {CMK} server are not very meaningful.
It is far more important to know these values for the connection between the web server and the database server.

The {CMK} agent provides a simple mechanism to meet both of these requirements:
_MK's Remote Plug-in Executor_ or _MRPE_ for short.
The name is deliberately an analogy to Nagios' _NRPE_, which performs the same task there.

The MRPE is built into the agent and is configured with a simple text file, which you create as `/etc/check_mk/mrpe.cfg`.
There you specify one plug-in call per line -- along with the name you want {CMK} to use for the service it automatically creates for it.
Here is an example:

./etc/check_mk/mrpe.cfg
[{file}]
----
Foo_Application /usr/local/bin/check_foo -w 60 -c 80
Bar_Extender /usr/local/bin/check_bar -s -X -w 4:5
----

Now, if you run the agent locally, you will find a new section per plug-in called `+<<mrpe>>+` which contains the name, exit code and output of the plug-in.
You can check this with the following handy `grep` command:

[{shell-raw}]
----
{c-root} check_mk_agent | grep -A1 '^...mrpe'
<<mrpe>>
(check_foo) Foo_Application 0 OK - Foo server up and running.
<<mrpe>>
(check_bar) Bar_Extender 1 WARN - Bar extender overload 6.012|bar_load=6.012
----

The `0` and `1` in the output represent the exit codes of the plug-ins and follow the classic scheme:
`0` = {OK}, `1` = {WARN}, `2` = {CRIT} and `3` = {UNKNOWN}.

The rest is now done automatically by {CMK}.
Once you invoke service discovery for the host, the two new services will show up as xref:wato_services#available[available].
It will look like this:

.One service is detected for each of the two MRPE plug-ins
image::agent_linux_mrpe_checks.png[alt="List of detected services for the plug-ins set up via MRPE."]

By the way, due to the syntax of the file, the name cannot contain spaces.
However, using the same syntax as in URLs, you can replace a space with `%20` (ASCII code 32 for space is hexadecimal 20):

./etc/check_mk/mrpe.cfg
[{file}]
----
Foo%20Application /usr/local/bin/check_foo -w 60 -c 80
Bar%20Extender /usr/local/bin/check_bar -s -X -w 4:5
----


=== Asynchronous execution

Note that all plug-ins you list in `mrpe.cfg` are executed synchronously in order.
Therefore, the plug-ins should not have too much execution time.
If one plug-in hangs, the execution of all others will be delayed.
This can cause the complete querying of the agent by {CMK} to time out and the host can no longer be reliably monitored.

If you really need longer running plug-ins, you should switch them to asynchronous execution and thus avoid the problem.
To do this, set a time in seconds that a calculated result should be valid, e.g. `300` for five minutes.
To do this, set `(interval=300)` in `mrpe.cfg` after the service name:

./etc/check_mk/mrpe.cfg
[{file}]
----
Foo_Application (interval=300) /usr/local/bin/check_foo -w 60 -c 80
Bar_Extender /usr/local/bin/check_bar -s -X -w 4:5
----

This has several effects:

* The plug-in runs in a background process and no longer slows down the execution of the agent.
* Because the agent does not wait for execution, the result is not delivered until the _next_ call to the agent.
* At the earliest after 300 seconds the plug-in is executed again.
Until then, the old result is reused.

So you can run tests that need a bit more computing time in larger intervals without having to configure anything on the {CMK} server.


=== MRPE with the Agent Bakery

{cee-only}
Users of {EE} can also configure MRPE with the xref:glossary#agent_bakery[Agent Bakery].
Responsible for this is the ruleset [.guihint]#Setup > Agents > Windows, Linux Solaris, AIX > Agent Rules > Generic Options > Execute MRPE checks#.
There you can configure the same things as described above.
The file `mrpe.cfg` will then be generated automatically by the Bakery.

.MRPEs can be configured conveniently by rule in the {EE}
image::agent_linux_mrpe_rule.png[alt="Rule for MRPE configuration in the Agent Bakery."]


==== Baking the plug-ins

You can also have the check plug-ins themselves delivered with the package.
This then makes the agent complete and does not require manual installation of any additional files.
The whole thing goes like this:

. Create the directory `local/share/check_mk/agents/custom` on the {CMK} server.
. Create a subdirectory there -- e.g. `my_mrpe_plugins`.
. Again, create the subdirectory `bin` in it.
. Copy your plug-ins into the `bin` folder.
. Create a rule in [.guihint]#Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Generic Options > Deploy custom files with agent# .
. Select `my_mrpe_plugins`, save and bake!

The check plug-ins will now be installed into the default `bin` directory of your agent.
By default this is `/usr/bin`.
So when configuring the MRPE checks, use `/usr/bin/check_foo` instead of `/usr/local/bin/check_foo`.


[#hw_monitoring]
== Monitoring hardware

To monitor a Linux server as completely as possible, the hardware is of course also part of the monitoring.
The monitoring is done partly directly with the {CMK} agent, partly also via special xref:plugins[plug-ins].
In addition, there are still cases where you can implement monitoring via SNMP or even via a separate management board.


=== Monitoring of SMART values

Modern hard disks almost always have _S.M.A.R.T._ (Self-Monitoring, Analysis and Reporting Technology).
This system continuously records data about the state of the HDD or SSD and {CMK} can retrieve these values with the plug-in `smart` and evaluate the most important of them.
For the plug-in to work after installation, the following requirements must be met:

* The package `smartmontools` must be installed. You can install it on all modern distributions via the respective package manager.
* If the hard disks are connected to a RAID controller and this controller allows access to the SMART values, the respective tool must be installed for this. Supported are `tw_cli` (3ware) and `megacli` (LSI).

If these requirements are met and the plug-in is installed, the data is automatically read and appended to the output of the agent.
In {CMK} you can then activate the xref:wato_services#available[new services] directly:

.SMART services found by service discovery
image::agent_linux_smart_stats.png[alt="List of SMART services found in service discovery."]

If -- as seen in the screenshot -- `cmd_timeout` occurs occasionally, switch the plug-in to asynchronous execution at intervals of a few minutes.


=== Monitoring using IPMI

IPMI (Intelligent Platform Management Interface) is a hardware management interface that also allows hardware monitoring.
{CMK} uses `freeipmi` to access the hardware directly without a network.
`freeipmi` is installed from the package sources and is then ready to use, so that the data is already transmitted the next time {CMK} is called.

If `freeipmi` is not available or there are other reasons not to install it, `ipmitool` can also be used.
`ipmitool` is often already present on the system and only needs to be supplied with an IPMI device driver, such as that provided by the `openipmi` package.
Again, you do not need to do anything else after that.
The data will be collected automatically by {CMK}.

For error diagnosis you can also run the tools manually in a shell of the host.
If you have installed the package `freeipmi`, you can control the function with this:

[{shell}]
----
{c-root} ipmi-sensors Temperature
32 Temperature_Ambient 20.00_C_(1.00/42.00) [OK]
96 Temperature_Systemboard 23.00_C_(1.00/65.00) [OK]
160 Temperature_CPU_1 31.00_C_(1.00/90.00) [OK]
224 Temperature_CPU_2 NA(1.00/78.00) [Unknown]
288 Temperature_DIMM-1A 54.00_C_(NA/115.00) [OK]
352 Temperature_DIMM-1B 56.00_C_(NA/115.00) [OK]
416 Temperature_DIMM-2A NA(NA/115.00) [Unknown]
480 Temperature_DIMM-2B NA(NA/115.00) [Unknown]
----

If `ipmitool` has been installed, you can check the output of the data with the following command:

[{shell}]
----
{c-root} ipmitool sensor list
UID_Light 0.000 unspecified ok na na 0.000 na na na
Int._Health_LED 0.000 unspecified ok na na 0.000 na na na
Ext._Health_LED 0.000 unspecified ok na na 0.000 na na na
Power_Supply_1 0.000 unspecified nc na na 0.000 na na na
Fan_Block_1 34.888 unspecified nc na na 75.264 na na na
Fan_Block_2 29.792 unspecified nc na na 75.264 na na na
Temp_1 39,000 degrees_C ok na na -64,000 na na na
Temp_2 16,000 degrees_C ok na na -64,000 na na na na
Power_Meter 180.000 Watts cr na na 384.00
----


=== Manufacturer-specific tools

Many large server manufacturers also offer their own tools to read out the hardware information and provide it via SNMP.
The following requirements apply to be able to retrieve this data and provide {CMK}:

* An SNMP server is set up on the Linux host.
* The manufacturer's tool is installed (e.g. Dell's _OpenManage_ or Supermicro's _SuperDoctor_).
* The host is configured in {CMK} for monitoring via SNMP *in addition* to the {CMK} agent.
See the article on xref:snmp#snmp_cmk_agent[monitoring with SNMP] to learn how.

The new services for hardware monitoring supported by this are then automatically detected.
No further plug-ins are needed.


=== Additional monitoring via management board

You can configure a management board for each host and fetch additional data via SNMP.
The services recognized thereby are assigned then likewise to the Host.

The setup of the management board is very simple.
Just enter the protocol, the IP address and the access data for SNMP in the properties of the host and save the new settings:

.Configure the management board for SNMP in the properties of the host in the Setup
image::agent_linux_snmp_management_board.png[alt="The configuration of the management board for SNMP in the properties of the host."]

In service discovery, the newly discovered services are then enabled as usual.


[#files]
== Files and directories

=== Paths on the monitored host

[cols="45,~",options="header"]
|===
|Path |Meaning
|`/usr/bin` |Installation location of the agent script `check_mk_agent` and the Agent Controller `cmk-agent-ctl` on the target system.
|`/usr/lib/check_mk_agent` |Base directory for extensions to the agent.
|`/usr/lib/check_mk_agent/plugins` |Directory for plug-ins which should be automatically executed by the agent and extend its output with additional monitoring data. Plug-ins can be written in any available programming language.
|`/usr/lib/check_mk_agent/local` |Directory for custom xref:localchecks#[local checks].
|`/var/lib/check_mk_agent` |Base directory for agent data.
|`/var/lib/check_mk_agent/cache` |Here cache data of individual sections is stored and appended back to the agent on each execution as long as the cache data is valid.
|`/var/lib/check_mk_agent/job` |Directory for monitored jobs. These will be appended to the agent output on each execution.
|`/var/lib/check_mk_agent/spool` |Contains data created e.g. by cronjobs which have their own section. These are also appended to the agent output.
|`/var/agent-receiver/received-outputs` |Contains for each connection its UUID as a soft link pointing to the folder containing the agent output.
|`/etc/check_mk` |Storage of configuration files for the agent.
|`/etc/check_mk/mrpe.cfg` |Configuration file for xref:mrpe[MRPE] -- for running classic Nagios compatible check plug-ins.
|`/etc/check_mk/encryption.cfg` |Configuration for xref:agent_linux_legacy#encryption[built-in encryption] of agent data.
|`/etc/check_mk/exclude_sections.cfg` |Configuration file for the xref:disabled_sections[disabling certain sections] of the agent.
|===


=== Paths on the {CMK} server

[cols="45,~",options="header"]
|===
|Path |Meaning
|`local/share/check_mk/agents/custom` |Base directory for custom files to be delivered with a baked agent.
|`share/check_mk/agents/cfg_examples/exclude_sections.cfg` |Example configuration file for disabling sections.
|===
